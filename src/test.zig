const std = @import("std");
const Disassembler = @import("decoder.zig").Disassembler;

test "a64 ignored fields" {
    try doTheTest(&.{
        0xe8, 0x23, 0x33, 0x1e,
    },
        \\fcmp s31, #0.0
        \\
    );
}

test "arm64 advsimd" {
    try doTheTest(&.{
        0x00, 0xb8, 0x20, 0x0e,
        0x00, 0xb8, 0x20, 0x4e,
        0x00, 0xb8, 0x60, 0x0e,
        0x00, 0xb8, 0x60, 0x4e,
        0x00, 0xb8, 0xa0, 0x0e,
        0x00, 0xb8, 0xa0, 0x4e,
        0x00, 0x84, 0x20, 0x0e,
        0x00, 0x84, 0x20, 0x4e,
        0x00, 0x84, 0x60, 0x0e,
        0x00, 0x84, 0x60, 0x4e,
        0x00, 0x84, 0xa0, 0x0e,
        0x00, 0x84, 0xa0, 0x4e,
        0x00, 0x84, 0xe0, 0x4e,
        0x41, 0x84, 0xe3, 0x5e,
        0x00, 0x40, 0x20, 0x0e,
        0x00, 0x40, 0x20, 0x4e,
        0x00, 0x40, 0x60, 0x0e,
        0x00, 0x40, 0x60, 0x4e,
        0x00, 0x40, 0xa0, 0x0e,
        0x00, 0x40, 0xa0, 0x4e,
        0x00, 0xbc, 0x20, 0x0e,
        0x00, 0xbc, 0x20, 0x4e,
        0x00, 0xbc, 0x60, 0x0e,
        0x00, 0xbc, 0x60, 0x4e,
        0x00, 0xbc, 0xa0, 0x0e,
        0x00, 0xbc, 0xa0, 0x4e,
        0x00, 0xbc, 0xe0, 0x4e,
        0x00, 0xb8, 0xf1, 0x5e,
        0x00, 0xb8, 0x31, 0x0e,
        0x00, 0xb8, 0x31, 0x4e,
        0x00, 0xb8, 0x71, 0x0e,
        0x00, 0xb8, 0x71, 0x4e,
        0x00, 0xb8, 0xb1, 0x4e,
        0x60, 0x0c, 0x08, 0x4e,
        0x60, 0x0c, 0x04, 0x4e,
        0x60, 0x0c, 0x04, 0x0e,
        0x60, 0x0c, 0x02, 0x4e,
        0x60, 0x0c, 0x02, 0x0e,
        0x60, 0x0c, 0x01, 0x4e,
        0x60, 0x0c, 0x01, 0x0e,
        0x60, 0x04, 0x18, 0x4e,
        0x60, 0x04, 0x0c, 0x0e,
        0x60, 0x04, 0x0c, 0x4e,
        0x60, 0x04, 0x06, 0x0e,
        0x60, 0x04, 0x06, 0x4e,
        0x60, 0x04, 0x03, 0x0e,
        0x60, 0x04, 0x03, 0x4e,
        0x43, 0x2c, 0x14, 0x4e,
        0x43, 0x2c, 0x14, 0x4e,
        0x43, 0x3c, 0x14, 0x0e,
        0x43, 0x3c, 0x14, 0x0e,
        0x43, 0x3c, 0x18, 0x4e,
        0x43, 0x3c, 0x18, 0x4e,
        0xa2, 0x1c, 0x18, 0x4e,
        0xa2, 0x1c, 0x0c, 0x4e,
        0xa2, 0x1c, 0x06, 0x4e,
        0xa2, 0x1c, 0x03, 0x4e,
        0xa2, 0x1c, 0x18, 0x4e,
        0xa2, 0x1c, 0x0c, 0x4e,
        0xa2, 0x1c, 0x06, 0x4e,
        0xa2, 0x1c, 0x03, 0x4e,
        0xe2, 0x45, 0x18, 0x6e,
        0xe2, 0x25, 0x0c, 0x6e,
        0xe2, 0x15, 0x06, 0x6e,
        0xe2, 0x0d, 0x03, 0x6e,
        0xe2, 0x05, 0x18, 0x6e,
        0xe2, 0x45, 0x1c, 0x6e,
        0xe2, 0x35, 0x1e, 0x6e,
        0xe2, 0x2d, 0x15, 0x6e,
        0x60, 0x0c, 0x08, 0x4e,
        0x60, 0x0c, 0x0c, 0x4e,
        0x60, 0x0c, 0x0c, 0x0e,
        0x60, 0x0c, 0x0e, 0x4e,
        0x60, 0x0c, 0x0e, 0x0e,
        0x60, 0x0c, 0x0f, 0x4e,
        0x60, 0x0c, 0x0f, 0x0e,
        0xe2, 0x75, 0x18, 0x6e,
        0xe2, 0x35, 0x0c, 0x6e,
        0xe2, 0x15, 0x06, 0x6e,
        0xe2, 0x0d, 0x03, 0x6e,
        0xe2, 0x05, 0x18, 0x6e,
        0xe2, 0x55, 0x1c, 0x6e,
        0xe2, 0x35, 0x1e, 0x6e,
        0xe2, 0x2d, 0x15, 0x6e,
        0x00, 0x1c, 0x20, 0x0e,
        0x00, 0x1c, 0x20, 0x4e,
        0x00, 0x1c, 0x60, 0x0e,
        0x00, 0x8c, 0x20, 0x2e,
        0x00, 0x3c, 0x20, 0x0e,
        0x00, 0x34, 0x20, 0x0e,
        0x00, 0x34, 0x20, 0x2e,
        0x00, 0x3c, 0x20, 0x2e,
        0x00, 0x8c, 0x20, 0x0e,
        0x00, 0xd4, 0xa0, 0x2e,
        0x00, 0xec, 0x20, 0x2e,
        0x00, 0xec, 0xa0, 0x2e,
        0x00, 0xd4, 0x20, 0x2e,
        0x00, 0xd4, 0x20, 0x0e,
        0x00, 0xe4, 0x20, 0x0e,
        0x00, 0xe4, 0x20, 0x2e,
        0x00, 0xe4, 0xa0, 0x2e,
        0x00, 0xfc, 0x20, 0x2e,
        0x00, 0xc4, 0x20, 0x2e,
        0x00, 0xc4, 0x20, 0x0e,
        0x00, 0xf4, 0x20, 0x2e,
        0x00, 0xf4, 0x20, 0x0e,
        0x00, 0xc4, 0xa0, 0x2e,
        0x00, 0xc4, 0xa0, 0x0e,
        0x00, 0xf4, 0xa0, 0x2e,
        0x00, 0xf4, 0xa0, 0x0e,
        0x00, 0xcc, 0x20, 0x0e,
        0x00, 0xcc, 0xa0, 0x0e,
        0x00, 0xdc, 0x20, 0x0e,
        0x00, 0xdc, 0x20, 0x2e,
        0x00, 0xfc, 0x20, 0x0e,
        0x00, 0xfc, 0xa0, 0x0e,
        0x00, 0xd4, 0xa0, 0x0e,
        0x00, 0x94, 0x20, 0x0e,
        0x00, 0x94, 0x20, 0x2e,
        0x00, 0x9c, 0x20, 0x0e,
        0x00, 0x9c, 0x20, 0x2e,
        0x00, 0x7c, 0x20, 0x0e,
        0x00, 0x74, 0x20, 0x0e,
        0x00, 0x04, 0x20, 0x0e,
        0x00, 0x24, 0x20, 0x0e,
        0x00, 0xa4, 0x20, 0x0e,
        0x00, 0x64, 0x20, 0x0e,
        0x00, 0xac, 0x20, 0x0e,
        0x00, 0x6c, 0x20, 0x0e,
        0x00, 0x0c, 0x20, 0x0e,
        0x00, 0xb4, 0x60, 0x0e,
        0x00, 0xb4, 0x60, 0x2e,
        0x00, 0x5c, 0x20, 0x0e,
        0x00, 0x4c, 0x20, 0x0e,
        0x00, 0x2c, 0x20, 0x0e,
        0x00, 0x14, 0x20, 0x0e,
        0x00, 0x54, 0x20, 0x0e,
        0x00, 0x44, 0x20, 0x0e,
        0x00, 0x84, 0x20, 0x2e,
        0x00, 0x7c, 0x20, 0x2e,
        0x00, 0x74, 0x20, 0x2e,
        0x00, 0x04, 0x20, 0x2e,
        0x00, 0x24, 0x20, 0x2e,
        0x00, 0xa4, 0x20, 0x2e,
        0x00, 0x64, 0x20, 0x2e,
        0x00, 0xac, 0x20, 0x2e,
        0x00, 0x6c, 0x20, 0x2e,
        0x00, 0x0c, 0x20, 0x2e,
        0x00, 0x5c, 0x20, 0x2e,
        0x00, 0x4c, 0x20, 0x2e,
        0x00, 0x2c, 0x20, 0x2e,
        0x00, 0x14, 0x20, 0x2e,
        0x00, 0x54, 0x20, 0x2e,
        0x00, 0x44, 0x20, 0x2e,
        0x00, 0x1c, 0xe0, 0x2e,
        0x00, 0x1c, 0xa0, 0x2e,
        0x00, 0x1c, 0x60, 0x2e,
        0x00, 0x1c, 0x20, 0x2e,
        0x00, 0x1c, 0xe0, 0x0e,
        0x00, 0x1c, 0xa1, 0x0e,
        0x00, 0x68, 0x20, 0x0e,
        0x00, 0x68, 0x20, 0x4e,
        0x00, 0x68, 0x60, 0x0e,
        0x00, 0x68, 0x60, 0x4e,
        0x00, 0x68, 0xa0, 0x0e,
        0x00, 0x68, 0xa0, 0x4e,
        0x00, 0x48, 0x20, 0x0e,
        0x00, 0x48, 0x20, 0x2e,
        0x00, 0x58, 0x20, 0x0e,
        0x00, 0xf8, 0xa0, 0x0e,
        0x00, 0xc8, 0x21, 0x0e,
        0x00, 0xc8, 0x21, 0x2e,
        0x00, 0xb8, 0x21, 0x0e,
        0x00, 0xb8, 0x21, 0x2e,
        0x00, 0xa8, 0x21, 0x0e,
        0x00, 0xa8, 0x21, 0x2e,
        0x00, 0xa8, 0xa1, 0x0e,
        0x00, 0xa8, 0xa1, 0x2e,
        0x00, 0xb8, 0xa1, 0x0e,
        0x00, 0xb8, 0xa1, 0x2e,
        0x00, 0xf8, 0xa0, 0x2e,
        0x00, 0xd8, 0xa1, 0x0e,
        0x00, 0xd8, 0xa1, 0x2e,
        0x00, 0xf8, 0xa1, 0x2e,
        0x00, 0xb8, 0x20, 0x2e,
        0x00, 0x58, 0x20, 0x2e,
        0x00, 0x58, 0x60, 0x2e,
        0x00, 0x18, 0x20, 0x0e,
        0x00, 0x08, 0x20, 0x2e,
        0x00, 0x08, 0x20, 0x0e,
        0x00, 0x68, 0x20, 0x0e,
        0x00, 0x28, 0x20, 0x0e,
        0x00, 0xd8, 0x21, 0x0e,
        0x00, 0x38, 0x21, 0x2e,
        0x00, 0x78, 0x20, 0x0e,
        0x00, 0x78, 0x20, 0x2e,
        0x00, 0x48, 0x21, 0x0e,
        0x00, 0x28, 0x21, 0x2e,
        0x00, 0x38, 0x20, 0x0e,
        0x00, 0x68, 0x20, 0x2e,
        0x00, 0x28, 0x20, 0x2e,
        0x00, 0xd8, 0x21, 0x2e,
        0x00, 0x48, 0x21, 0x2e,
        0x00, 0xc8, 0xa1, 0x0e,
        0x00, 0xc8, 0xa1, 0x2e,
        0x00, 0x38, 0x20, 0x2e,
        0x00, 0x28, 0x21, 0x0e,
        0x00, 0x48, 0x20, 0x0e,
        0x00, 0x48, 0x20, 0x2e,
        0x00, 0x58, 0x20, 0x0e,
        0x00, 0xf8, 0xa0, 0x0e,
        0x00, 0xc8, 0x21, 0x0e,
        0x00, 0xc8, 0x21, 0x2e,
        0x00, 0xb8, 0x21, 0x0e,
        0x00, 0xb8, 0x21, 0x2e,
        0x00, 0xa8, 0x21, 0x0e,
        0x00, 0xa8, 0x21, 0x2e,
        0x00, 0xa8, 0xa1, 0x0e,
        0x00, 0xa8, 0xa1, 0x2e,
        0x00, 0xb8, 0xa1, 0x0e,
        0x00, 0xb8, 0xa1, 0x2e,
        0x00, 0xf8, 0xa0, 0x2e,
        0x00, 0xd8, 0xa1, 0x0e,
        0x00, 0xd8, 0xa1, 0x2e,
        0x00, 0xf8, 0xa1, 0x2e,
        0x00, 0xb8, 0x20, 0x2e,
        0x00, 0x58, 0x20, 0x2e,
        0x00, 0x58, 0x60, 0x2e,
        0x00, 0x18, 0x20, 0x0e,
        0x00, 0x08, 0x20, 0x2e,
        0x00, 0x08, 0x20, 0x0e,
        0x00, 0x68, 0x20, 0x0e,
        0x00, 0x28, 0x20, 0x0e,
        0x00, 0xd8, 0x21, 0x0e,
        0x00, 0x38, 0x21, 0x2e,
        0x00, 0x78, 0x20, 0x0e,
        0x00, 0x78, 0x20, 0x2e,
        0x00, 0x48, 0x21, 0x0e,
        0x00, 0x28, 0x21, 0x2e,
        0x00, 0x38, 0x20, 0x0e,
        0x00, 0x68, 0x20, 0x2e,
        0x00, 0x28, 0x20, 0x2e,
        0x00, 0xd8, 0x21, 0x2e,
        0x00, 0x48, 0x21, 0x2e,
        0x00, 0xc8, 0xa1, 0x0e,
        0x00, 0xc8, 0xa1, 0x2e,
        0x00, 0x38, 0x20, 0x2e,
        0x00, 0x28, 0x21, 0x0e,
        0x00, 0x98, 0x20, 0x0e,
        0x00, 0x98, 0x20, 0x4e,
        0x00, 0x98, 0x60, 0x0e,
        0x00, 0x98, 0x60, 0x4e,
        0x00, 0x98, 0xa0, 0x0e,
        0x00, 0x98, 0xa0, 0x4e,
        0x00, 0x98, 0xe0, 0x4e,
        0x00, 0x88, 0x20, 0x2e,
        0x00, 0x88, 0x20, 0x0e,
        0x00, 0x98, 0x20, 0x2e,
        0x00, 0xa8, 0x20, 0x0e,
        0x00, 0xd8, 0xa0, 0x0e,
        0x00, 0xc8, 0xa0, 0x2e,
        0x00, 0xc8, 0xa0, 0x0e,
        0x00, 0xd8, 0xa0, 0x2e,
        0x00, 0xe8, 0xa0, 0x0e,
        0x00, 0x78, 0x21, 0x0e,
        0x00, 0x78, 0x21, 0x4e,
        0x00, 0x78, 0x61, 0x0e,
        0x00, 0x78, 0x61, 0x4e,
        0x00, 0x68, 0x21, 0x0e,
        0x00, 0x68, 0x21, 0x4e,
        0x00, 0x68, 0x61, 0x0e,
        0x00, 0x68, 0x61, 0x4e,
        0x00, 0x68, 0x61, 0x2e,
        0x00, 0x68, 0x61, 0x6e,
        0x20, 0x14, 0x00, 0x2f,
        0x20, 0x34, 0x00, 0x2f,
        0x20, 0x54, 0x00, 0x2f,
        0x20, 0x74, 0x00, 0x2f,
        0x20, 0x94, 0x00, 0x2f,
        0x20, 0x94, 0x00, 0x2f,
        0x20, 0xb4, 0x00, 0x2f,
        0x20, 0x14, 0x00, 0x6f,
        0x20, 0x34, 0x00, 0x6f,
        0x20, 0x54, 0x00, 0x6f,
        0x20, 0x74, 0x00, 0x6f,
        0x20, 0x94, 0x00, 0x6f,
        0x20, 0xb4, 0x00, 0x6f,
        0x00, 0xf4, 0x02, 0x6f,
        0x00, 0xf4, 0x02, 0x0f,
        0x00, 0xf4, 0x02, 0x4f,
        0x20, 0x14, 0x00, 0x0f,
        0x20, 0x34, 0x00, 0x0f,
        0x20, 0x54, 0x00, 0x0f,
        0x20, 0x74, 0x00, 0x0f,
        0x20, 0x94, 0x00, 0x0f,
        0x20, 0xb4, 0x00, 0x0f,
        0x20, 0x14, 0x00, 0x4f,
        0x20, 0x34, 0x00, 0x4f,
        0x20, 0x54, 0x00, 0x4f,
        0x20, 0x74, 0x00, 0x4f,
        0x20, 0x94, 0x00, 0x4f,
        0x20, 0xb4, 0x00, 0x4f,
        0x21, 0x70, 0x40, 0x0c,
        0x42, 0xa0, 0x40, 0x4c,
        0x64, 0x64, 0x40, 0x0c,
        0x87, 0x24, 0x40, 0x4c,
        0x0c, 0xa8, 0x40, 0x0c,
        0x0a, 0x68, 0x40, 0x4c,
        0x2d, 0xac, 0x40, 0x0c,
        0x4f, 0x7c, 0x40, 0x4c,
        0xe0, 0x03, 0x40, 0x0d,
        0x41, 0x70, 0xdf, 0x0c,
        0x41, 0xa0, 0xdf, 0x0c,
        0x41, 0x60, 0xdf, 0x0c,
        0x41, 0x20, 0xdf, 0x0c,
        0x42, 0x70, 0xdf, 0x4c,
        0x42, 0xa0, 0xdf, 0x4c,
        0x42, 0x60, 0xdf, 0x4c,
        0x42, 0x20, 0xdf, 0x4c,
        0x64, 0x74, 0xdf, 0x0c,
        0x64, 0xa4, 0xdf, 0x0c,
        0x64, 0x64, 0xdf, 0x0c,
        0x64, 0x24, 0xdf, 0x0c,
        0x87, 0x74, 0xdf, 0x4c,
        0x87, 0xa4, 0xdf, 0x4c,
        0x87, 0x64, 0xdf, 0x4c,
        0x87, 0x24, 0xdf, 0x4c,
        0x0c, 0x78, 0xdf, 0x0c,
        0x0c, 0xa8, 0xdf, 0x0c,
        0x0c, 0x68, 0xdf, 0x0c,
        0x0c, 0x28, 0xdf, 0x0c,
        0x0a, 0x78, 0xdf, 0x4c,
        0x0a, 0xa8, 0xdf, 0x4c,
        0x0a, 0x68, 0xdf, 0x4c,
        0x0a, 0x28, 0xdf, 0x4c,
        0x2d, 0x7c, 0xdf, 0x0c,
        0x2d, 0xac, 0xdf, 0x0c,
        0x2d, 0x6c, 0xdf, 0x0c,
        0x2d, 0x2c, 0xdf, 0x0c,
        0x4f, 0x7c, 0xdf, 0x4c,
        0x4f, 0xac, 0xdf, 0x4c,
        0x4f, 0x6c, 0xdf, 0x4c,
        0x4f, 0x2c, 0xdf, 0x4c,
        0x21, 0x70, 0x00, 0x0c,
        0x42, 0xa0, 0x00, 0x4c,
        0x64, 0x64, 0x00, 0x0c,
        0x87, 0x24, 0x00, 0x4c,
        0x0c, 0xa8, 0x00, 0x0c,
        0x0a, 0x68, 0x00, 0x4c,
        0x2d, 0xac, 0x00, 0x0c,
        0x4f, 0x7c, 0x00, 0x4c,
        0x61, 0x08, 0x40, 0x0d,
        0x82, 0x84, 0x40, 0x4d,
        0xa3, 0x58, 0x40, 0x0d,
        0xc4, 0x80, 0x40, 0x4d,
        0x61, 0x08, 0xdf, 0x0d,
        0x82, 0x84, 0xdf, 0x4d,
        0xa3, 0x58, 0xdf, 0x0d,
        0xc4, 0x80, 0xdf, 0x4d,
        0x61, 0x08, 0x00, 0x0d,
        0x82, 0x84, 0x00, 0x4d,
        0xa3, 0x58, 0x00, 0x0d,
        0xc4, 0x80, 0x00, 0x4d,
        0x61, 0x08, 0x9f, 0x0d,
        0x82, 0x84, 0x9f, 0x4d,
        0xa3, 0x58, 0x9f, 0x0d,
        0xc4, 0x80, 0x9f, 0x4d,
        0x61, 0x08, 0xc4, 0x0d,
        0x82, 0x84, 0xc5, 0x4d,
        0xa3, 0x58, 0xc6, 0x0d,
        0xc4, 0x80, 0xc7, 0x4d,
        0x61, 0x08, 0x84, 0x0d,
        0x82, 0x84, 0x85, 0x4d,
        0xa3, 0x58, 0x86, 0x0d,
        0xc4, 0x80, 0x87, 0x4d,
        0x41, 0x70, 0xc3, 0x0c,
        0x42, 0xa0, 0xc4, 0x4c,
        0x64, 0x64, 0xc5, 0x0c,
        0x87, 0x24, 0xc6, 0x4c,
        0x0c, 0xa8, 0xc7, 0x0c,
        0x0a, 0x68, 0xc8, 0x4c,
        0x2d, 0xac, 0xc9, 0x0c,
        0x4f, 0x7c, 0xca, 0x4c,
        0x41, 0x70, 0x83, 0x0c,
        0x42, 0xa0, 0x84, 0x4c,
        0x64, 0x64, 0x85, 0x0c,
        0x87, 0x24, 0x86, 0x4c,
        0x0c, 0xa8, 0x87, 0x0c,
        0x0a, 0x68, 0x88, 0x4c,
        0x2d, 0xac, 0x89, 0x0c,
        0x4f, 0x7c, 0x8a, 0x4c,
        0x41, 0x70, 0x9f, 0x0c,
        0x41, 0xa0, 0x9f, 0x0c,
        0x41, 0x60, 0x9f, 0x0c,
        0x41, 0x20, 0x9f, 0x0c,
        0x42, 0x70, 0x9f, 0x4c,
        0x42, 0xa0, 0x9f, 0x4c,
        0x42, 0x60, 0x9f, 0x4c,
        0x42, 0x20, 0x9f, 0x4c,
        0x64, 0x74, 0x9f, 0x0c,
        0x64, 0xa4, 0x9f, 0x0c,
        0x64, 0x64, 0x9f, 0x0c,
        0x64, 0x24, 0x9f, 0x0c,
        0x87, 0x74, 0x9f, 0x4c,
        0x87, 0xa4, 0x9f, 0x4c,
        0x87, 0x64, 0x9f, 0x4c,
        0x87, 0x24, 0x9f, 0x4c,
        0x0c, 0x78, 0x9f, 0x0c,
        0x0c, 0xa8, 0x9f, 0x0c,
        0x0c, 0x68, 0x9f, 0x0c,
        0x0c, 0x28, 0x9f, 0x0c,
        0x0a, 0x78, 0x9f, 0x4c,
        0x0a, 0xa8, 0x9f, 0x4c,
        0x0a, 0x68, 0x9f, 0x4c,
        0x0a, 0x28, 0x9f, 0x4c,
        0x2d, 0x7c, 0x9f, 0x0c,
        0x2d, 0xac, 0x9f, 0x0c,
        0x2d, 0x6c, 0x9f, 0x0c,
        0x2d, 0x2c, 0x9f, 0x0c,
        0x4f, 0x7c, 0x9f, 0x4c,
        0x4f, 0xac, 0x9f, 0x4c,
        0x4f, 0x6c, 0x9f, 0x4c,
        0x4f, 0x2c, 0x9f, 0x4c,
        0x21, 0xc0, 0x40, 0x0d,
        0x21, 0xc0, 0xc2, 0x0d,
        0x64, 0xc4, 0x40, 0x0d,
        0x64, 0xc4, 0xc5, 0x0d,
        0xa9, 0xc8, 0x40, 0x0d,
        0xa9, 0xc8, 0xc6, 0x0d,
        0xec, 0xcc, 0x40, 0x0d,
        0xec, 0xcc, 0xc8, 0x0d,
        0x21, 0xc0, 0xdf, 0x0d,
        0x21, 0xc4, 0xdf, 0x0d,
        0x21, 0xc8, 0xdf, 0x0d,
        0x21, 0xcc, 0xdf, 0x0d,
        0x45, 0x80, 0x40, 0x4c,
        0x0a, 0x88, 0x40, 0x0c,
        0x45, 0x80, 0x00, 0x4c,
        0x0a, 0x88, 0x00, 0x0c,
        0x61, 0x08, 0x20, 0x0d,
        0x82, 0x84, 0x20, 0x4d,
        0xc3, 0x50, 0x20, 0x0d,
        0xe4, 0x90, 0x20, 0x4d,
        0x61, 0x08, 0xbf, 0x0d,
        0x82, 0x84, 0xbf, 0x4d,
        0xa3, 0x58, 0xbf, 0x0d,
        0xc4, 0x80, 0xbf, 0x4d,
        0x61, 0x08, 0x60, 0x0d,
        0x82, 0x84, 0x60, 0x4d,
        0xc3, 0x50, 0x60, 0x0d,
        0xe4, 0x90, 0x60, 0x4d,
        0x61, 0x08, 0xff, 0x0d,
        0x82, 0x84, 0xff, 0x4d,
        0xa3, 0x58, 0xff, 0x0d,
        0xc4, 0x80, 0xff, 0x4d,
        0x61, 0x08, 0xe4, 0x0d,
        0x82, 0x84, 0xe6, 0x4d,
        0xa3, 0x58, 0xe8, 0x0d,
        0xc4, 0x80, 0xea, 0x4d,
        0x61, 0x08, 0xa4, 0x0d,
        0x82, 0x84, 0xa6, 0x4d,
        0xa3, 0x58, 0xa8, 0x0d,
        0xc4, 0x80, 0xaa, 0x4d,
        0x64, 0x84, 0xc5, 0x0c,
        0x0c, 0x88, 0xc7, 0x0c,
        0x00, 0x80, 0xdf, 0x0c,
        0x00, 0x80, 0xdf, 0x4c,
        0x00, 0x84, 0xdf, 0x0c,
        0x00, 0x84, 0xdf, 0x4c,
        0x00, 0x88, 0xdf, 0x0c,
        0x00, 0x88, 0xdf, 0x4c,
        0x00, 0x8c, 0xdf, 0x4c,
        0x64, 0x84, 0x85, 0x0c,
        0x0c, 0x88, 0x87, 0x0c,
        0x00, 0x80, 0x9f, 0x0c,
        0x00, 0x80, 0x9f, 0x4c,
        0x00, 0x84, 0x9f, 0x0c,
        0x00, 0x84, 0x9f, 0x4c,
        0x00, 0x88, 0x9f, 0x0c,
        0x00, 0x88, 0x9f, 0x4c,
        0x00, 0x8c, 0x9f, 0x4c,
        0x21, 0xc0, 0x60, 0x0d,
        0x21, 0xc0, 0xe2, 0x0d,
        0x21, 0xc0, 0x60, 0x4d,
        0x21, 0xc0, 0xe2, 0x4d,
        0x21, 0xc4, 0x60, 0x0d,
        0x21, 0xc4, 0xe2, 0x0d,
        0x21, 0xc4, 0x60, 0x4d,
        0x21, 0xc4, 0xe2, 0x4d,
        0x21, 0xc8, 0x60, 0x0d,
        0x21, 0xc8, 0xe2, 0x0d,
        0x21, 0xcc, 0x60, 0x4d,
        0x21, 0xcc, 0xe2, 0x4d,
        0x21, 0xcc, 0x60, 0x0d,
        0x21, 0xcc, 0xe2, 0x0d,
        0x21, 0xc0, 0xff, 0x0d,
        0x21, 0xc0, 0xff, 0x4d,
        0x21, 0xc4, 0xff, 0x0d,
        0x21, 0xc4, 0xff, 0x4d,
        0x21, 0xc8, 0xff, 0x0d,
        0x21, 0xcc, 0xff, 0x4d,
        0x21, 0xcc, 0xff, 0x0d,
        0x21, 0x40, 0x40, 0x0c,
        0x45, 0x40, 0x40, 0x4c,
        0x0a, 0x48, 0x40, 0x0c,
        0x21, 0x40, 0x00, 0x0c,
        0x45, 0x40, 0x00, 0x4c,
        0x0a, 0x48, 0x00, 0x0c,
        0x61, 0x28, 0xc4, 0x0d,
        0x82, 0xa4, 0xc5, 0x4d,
        0xa3, 0x78, 0xc6, 0x0d,
        0xc4, 0xa0, 0xc7, 0x4d,
        0x61, 0x28, 0x84, 0x0d,
        0x82, 0xa4, 0x85, 0x4d,
        0xa3, 0x78, 0x86, 0x0d,
        0xc4, 0xa0, 0x87, 0x4d,
        0x61, 0x28, 0x9f, 0x0d,
        0x82, 0xa4, 0x9f, 0x4d,
        0xa3, 0x78, 0x9f, 0x0d,
        0xc4, 0xa0, 0x9f, 0x4d,
        0x41, 0x40, 0xc3, 0x0c,
        0x42, 0x40, 0xc4, 0x4c,
        0x64, 0x44, 0xc5, 0x0c,
        0x87, 0x44, 0xc6, 0x4c,
        0x0c, 0x48, 0xc7, 0x0c,
        0x0a, 0x48, 0xc8, 0x4c,
        0x4f, 0x4c, 0xca, 0x4c,
        0x00, 0x40, 0xdf, 0x0c,
        0x00, 0x40, 0xdf, 0x4c,
        0x00, 0x44, 0xdf, 0x0c,
        0x00, 0x44, 0xdf, 0x4c,
        0x00, 0x48, 0xdf, 0x0c,
        0x00, 0x48, 0xdf, 0x4c,
        0x00, 0x4c, 0xdf, 0x4c,
        0x41, 0x40, 0x83, 0x0c,
        0x42, 0x40, 0x84, 0x4c,
        0x64, 0x44, 0x85, 0x0c,
        0x87, 0x44, 0x86, 0x4c,
        0x0c, 0x48, 0x87, 0x0c,
        0x0a, 0x48, 0x88, 0x4c,
        0x4f, 0x4c, 0x8a, 0x4c,
        0x00, 0x40, 0x9f, 0x0c,
        0x00, 0x40, 0x9f, 0x4c,
        0x00, 0x44, 0x9f, 0x0c,
        0x00, 0x44, 0x9f, 0x4c,
        0x00, 0x48, 0x9f, 0x0c,
        0x00, 0x48, 0x9f, 0x4c,
        0x00, 0x4c, 0x9f, 0x4c,
        0x61, 0x28, 0x40, 0x0d,
        0x82, 0xa4, 0x40, 0x4d,
        0xc3, 0x70, 0x40, 0x0d,
        0xe4, 0xb0, 0x40, 0x4d,
        0x61, 0x28, 0xdf, 0x0d,
        0x82, 0xa4, 0xdf, 0x4d,
        0xa3, 0x78, 0xdf, 0x0d,
        0xc4, 0xa0, 0xdf, 0x4d,
        0x61, 0x28, 0x00, 0x0d,
        0x82, 0xa4, 0x00, 0x4d,
        0xc3, 0x70, 0x00, 0x0d,
        0xe4, 0xb0, 0x00, 0x4d,
        0x21, 0xe0, 0x40, 0x0d,
        0x21, 0xe0, 0xc2, 0x0d,
        0x21, 0xe0, 0x40, 0x4d,
        0x21, 0xe0, 0xc2, 0x4d,
        0x21, 0xe4, 0x40, 0x0d,
        0x21, 0xe4, 0xc2, 0x0d,
        0x21, 0xe4, 0x40, 0x4d,
        0x21, 0xe4, 0xc2, 0x4d,
        0x21, 0xe8, 0x40, 0x0d,
        0x21, 0xe8, 0xc2, 0x0d,
        0x21, 0xec, 0x40, 0x4d,
        0x21, 0xec, 0xc2, 0x4d,
        0x21, 0xec, 0x40, 0x0d,
        0x21, 0xec, 0xc2, 0x0d,
        0x21, 0xe0, 0xdf, 0x0d,
        0x21, 0xe0, 0xdf, 0x4d,
        0x21, 0xe4, 0xdf, 0x0d,
        0x21, 0xe4, 0xdf, 0x4d,
        0x21, 0xe8, 0xdf, 0x0d,
        0x21, 0xec, 0xdf, 0x4d,
        0x21, 0xec, 0xdf, 0x0d,
        0x21, 0x00, 0x40, 0x0c,
        0x45, 0x00, 0x40, 0x4c,
        0x0a, 0x08, 0x40, 0x0c,
        0x21, 0x00, 0x00, 0x0c,
        0x45, 0x00, 0x00, 0x4c,
        0x0a, 0x08, 0x00, 0x0c,
        0x61, 0x28, 0xe4, 0x0d,
        0x82, 0xa4, 0xe5, 0x4d,
        0xa3, 0x78, 0xe6, 0x0d,
        0xc4, 0xa0, 0xe7, 0x4d,
        0x61, 0x28, 0xff, 0x0d,
        0x82, 0xa4, 0xff, 0x4d,
        0xa3, 0x78, 0xff, 0x0d,
        0xc4, 0xa0, 0xff, 0x4d,
        0x61, 0x28, 0xa4, 0x0d,
        0x82, 0xa4, 0xa5, 0x4d,
        0xa3, 0x78, 0xa6, 0x0d,
        0xc4, 0xa0, 0xa7, 0x4d,
        0x61, 0x28, 0xbf, 0x0d,
        0x82, 0xa4, 0xbf, 0x4d,
        0xa3, 0x78, 0xbf, 0x0d,
        0xc4, 0xa0, 0xbf, 0x4d,
        0x41, 0x00, 0xc3, 0x0c,
        0x42, 0x00, 0xc4, 0x4c,
        0x64, 0x04, 0xc5, 0x0c,
        0x87, 0x04, 0xc6, 0x4c,
        0x0c, 0x08, 0xc7, 0x0c,
        0x0a, 0x08, 0xc8, 0x4c,
        0x4f, 0x0c, 0xca, 0x4c,
        0x00, 0x00, 0xdf, 0x0c,
        0x00, 0x00, 0xdf, 0x4c,
        0x00, 0x04, 0xdf, 0x0c,
        0x00, 0x04, 0xdf, 0x4c,
        0x00, 0x08, 0xdf, 0x0c,
        0x00, 0x08, 0xdf, 0x4c,
        0x00, 0x0c, 0xdf, 0x4c,
        0x00, 0x00, 0x9f, 0x0c,
        0x00, 0x00, 0x9f, 0x4c,
        0x00, 0x04, 0x9f, 0x0c,
        0x00, 0x04, 0x9f, 0x4c,
        0x00, 0x08, 0x9f, 0x0c,
        0x00, 0x08, 0x9f, 0x4c,
        0x00, 0x0c, 0x9f, 0x4c,
        0x41, 0x00, 0x83, 0x0c,
        0x42, 0x00, 0x84, 0x4c,
        0x64, 0x04, 0x85, 0x0c,
        0x87, 0x04, 0x86, 0x4c,
        0x0c, 0x08, 0x87, 0x0c,
        0x0a, 0x08, 0x88, 0x4c,
        0x4f, 0x0c, 0x8a, 0x4c,
        0x61, 0x28, 0x60, 0x0d,
        0x82, 0xa4, 0x60, 0x4d,
        0xc3, 0x70, 0x60, 0x0d,
        0xe4, 0xb0, 0x60, 0x4d,
        0x61, 0x28, 0x20, 0x0d,
        0x82, 0xa4, 0x20, 0x4d,
        0xc3, 0x70, 0x20, 0x0d,
        0xe4, 0xb0, 0x20, 0x4d,
        0x21, 0xe0, 0x60, 0x0d,
        0x21, 0xe0, 0xe2, 0x0d,
        0x21, 0xe0, 0x60, 0x4d,
        0x21, 0xe0, 0xe2, 0x4d,
        0x21, 0xe4, 0x60, 0x0d,
        0x21, 0xe4, 0xe2, 0x0d,
        0x21, 0xe4, 0x60, 0x4d,
        0x21, 0xe4, 0xe2, 0x4d,
        0x21, 0xe8, 0x60, 0x0d,
        0x21, 0xe8, 0xe2, 0x0d,
        0x21, 0xec, 0x60, 0x4d,
        0x21, 0xec, 0xe2, 0x4d,
        0x21, 0xec, 0x60, 0x0d,
        0x21, 0xec, 0xe2, 0x0d,
        0x21, 0xe0, 0xff, 0x0d,
        0x21, 0xe0, 0xff, 0x4d,
        0x21, 0xe4, 0xff, 0x0d,
        0x21, 0xe4, 0xff, 0x4d,
        0x21, 0xe8, 0xff, 0x0d,
        0x21, 0xec, 0xff, 0x4d,
        0x21, 0xec, 0xff,
        0x0d,
        // 0x20, 0xe4, 0x00, 0x2f,
        // 0x20, 0xe4, 0x00, 0x6f,
        // 0x20, 0xe4, 0x00, 0x0f,
        // 0x20, 0xe4, 0x00, 0x4f,
        // 0x20, 0x04, 0x00, 0x0f,
        // 0x20, 0x24, 0x00, 0x0f,
        // 0x20, 0x44, 0x00, 0x0f,
        // 0x20, 0x64, 0x00, 0x0f,
        // 0x20, 0x04, 0x00, 0x4f,
        // 0x20, 0x24, 0x00, 0x4f,
        // 0x20, 0x44, 0x00, 0x4f,
        // 0x20, 0x64, 0x00, 0x4f,
        // 0x20, 0x84, 0x00, 0x0f,
        // 0x20, 0xa4, 0x00, 0x0f,
        // 0x20, 0x84, 0x00, 0x4f,
        // 0x20, 0xa4, 0x00, 0x4f,
        // 0x20, 0x04, 0x00, 0x2f,
        // 0x20, 0x24, 0x00, 0x2f,
        // 0x20, 0x44, 0x00, 0x2f,
        // 0x20, 0x64, 0x00, 0x2f,
        // 0x20, 0x04, 0x00, 0x6f,
        // 0x20, 0x24, 0x00, 0x6f,
        // 0x20, 0x44, 0x00, 0x6f,
        // 0x20, 0x64, 0x00, 0x6f,
        // 0x20, 0x84, 0x00, 0x2f,
        // 0x20, 0xa4, 0x00, 0x2f,
        // 0x20, 0x84, 0x00, 0x6f,
        // 0x20, 0xa4, 0x00, 0x6f,
        // 0x20, 0xc4, 0x00, 0x2f,
        // 0x20, 0xd4, 0x00, 0x2f,
        // 0x20, 0xc4, 0x00, 0x6f,
        // 0x20, 0xd4, 0x00, 0x6f,
        // 0x00, 0x88, 0x21, 0x2e,
        // 0x00, 0x98, 0x21, 0x2e,
        // 0x00, 0x98, 0xa1, 0x2e,
        // 0x00, 0x98, 0x21, 0x0e,
        // 0x00, 0x88, 0x21, 0x0e,
        // 0x00, 0x88, 0xa1, 0x0e,
        // 0x00, 0x98, 0xa1, 0x0e,
        // 0x00, 0x18, 0xa0, 0x5f,
        // 0x00, 0x18, 0xc0, 0x5f,
        // 0x00, 0x58, 0xa0, 0x5f,
        // 0x00, 0x58, 0xc0, 0x5f,
        // 0x00, 0x98, 0xa0, 0x7f,
        // 0x00, 0x98, 0xc0, 0x7f,
        // 0x00, 0x98, 0xa0, 0x5f,
        // 0x00, 0x98, 0xc0, 0x5f,
        // 0x00, 0x38, 0x70, 0x5f,
        // 0x00, 0x38, 0xa0, 0x5f,
        // 0x00, 0x78, 0x70, 0x5f,
        // 0x00, 0xc8, 0x70, 0x5f,
        // 0x00, 0xc8, 0xa0, 0x5f,
        // 0x00, 0xb8, 0x70, 0x5f,
        // 0x00, 0xb8, 0xa0, 0x5f,
        // 0x00, 0xd8, 0x70, 0x5f,
        // 0x00, 0xd8, 0xa0, 0x5f,
        // 0x00, 0x10, 0x80, 0x0f,
        // 0x00, 0x10, 0xa0, 0x4f,
        // 0x00, 0x18, 0xc0, 0x4f,
        // 0x00, 0x50, 0x80, 0x0f,
        // 0x00, 0x50, 0xa0, 0x4f,
        // 0x00, 0x58, 0xc0, 0x4f,
        // 0x00, 0x90, 0x80, 0x2f,
        // 0x00, 0x90, 0xa0, 0x6f,
        // 0x00, 0x98, 0xc0, 0x6f,
        // 0x00, 0x90, 0x80, 0x0f,
        // 0x00, 0x90, 0xa0, 0x4f,
        // 0x00, 0x98, 0xc0, 0x4f,
        // 0x00, 0x00, 0x40, 0x2f,
        // 0x00, 0x00, 0x50, 0x6f,
        // 0x00, 0x08, 0x80, 0x2f,
        // 0x00, 0x08, 0xa0, 0x6f,
        // 0x00, 0x40, 0x40, 0x2f,
        // 0x00, 0x40, 0x50, 0x6f,
        // 0x00, 0x48, 0x80, 0x2f,
        // 0x00, 0x48, 0xa0, 0x6f,
        // 0x00, 0x80, 0x40, 0x0f,
        // 0x00, 0x80, 0x50, 0x4f,
        // 0x00, 0x88, 0x80, 0x0f,
        // 0x00, 0x88, 0xa0, 0x4f,
        // 0x00, 0x20, 0x40, 0x0f,
        // 0x00, 0x20, 0x50, 0x4f,
        // 0x00, 0x28, 0x80, 0x0f,
        // 0x00, 0x28, 0xa0, 0x4f,
        // 0x00, 0x60, 0x40, 0x0f,
        // 0x00, 0x60, 0x50, 0x4f,
        // 0x00, 0x68, 0x80, 0x0f,
        // 0x00, 0x68, 0xa0, 0x4f,
        // 0x00, 0xa0, 0x40, 0x0f,
        // 0x00, 0xa0, 0x50, 0x4f,
        // 0x00, 0xa8, 0x80, 0x0f,
        // 0x00, 0xa8, 0xa0, 0x4f,
        // 0x00, 0x30, 0x40, 0x0f,
        // 0x00, 0x30, 0x50, 0x4f,
        // 0x00, 0x38, 0x80, 0x0f,
        // 0x00, 0x38, 0xa0, 0x4f,
        // 0x00, 0x70, 0x40, 0x0f,
        // 0x00, 0x70, 0x50, 0x4f,
        // 0x00, 0x78, 0x80, 0x0f,
        // 0x00, 0x78, 0xa0, 0x4f,
        // 0x00, 0xc0, 0x40, 0x0f,
        // 0x00, 0xc0, 0x50, 0x4f,
        // 0x00, 0xc8, 0x80, 0x0f,
        // 0x00, 0xc8, 0xa0, 0x4f,
        // 0x00, 0xb0, 0x40, 0x0f,
        // 0x00, 0xb0, 0x50, 0x4f,
        // 0x00, 0xb8, 0x80, 0x0f,
        // 0x00, 0xb8, 0xa0, 0x4f,
        // 0x00, 0xd0, 0x40, 0x0f,
        // 0x00, 0xd0, 0x50, 0x4f,
        // 0x00, 0xd8, 0x80, 0x0f,
        // 0x00, 0xd8, 0xa0, 0x4f,
        // 0x00, 0x20, 0x40, 0x2f,
        // 0x00, 0x20, 0x50, 0x6f,
        // 0x00, 0x28, 0x80, 0x2f,
        // 0x00, 0x28, 0xa0, 0x6f,
        // 0x00, 0x60, 0x40, 0x2f,
        // 0x00, 0x60, 0x50, 0x6f,
        // 0x00, 0x68, 0x80, 0x2f,
        // 0x00, 0x68, 0xa0, 0x6f,
        // 0x00, 0xa0, 0x40, 0x2f,
        // 0x00, 0xa0, 0x50, 0x6f,
        // 0x00, 0xa8, 0x80, 0x2f,
        // 0x00, 0xa8, 0xa0, 0x6f,
        // 0x00, 0x54, 0x41, 0x5f,
        // 0x00, 0x54, 0x41, 0x7f,
        // 0x00, 0x9c, 0x09, 0x5f,
        // 0x00, 0x9c, 0x12, 0x5f,
        // 0x00, 0x9c, 0x23, 0x5f,
        // 0x00, 0x8c, 0x09, 0x7f,
        // 0x00, 0x8c, 0x12, 0x7f,
        // 0x00, 0x8c, 0x23, 0x7f,
        // 0x00, 0x64, 0x09, 0x7f,
        // 0x00, 0x64, 0x12, 0x7f,
        // 0x00, 0x64, 0x23, 0x7f,
        // 0x00, 0x64, 0x44, 0x7f,
        // 0x00, 0x74, 0x09, 0x5f,
        // 0x00, 0x74, 0x12, 0x5f,
        // 0x00, 0x74, 0x23, 0x5f,
        // 0x00, 0x74, 0x44, 0x5f,
        // 0x00, 0x94, 0x09, 0x5f,
        // 0x00, 0x94, 0x12, 0x5f,
        // 0x00, 0x94, 0x23, 0x5f,
        // 0x00, 0x84, 0x09, 0x7f,
        // 0x00, 0x84, 0x12, 0x7f,
        // 0x00, 0x84, 0x23, 0x7f,
        // 0x00, 0x44, 0x41, 0x7f,
        // 0x00, 0x24, 0x41, 0x5f,
        // 0x00, 0x34, 0x41, 0x5f,
        // 0x00, 0x04, 0x41, 0x5f,
        // 0x00, 0xe4, 0x21, 0x7f,
        // 0x00, 0xe4, 0x42, 0x7f,
        // 0x00, 0x9c, 0x09, 0x7f,
        // 0x00, 0x9c, 0x12, 0x7f,
        // 0x00, 0x9c, 0x23, 0x7f,
        // 0x00, 0x74, 0x09, 0x7f,
        // 0x00, 0x74, 0x12, 0x7f,
        // 0x00, 0x74, 0x23, 0x7f,
        // 0x00, 0x74, 0x44, 0x7f,
        // 0x00, 0x94, 0x09, 0x7f,
        // 0x00, 0x94, 0x12, 0x7f,
        // 0x00, 0x94, 0x23, 0x7f,
        // 0x00, 0x24, 0x41, 0x7f,
        // 0x00, 0x34, 0x41, 0x7f,
        // 0x00, 0x04, 0x41, 0x7f,
        // 0x00, 0x14, 0x41, 0x7f,
        // 0x00, 0xfc, 0x21, 0x0f,
        // 0x00, 0xfc, 0x22, 0x4f,
        // 0x00, 0xfc, 0x43, 0x4f,
        // 0x00, 0xfc, 0x21, 0x2f,
        // 0x00, 0xfc, 0x22, 0x6f,
        // 0x00, 0xfc, 0x43, 0x6f,
        // 0x00, 0x8c, 0x09, 0x0f,
        // 0x00, 0x8c, 0x0a, 0x4f,
        // 0x00, 0x8c, 0x13, 0x0f,
        // 0x00, 0x8c, 0x14, 0x4f,
        // 0x00, 0x8c, 0x25, 0x0f,
        // 0x00, 0x8c, 0x26, 0x4f,
        // 0x00, 0xe4, 0x21, 0x0f,
        // 0x00, 0xe4, 0x22, 0x4f,
        // 0x00, 0xe4, 0x43, 0x4f,
        // 0x00, 0x54, 0x09, 0x0f,
        // 0x00, 0x54, 0x0a, 0x4f,
        // 0x00, 0x54, 0x13, 0x0f,
        // 0x00, 0x54, 0x14, 0x4f,
        // 0x00, 0x54, 0x25, 0x0f,
        // 0x00, 0x54, 0x26, 0x4f,
        // 0x00, 0x54, 0x47, 0x4f,
        // 0x00, 0x84, 0x09, 0x0f,
        // 0x00, 0x84, 0x0a, 0x4f,
        // 0x00, 0x84, 0x13, 0x0f,
        // 0x00, 0x84, 0x14, 0x4f,
        // 0x00, 0x84, 0x25, 0x0f,
        // 0x00, 0x84, 0x26, 0x4f,
        // 0x00, 0x54, 0x09, 0x2f,
        // 0x00, 0x54, 0x0a, 0x6f,
        // 0x00, 0x54, 0x13, 0x2f,
        // 0x00, 0x54, 0x14, 0x6f,
        // 0x00, 0x54, 0x25, 0x2f,
        // 0x00, 0x54, 0x26, 0x6f,
        // 0x00, 0x54, 0x47, 0x6f,
        // 0x00, 0x9c, 0x09, 0x0f,
        // 0x00, 0x9c, 0x0a, 0x4f,
        // 0x00, 0x9c, 0x13, 0x0f,
        // 0x00, 0x9c, 0x14, 0x4f,
        // 0x00, 0x9c, 0x25, 0x0f,
        // 0x00, 0x9c, 0x26, 0x4f,
        // 0x00, 0x8c, 0x09, 0x2f,
        // 0x00, 0x8c, 0x0a, 0x6f,
        // 0x00, 0x8c, 0x13, 0x2f,
        // 0x00, 0x8c, 0x14, 0x6f,
        // 0x00, 0x8c, 0x25, 0x2f,
        // 0x00, 0x8c, 0x26, 0x6f,
        // 0x00, 0x64, 0x09, 0x2f,
        // 0x00, 0x64, 0x0a, 0x6f,
        // 0x00, 0x64, 0x13, 0x2f,
        // 0x00, 0x64, 0x14, 0x6f,
        // 0x00, 0x64, 0x25, 0x2f,
        // 0x00, 0x64, 0x26, 0x6f,
        // 0x00, 0x64, 0x47, 0x6f,
        // 0x00, 0x74, 0x09, 0x0f,
        // 0x00, 0x74, 0x0a, 0x4f,
        // 0x00, 0x74, 0x13, 0x0f,
        // 0x00, 0x74, 0x14, 0x4f,
        // 0x00, 0x74, 0x25, 0x0f,
        // 0x00, 0x74, 0x26, 0x4f,
        // 0x00, 0x74, 0x47, 0x4f,
        // 0x00, 0x94, 0x09, 0x0f,
        // 0x00, 0x94, 0x0a, 0x4f,
        // 0x00, 0x94, 0x13, 0x0f,
        // 0x00, 0x94, 0x14, 0x4f,
        // 0x00, 0x94, 0x25, 0x0f,
        // 0x00, 0x94, 0x26, 0x4f,
        // 0x00, 0x84, 0x09, 0x2f,
        // 0x00, 0x84, 0x0a, 0x6f,
        // 0x00, 0x84, 0x13, 0x2f,
        // 0x00, 0x84, 0x14, 0x6f,
        // 0x00, 0x84, 0x25, 0x2f,
        // 0x00, 0x84, 0x26, 0x6f,
        // 0x00, 0x44, 0x09, 0x2f,
        // 0x00, 0x44, 0x0a, 0x6f,
        // 0x00, 0x44, 0x13, 0x2f,
        // 0x00, 0x44, 0x14, 0x6f,
        // 0x00, 0x44, 0x25, 0x2f,
        // 0x00, 0x44, 0x26, 0x6f,
        // 0x00, 0x44, 0x47, 0x6f,
        // 0x00, 0x24, 0x09, 0x0f,
        // 0x00, 0x24, 0x0a, 0x4f,
        // 0x00, 0x24, 0x13, 0x0f,
        // 0x00, 0x24, 0x14, 0x4f,
        // 0x00, 0x24, 0x25, 0x0f,
        // 0x00, 0x24, 0x26, 0x4f,
        // 0x00, 0x24, 0x47, 0x4f,
        // 0x00, 0x34, 0x09, 0x0f,
        // 0x00, 0x34, 0x0a, 0x4f,
        // 0x00, 0x34, 0x13, 0x0f,
        // 0x00, 0x34, 0x14, 0x4f,
        // 0x00, 0x34, 0x25, 0x0f,
        // 0x00, 0x34, 0x26, 0x4f,
        // 0x00, 0x34, 0x47, 0x4f,
        // 0x00, 0xa4, 0x09, 0x0f,
        // 0x00, 0xa4, 0x0a, 0x4f,
        // 0x00, 0xa4, 0x13, 0x0f,
        // 0x00, 0xa4, 0x14, 0x4f,
        // 0x00, 0xa4, 0x25, 0x0f,
        // 0x00, 0xa4, 0x26, 0x4f,
        // 0x00, 0x04, 0x09, 0x0f,
        // 0x00, 0x04, 0x0a, 0x4f,
        // 0x00, 0x04, 0x13, 0x0f,
        // 0x00, 0x04, 0x14, 0x4f,
        // 0x00, 0x04, 0x25, 0x0f,
        // 0x00, 0x04, 0x26, 0x4f,
        // 0x00, 0x04, 0x47, 0x4f,
        // 0x00, 0x04, 0x09, 0x0f,
        // 0x00, 0x14, 0x0a, 0x4f,
        // 0x00, 0x14, 0x13, 0x0f,
        // 0x00, 0x14, 0x14, 0x4f,
        // 0x00, 0x14, 0x25, 0x0f,
        // 0x00, 0x14, 0x26, 0x4f,
        // 0x00, 0x14, 0x47, 0x4f,
        // 0x00, 0x14, 0x40, 0x5f,
        // 0x00, 0xe4, 0x21, 0x2f,
        // 0x00, 0xe4, 0x22, 0x6f,
        // 0x00, 0xe4, 0x43, 0x6f,
        // 0x00, 0x9c, 0x09, 0x2f,
        // 0x00, 0x9c, 0x0a, 0x6f,
        // 0x00, 0x9c, 0x13, 0x2f,
        // 0x00, 0x9c, 0x14, 0x6f,
        // 0x00, 0x9c, 0x25, 0x2f,
        // 0x00, 0x9c, 0x26, 0x6f,
        // 0x00, 0x74, 0x09, 0x2f,
        // 0x00, 0x74, 0x0a, 0x6f,
        // 0x00, 0x74, 0x13, 0x2f,
        // 0x00, 0x74, 0x14, 0x6f,
        // 0x00, 0x74, 0x25, 0x2f,
        // 0x00, 0x74, 0x26, 0x6f,
        // 0x00, 0x74, 0x47, 0x6f,
        // 0x00, 0x94, 0x09, 0x2f,
        // 0x00, 0x94, 0x0a, 0x6f,
        // 0x00, 0x94, 0x13, 0x2f,
        // 0x00, 0x94, 0x14, 0x6f,
        // 0x00, 0x94, 0x25, 0x2f,
        // 0x00, 0x94, 0x26, 0x6f,
        // 0x00, 0x24, 0x09, 0x2f,
        // 0x00, 0x24, 0x0a, 0x6f,
        // 0x00, 0x24, 0x13, 0x2f,
        // 0x00, 0x24, 0x14, 0x6f,
        // 0x00, 0x24, 0x25, 0x2f,
        // 0x00, 0x24, 0x26, 0x6f,
        // 0x00, 0x24, 0x47, 0x6f,
        // 0x00, 0x34, 0x09, 0x2f,
        // 0x00, 0x34, 0x0a, 0x6f,
        // 0x00, 0x34, 0x13, 0x2f,
        // 0x00, 0x34, 0x14, 0x6f,
        // 0x00, 0x34, 0x25, 0x2f,
        // 0x00, 0x34, 0x26, 0x6f,
        // 0x00, 0x34, 0x47, 0x6f,
        // 0x00, 0xa4, 0x09, 0x2f,
        // 0x00, 0xa4, 0x0a, 0x6f,
        // 0x00, 0xa4, 0x13, 0x2f,
        // 0x00, 0xa4, 0x14, 0x6f,
        // 0x00, 0xa4, 0x25, 0x2f,
        // 0x00, 0xa4, 0x26, 0x6f,
        // 0x00, 0x04, 0x09, 0x2f,
        // 0x00, 0x04, 0x0a, 0x6f,
        // 0x00, 0x04, 0x13, 0x2f,
        // 0x00, 0x04, 0x14, 0x6f,
        // 0x00, 0x04, 0x25, 0x2f,
        // 0x00, 0x04, 0x26, 0x6f,
        // 0x00, 0x04, 0x47, 0x6f,
        // 0x00, 0x14, 0x09, 0x2f,
        // 0x00, 0x14, 0x0a, 0x6f,
        // 0x00, 0x14, 0x13, 0x2f,
        // 0x00, 0x14, 0x14, 0x6f,
        // 0x00, 0x14, 0x25, 0x2f,
        // 0x00, 0x14, 0x26, 0x6f,
        // 0x00, 0x14, 0x47, 0x6f,
        // 0x00, 0xe0, 0x20, 0x0e,
        // 0x00, 0xe0, 0x20, 0x4e,
        // 0x00, 0xe0, 0xe0, 0x0e,
        // 0x00, 0xe0, 0xe0, 0x4e,
        // 0x41, 0xd8, 0x70, 0x7e,
        // 0x83, 0xd8, 0x30, 0x7e,
        // 0x82, 0x60, 0x01, 0x4e,
        // 0x80, 0x60, 0x01, 0x0e,
        // 0xa2, 0x00, 0x01, 0x4e,
        // 0xa0, 0x00, 0x01, 0x0e,
        // 0xa2, 0x40, 0x01, 0x4e,
        // 0xa0, 0x40, 0x01, 0x0e,
        // 0xc2, 0x20, 0x01, 0x4e,
        // 0xc0, 0x20, 0x01, 0x0e,
        // 0x82, 0x70, 0x01, 0x4e,
        // 0x80, 0x70, 0x01, 0x0e,
        // 0xa2, 0x10, 0x01, 0x4e,
        // 0xa0, 0x10, 0x01, 0x0e,
        // 0xa2, 0x50, 0x01, 0x4e,
        // 0xa0, 0x50, 0x01, 0x0e,
        // 0xc2, 0x30, 0x01, 0x4e,
        // 0xc0, 0x30, 0x01, 0x0e,
        // 0x00, 0x80, 0x20, 0x0e,
        // 0x00, 0x80, 0x20, 0x4e,
        // 0x00, 0x80, 0xa0, 0x0e,
        // 0x00, 0x80, 0xa0, 0x4e,
        // 0x00, 0x80, 0x20, 0x2e,
        // 0x00, 0x80, 0x20, 0x6e,
        // 0x00, 0x80, 0xa0, 0x2e,
        // 0x00, 0x80, 0xa0, 0x6e,
        // 0x00, 0x90, 0x60, 0x5e,
        // 0x00, 0x90, 0xa0, 0x5e,
        // 0x00, 0xb0, 0x60, 0x5e,
        // 0x00, 0xb0, 0xa0, 0x5e,
        // 0xaa, 0xc5, 0xc7, 0x4d,
        // 0xaa, 0xc9, 0xc7, 0x4d,
        // 0xaa, 0xc1, 0xc7, 0x4d,
        // 0x00, 0xd0, 0x60, 0x5e,
        // 0x00, 0xd0, 0xa0, 0x5e,
        // 0x00, 0xd8, 0xa1, 0x7e,
        // 0x00, 0xd8, 0xe1, 0x7e,
        // 0xca, 0xcd, 0xc7, 0x4d,
        // 0xea, 0xc9, 0xe7, 0x4d,
        // 0xea, 0xe9, 0xc7, 0x4d,
        // 0xea, 0xe9, 0xe7, 0x4d,
        // 0x62, 0xdc, 0x21, 0x5e,
        // 0x62, 0xdc, 0x61, 0x5e,
        // 0xe8, 0x6b, 0xdf, 0x4c,
    },
        \\abs.8b v0, v0
        \\abs.16b v0, v0
        \\abs.4h v0, v0
        \\abs.8h v0, v0
        \\abs.2s v0, v0
        \\abs.4s v0, v0
        \\add.8b v0, v0, v0
        \\add.16b v0, v0, v0
        \\add.4h v0, v0, v0
        \\add.8h v0, v0, v0
        \\add.2s v0, v0, v0
        \\add.4s v0, v0, v0
        \\add.2d v0, v0, v0
        \\add d1, d2, d3
        \\addhn.8b v0, v0, v0
        \\addhn2.16b v0, v0, v0
        \\addhn.4h v0, v0, v0
        \\addhn2.8h v0, v0, v0
        \\addhn.2s v0, v0, v0
        \\addhn2.4s v0, v0, v0
        \\addp.8b v0, v0, v0
        \\addp.16b v0, v0, v0
        \\addp.4h v0, v0, v0
        \\addp.8h v0, v0, v0
        \\addp.2s v0, v0, v0
        \\addp.4s v0, v0, v0
        \\addp.2d v0, v0, v0
        \\addp.2d d0, v0
        \\addv.8b b0, v0
        \\addv.16b b0, v0
        \\addv.4h h0, v0
        \\addv.8h h0, v0
        \\addv.4s s0, v0
        \\dup.2d v0, x3
        \\dup.4s v0, w3
        \\dup.2s v0, w3
        \\dup.8h v0, w3
        \\dup.4h v0, w3
        \\dup.16b v0, w3
        \\dup.8b v0, w3
        \\dup.2d v0, v3[1]
        \\dup.2s v0, v3[1]
        \\dup.4s v0, v3[1]
        \\dup.4h v0, v3[1]
        \\dup.8h v0, v3[1]
        \\dup.8b v0, v3[1]
        \\dup.16b v0, v3[1]
        \\smov.s x3, v2[2]
        \\smov.s x3, v2[2]
        \\mov.s w3, v2[2]
        \\mov.s w3, v2[2]
        \\mov.d x3, v2[1]
        \\mov.d x3, v2[1]
        \\mov.d v2[1], x5
        \\mov.s v2[1], w5
        \\mov.h v2[1], w5
        \\mov.b v2[1], w5
        \\mov.d v2[1], x5
        \\mov.s v2[1], w5
        \\mov.h v2[1], w5
        \\mov.b v2[1], w5
        \\mov.d v2[1], v15[1]
        \\mov.s v2[1], v15[1]
        \\mov.h v2[1], v15[1]
        \\mov.b v2[1], v15[1]
        \\mov.d v2[1], v15[0]
        \\mov.s v2[3], v15[2]
        \\mov.h v2[7], v15[3]
        \\mov.b v2[10], v15[5]
        \\dup.2d v0, x3
        \\dup.4s v0, w3
        \\dup.2s v0, w3
        \\dup.8h v0, w3
        \\dup.4h v0, w3
        \\dup.16b v0, w3
        \\dup.8b v0, w3
        \\mov.d v2[1], v15[1]
        \\mov.s v2[1], v15[1]
        \\mov.h v2[1], v15[1]
        \\mov.b v2[1], v15[1]
        \\mov.d v2[1], v15[0]
        \\mov.s v2[3], v15[2]
        \\mov.h v2[7], v15[3]
        \\mov.b v2[10], v15[5]
        \\and.8b v0, v0, v0
        \\and.16b v0, v0, v0
        \\bic.8b v0, v0, v0
        \\cmeq.8b v0, v0, v0
        \\cmge.8b v0, v0, v0
        \\cmgt.8b v0, v0, v0
        \\cmhi.8b v0, v0, v0
        \\cmhs.8b v0, v0, v0
        \\cmtst.8b v0, v0, v0
        \\fabd.2s v0, v0, v0
        \\facge.2s v0, v0, v0
        \\facgt.2s v0, v0, v0
        \\faddp.2s v0, v0, v0
        \\fadd.2s v0, v0, v0
        \\fcmeq.2s v0, v0, v0
        \\fcmge.2s v0, v0, v0
        \\fcmgt.2s v0, v0, v0
        \\fdiv.2s v0, v0, v0
        \\fmaxnmp.2s v0, v0, v0
        \\fmaxnm.2s v0, v0, v0
        \\fmaxp.2s v0, v0, v0
        \\fmax.2s v0, v0, v0
        \\fminnmp.2s v0, v0, v0
        \\fminnm.2s v0, v0, v0
        \\fminp.2s v0, v0, v0
        \\fmin.2s v0, v0, v0
        \\fmla.2s v0, v0, v0
        \\fmls.2s v0, v0, v0
        \\fmulx.2s v0, v0, v0
        \\fmul.2s v0, v0, v0
        \\frecps.2s v0, v0, v0
        \\frsqrts.2s v0, v0, v0
        \\fsub.2s v0, v0, v0
        \\mla.8b v0, v0, v0
        \\mls.8b v0, v0, v0
        \\mul.8b v0, v0, v0
        \\pmul.8b v0, v0, v0
        \\saba.8b v0, v0, v0
        \\sabd.8b v0, v0, v0
        \\shadd.8b v0, v0, v0
        \\shsub.8b v0, v0, v0
        \\smaxp.8b v0, v0, v0
        \\smax.8b v0, v0, v0
        \\sminp.8b v0, v0, v0
        \\smin.8b v0, v0, v0
        \\sqadd.8b v0, v0, v0
        \\sqdmulh.4h v0, v0, v0
        \\sqrdmulh.4h v0, v0, v0
        \\sqrshl.8b v0, v0, v0
        \\sqshl.8b v0, v0, v0
        \\sqsub.8b v0, v0, v0
        \\srhadd.8b v0, v0, v0
        \\srshl.8b v0, v0, v0
        \\sshl.8b v0, v0, v0
        \\sub.8b v0, v0, v0
        \\uaba.8b v0, v0, v0
        \\uabd.8b v0, v0, v0
        \\uhadd.8b v0, v0, v0
        \\uhsub.8b v0, v0, v0
        \\umaxp.8b v0, v0, v0
        \\umax.8b v0, v0, v0
        \\uminp.8b v0, v0, v0
        \\umin.8b v0, v0, v0
        \\uqadd.8b v0, v0, v0
        \\uqrshl.8b v0, v0, v0
        \\uqshl.8b v0, v0, v0
        \\uqsub.8b v0, v0, v0
        \\urhadd.8b v0, v0, v0
        \\urshl.8b v0, v0, v0
        \\ushl.8b v0, v0, v0
        \\bif.8b v0, v0, v0
        \\bit.8b v0, v0, v0
        \\bsl.8b v0, v0, v0
        \\eor.8b v0, v0, v0
        \\orn.8b v0, v0, v0
        \\orr.8b v0, v0, v1
        \\sadalp.4h v0, v0
        \\sadalp.8h v0, v0
        \\sadalp.2s v0, v0
        \\sadalp.4s v0, v0
        \\sadalp.1d v0, v0
        \\sadalp.2d v0, v0
        \\cls.8b v0, v0
        \\clz.8b v0, v0
        \\cnt.8b v0, v0
        \\fabs.2s v0, v0
        \\fcvtas.2s v0, v0
        \\fcvtau.2s v0, v0
        \\fcvtms.2s v0, v0
        \\fcvtmu.2s v0, v0
        \\fcvtns.2s v0, v0
        \\fcvtnu.2s v0, v0
        \\fcvtps.2s v0, v0
        \\fcvtpu.2s v0, v0
        \\fcvtzs.2s v0, v0
        \\fcvtzu.2s v0, v0
        \\fneg.2s v0, v0
        \\frecpe.2s v0, v0
        \\frsqrte.2s v0, v0
        \\fsqrt.2s v0, v0
        \\neg.8b v0, v0
        \\mvn.8b v0, v0
        \\rbit.8b v0, v0
        \\rev16.8b v0, v0
        \\rev32.8b v0, v0
        \\rev64.8b v0, v0
        \\sadalp.4h v0, v0
        \\saddlp.4h v0, v0
        \\scvtf.2s v0, v0
        \\shll.8h v0, v0, #8
        \\sqabs.8b v0, v0
        \\sqneg.8b v0, v0
        \\sqxtn.8b v0, v0
        \\sqxtun.8b v0, v0
        \\suqadd.8b v0, v0
        \\uadalp.4h v0, v0
        \\uaddlp.4h v0, v0
        \\ucvtf.2s v0, v0
        \\uqxtn.8b v0, v0
        \\urecpe.2s v0, v0
        \\ursqrte.2s v0, v0
        \\usqadd.8b v0, v0
        \\xtn.8b v0, v0
        \\cls.8b v0, v0
        \\clz.8b v0, v0
        \\cnt.8b v0, v0
        \\fabs.2s v0, v0
        \\fcvtas.2s v0, v0
        \\fcvtau.2s v0, v0
        \\fcvtms.2s v0, v0
        \\fcvtmu.2s v0, v0
        \\fcvtns.2s v0, v0
        \\fcvtnu.2s v0, v0
        \\fcvtps.2s v0, v0
        \\fcvtpu.2s v0, v0
        \\fcvtzs.2s v0, v0
        \\fcvtzu.2s v0, v0
        \\fneg.2s v0, v0
        \\frecpe.2s v0, v0
        \\frsqrte.2s v0, v0
        \\fsqrt.2s v0, v0
        \\neg.8b v0, v0
        \\mvn.8b v0, v0
        \\rbit.8b v0, v0
        \\rev16.8b v0, v0
        \\rev32.8b v0, v0
        \\rev64.8b v0, v0
        \\sadalp.4h v0, v0
        \\saddlp.4h v0, v0
        \\scvtf.2s v0, v0
        \\shll.8h v0, v0, #8
        \\sqabs.8b v0, v0
        \\sqneg.8b v0, v0
        \\sqxtn.8b v0, v0
        \\sqxtun.8b v0, v0
        \\suqadd.8b v0, v0
        \\uadalp.4h v0, v0
        \\uaddlp.4h v0, v0
        \\ucvtf.2s v0, v0
        \\uqxtn.8b v0, v0
        \\urecpe.2s v0, v0
        \\ursqrte.2s v0, v0
        \\usqadd.8b v0, v0
        \\xtn.8b v0, v0
        \\cmeq.8b v0, v0, #0
        \\cmeq.16b v0, v0, #0
        \\cmeq.4h v0, v0, #0
        \\cmeq.8h v0, v0, #0
        \\cmeq.2s v0, v0, #0
        \\cmeq.4s v0, v0, #0
        \\cmeq.2d v0, v0, #0
        \\cmge.8b v0, v0, #0
        \\cmgt.8b v0, v0, #0
        \\cmle.8b v0, v0, #0
        \\cmlt.8b v0, v0, #0
        \\fcmeq.2s v0, v0, #0
        \\fcmge.2s v0, v0, #0
        \\fcmgt.2s v0, v0, #0
        \\fcmle.2s v0, v0, #0
        \\fcmlt.2s v0, v0, #0
        \\fcvtl v0.4s, v0.4h
        \\fcvtl2 v0.4s, v0.8h
        \\fcvtl v0.2d, v0.2s
        \\fcvtl2 v0.2d, v0.4s
        \\fcvtn v0.4h, v0.4s
        \\fcvtn2 v0.8h, v0.4s
        \\fcvtn v0.2s, v0.2d
        \\fcvtn2 v0.4s, v0.2d
        \\fcvtxn v0.2s, v0.2d
        \\fcvtxn2 v0.4s, v0.2d
        \\bic.2s v0, #1
        \\bic.2s v0, #1, lsl #8
        \\bic.2s v0, #1, lsl #16
        \\bic.2s v0, #1, lsl #24
        \\bic.4h v0, #1
        \\bic.4h v0, #1
        \\bic.4h v0, #1, lsl #8
        \\bic.4s v0, #1
        \\bic.4s v0, #1, lsl #8
        \\bic.4s v0, #1, lsl #16
        \\bic.4s v0, #1, lsl #24
        \\bic.8h v0, #1
        \\bic.8h v0, #1, lsl #8
        \\fmov.2d v0, #0.12500000
        \\fmov.2s v0, #0.12500000
        \\fmov.4s v0, #0.12500000
        \\orr.2s v0, #1
        \\orr.2s v0, #1, lsl #8
        \\orr.2s v0, #1, lsl #16
        \\orr.2s v0, #1, lsl #24
        \\orr.4h v0, #1
        \\orr.4h v0, #1, lsl #8
        \\orr.4s v0, #1
        \\orr.4s v0, #1, lsl #8
        \\orr.4s v0, #1, lsl #16
        \\orr.4s v0, #1, lsl #24
        \\orr.8h v0, #1
        \\orr.8h v0, #1, lsl #8
        \\ld1.8b { v1 }, [x1]
        \\ld1.16b { v2, v3 }, [x2]
        \\ld1.4h { v4, v5, v6 }, [x3]
        \\ld1.8h { v7, v8, v9, v10 }, [x4]
        \\ld1.2s { v12, v13 }, [x0]
        \\ld1.4s { v10, v11, v12 }, [x0]
        \\ld1.1d { v13, v14 }, [x1]
        \\ld1.2d { v15 }, [x2]
        \\ld1.b { v0 }[0], [sp]
        \\ld1.8b { v1 }, [x2], #8
        \\ld1.8b { v1, v2 }, [x2], #16
        \\ld1.8b { v1, v2, v3 }, [x2], #24
        \\ld1.8b { v1, v2, v3, v4 }, [x2], #32
        \\ld1.16b { v2 }, [x2], #16
        \\ld1.16b { v2, v3 }, [x2], #32
        \\ld1.16b { v2, v3, v4 }, [x2], #48
        \\ld1.16b { v2, v3, v4, v5 }, [x2], #64
        \\ld1.4h { v4 }, [x3], #8
        \\ld1.4h { v4, v5 }, [x3], #16
        \\ld1.4h { v4, v5, v6 }, [x3], #24
        \\ld1.4h { v4, v5, v6, v7 }, [x3], #32
        \\ld1.8h { v7 }, [x4], #16
        \\ld1.8h { v7, v8 }, [x4], #32
        \\ld1.8h { v7, v8, v9 }, [x4], #48
        \\ld1.8h { v7, v8, v9, v10 }, [x4], #64
        \\ld1.2s { v12 }, [x0], #8
        \\ld1.2s { v12, v13 }, [x0], #16
        \\ld1.2s { v12, v13, v14 }, [x0], #24
        \\ld1.2s { v12, v13, v14, v15 }, [x0], #32
        \\ld1.4s { v10 }, [x0], #16
        \\ld1.4s { v10, v11 }, [x0], #32
        \\ld1.4s { v10, v11, v12 }, [x0], #48
        \\ld1.4s { v10, v11, v12, v13 }, [x0], #64
        \\ld1.1d { v13 }, [x1], #8
        \\ld1.1d { v13, v14 }, [x1], #16
        \\ld1.1d { v13, v14, v15 }, [x1], #24
        \\ld1.1d { v13, v14, v15, v16 }, [x1], #32
        \\ld1.2d { v15 }, [x2], #16
        \\ld1.2d { v15, v16 }, [x2], #32
        \\ld1.2d { v15, v16, v17 }, [x2], #48
        \\ld1.2d { v15, v16, v17, v18 }, [x2], #64
        \\st1.8b { v1 }, [x1]
        \\st1.16b { v2, v3 }, [x2]
        \\st1.4h { v4, v5, v6 }, [x3]
        \\st1.8h { v7, v8, v9, v10 }, [x4]
        \\st1.2s { v12, v13 }, [x0]
        \\st1.4s { v10, v11, v12 }, [x0]
        \\st1.1d { v13, v14 }, [x1]
        \\st1.2d { v15 }, [x2]
        \\ld1.b { v1 }[2], [x3]
        \\ld1.d { v2 }[1], [x4]
        \\ld1.h { v3 }[3], [x5]
        \\ld1.s { v4 }[2], [x6]
        \\ld1.b { v1 }[2], [x3], #1
        \\ld1.d { v2 }[1], [x4], #8
        \\ld1.h { v3 }[3], [x5], #2
        \\ld1.s { v4 }[2], [x6], #4
        \\st1.b { v1 }[2], [x3]
        \\st1.d { v2 }[1], [x4]
        \\st1.h { v3 }[3], [x5]
        \\st1.s { v4 }[2], [x6]
        \\st1.b { v1 }[2], [x3], #1
        \\st1.d { v2 }[1], [x4], #8
        \\st1.h { v3 }[3], [x5], #2
        \\st1.s { v4 }[2], [x6], #4
        \\ld1.b { v1 }[2], [x3], x4
        \\ld1.d { v2 }[1], [x4], x5
        \\ld1.h { v3 }[3], [x5], x6
        \\ld1.s { v4 }[2], [x6], x7
        \\st1.b { v1 }[2], [x3], x4
        \\st1.d { v2 }[1], [x4], x5
        \\st1.h { v3 }[3], [x5], x6
        \\st1.s { v4 }[2], [x6], x7
        \\ld1.8b { v1 }, [x2], x3
        \\ld1.16b { v2, v3 }, [x2], x4
        \\ld1.4h { v4, v5, v6 }, [x3], x5
        \\ld1.8h { v7, v8, v9, v10 }, [x4], x6
        \\ld1.2s { v12, v13 }, [x0], x7
        \\ld1.4s { v10, v11, v12 }, [x0], x8
        \\ld1.1d { v13, v14 }, [x1], x9
        \\ld1.2d { v15 }, [x2], x10
        \\st1.8b { v1 }, [x2], x3
        \\st1.16b { v2, v3 }, [x2], x4
        \\st1.4h { v4, v5, v6 }, [x3], x5
        \\st1.8h { v7, v8, v9, v10 }, [x4], x6
        \\st1.2s { v12, v13 }, [x0], x7
        \\st1.4s { v10, v11, v12 }, [x0], x8
        \\st1.1d { v13, v14 }, [x1], x9
        \\st1.2d { v15 }, [x2], x10
        \\st1.8b { v1 }, [x2], #8
        \\st1.8b { v1, v2 }, [x2], #16
        \\st1.8b { v1, v2, v3 }, [x2], #24
        \\st1.8b { v1, v2, v3, v4 }, [x2], #32
        \\st1.16b { v2 }, [x2], #16
        \\st1.16b { v2, v3 }, [x2], #32
        \\st1.16b { v2, v3, v4 }, [x2], #48
        \\st1.16b { v2, v3, v4, v5 }, [x2], #64
        \\st1.4h { v4 }, [x3], #8
        \\st1.4h { v4, v5 }, [x3], #16
        \\st1.4h { v4, v5, v6 }, [x3], #24
        \\st1.4h { v4, v5, v6, v7 }, [x3], #32
        \\st1.8h { v7 }, [x4], #16
        \\st1.8h { v7, v8 }, [x4], #32
        \\st1.8h { v7, v8, v9 }, [x4], #48
        \\st1.8h { v7, v8, v9, v10 }, [x4], #64
        \\st1.2s { v12 }, [x0], #8
        \\st1.2s { v12, v13 }, [x0], #16
        \\st1.2s { v12, v13, v14 }, [x0], #24
        \\st1.2s { v12, v13, v14, v15 }, [x0], #32
        \\st1.4s { v10 }, [x0], #16
        \\st1.4s { v10, v11 }, [x0], #32
        \\st1.4s { v10, v11, v12 }, [x0], #48
        \\st1.4s { v10, v11, v12, v13 }, [x0], #64
        \\st1.1d { v13 }, [x1], #8
        \\st1.1d { v13, v14 }, [x1], #16
        \\st1.1d { v13, v14, v15 }, [x1], #24
        \\st1.1d { v13, v14, v15, v16 }, [x1], #32
        \\st1.2d { v15 }, [x2], #16
        \\st1.2d { v15, v16 }, [x2], #32
        \\st1.2d { v15, v16, v17 }, [x2], #48
        \\st1.2d { v15, v16, v17, v18 }, [x2], #64
        \\ld1r.8b { v1 }, [x1]
        \\ld1r.8b { v1 }, [x1], x2
        \\ld1r.4h { v4 }, [x3]
        \\ld1r.4h { v4 }, [x3], x5
        \\ld1r.2s { v9 }, [x5]
        \\ld1r.2s { v9 }, [x5], x6
        \\ld1r.1d { v12 }, [x7]
        \\ld1r.1d { v12 }, [x7], x8
        \\ld1r.8b { v1 }, [x1], #1
        \\ld1r.4h { v1 }, [x1], #2
        \\ld1r.2s { v1 }, [x1], #4
        \\ld1r.1d { v1 }, [x1], #8
        \\ld2.16b { v5, v6 }, [x2]
        \\ld2.2s { v10, v11 }, [x0]
        \\st2.16b { v5, v6 }, [x2]
        \\st2.2s { v10, v11 }, [x0]
        \\st2.b { v1, v2 }[2], [x3]
        \\st2.d { v2, v3 }[1], [x4]
        \\st2.h { v3, v4 }[2], [x6]
        \\st2.s { v4, v5 }[3], [x7]
        \\st2.b { v1, v2 }[2], [x3], #2
        \\st2.d { v2, v3 }[1], [x4], #16
        \\st2.h { v3, v4 }[3], [x5], #4
        \\st2.s { v4, v5 }[2], [x6], #8
        \\ld2.b { v1, v2 }[2], [x3]
        \\ld2.d { v2, v3 }[1], [x4]
        \\ld2.h { v3, v4 }[2], [x6]
        \\ld2.s { v4, v5 }[3], [x7]
        \\ld2.b { v1, v2 }[2], [x3], #2
        \\ld2.d { v2, v3 }[1], [x4], #16
        \\ld2.h { v3, v4 }[3], [x5], #4
        \\ld2.s { v4, v5 }[2], [x6], #8
        \\ld2.b { v1, v2 }[2], [x3], x4
        \\ld2.d { v2, v3 }[1], [x4], x6
        \\ld2.h { v3, v4 }[3], [x5], x8
        \\ld2.s { v4, v5 }[2], [x6], x10
        \\st2.b { v1, v2 }[2], [x3], x4
        \\st2.d { v2, v3 }[1], [x4], x6
        \\st2.h { v3, v4 }[3], [x5], x8
        \\st2.s { v4, v5 }[2], [x6], x10
        \\ld2.4h { v4, v5 }, [x3], x5
        \\ld2.2s { v12, v13 }, [x0], x7
        \\ld2.8b { v0, v1 }, [x0], #16
        \\ld2.16b { v0, v1 }, [x0], #32
        \\ld2.4h { v0, v1 }, [x0], #16
        \\ld2.8h { v0, v1 }, [x0], #32
        \\ld2.2s { v0, v1 }, [x0], #16
        \\ld2.4s { v0, v1 }, [x0], #32
        \\ld2.2d { v0, v1 }, [x0], #32
        \\st2.4h { v4, v5 }, [x3], x5
        \\st2.2s { v12, v13 }, [x0], x7
        \\st2.8b { v0, v1 }, [x0], #16
        \\st2.16b { v0, v1 }, [x0], #32
        \\st2.4h { v0, v1 }, [x0], #16
        \\st2.8h { v0, v1 }, [x0], #32
        \\st2.2s { v0, v1 }, [x0], #16
        \\st2.4s { v0, v1 }, [x0], #32
        \\st2.2d { v0, v1 }, [x0], #32
        \\ld2r.8b { v1, v2 }, [x1]
        \\ld2r.8b { v1, v2 }, [x1], x2
        \\ld2r.16b { v1, v2 }, [x1]
        \\ld2r.16b { v1, v2 }, [x1], x2
        \\ld2r.4h { v1, v2 }, [x1]
        \\ld2r.4h { v1, v2 }, [x1], x2
        \\ld2r.8h { v1, v2 }, [x1]
        \\ld2r.8h { v1, v2 }, [x1], x2
        \\ld2r.2s { v1, v2 }, [x1]
        \\ld2r.2s { v1, v2 }, [x1], x2
        \\ld2r.2d { v1, v2 }, [x1]
        \\ld2r.2d { v1, v2 }, [x1], x2
        \\ld2r.1d { v1, v2 }, [x1]
        \\ld2r.1d { v1, v2 }, [x1], x2
        \\ld2r.8b { v1, v2 }, [x1], #2
        \\ld2r.16b { v1, v2 }, [x1], #2
        \\ld2r.4h { v1, v2 }, [x1], #4
        \\ld2r.8h { v1, v2 }, [x1], #4
        \\ld2r.2s { v1, v2 }, [x1], #8
        \\ld2r.2d { v1, v2 }, [x1], #16
        \\ld2r.1d { v1, v2 }, [x1], #16
        \\ld3.8b { v1, v2, v3 }, [x1]
        \\ld3.16b { v5, v6, v7 }, [x2]
        \\ld3.2s { v10, v11, v12 }, [x0]
        \\st3.8b { v1, v2, v3 }, [x1]
        \\st3.16b { v5, v6, v7 }, [x2]
        \\st3.2s { v10, v11, v12 }, [x0]
        \\ld3.b { v1, v2, v3 }[2], [x3], x4
        \\ld3.d { v2, v3, v4 }[1], [x4], x5
        \\ld3.h { v3, v4, v5 }[3], [x5], x6
        \\ld3.s { v4, v5, v6 }[2], [x6], x7
        \\st3.b { v1, v2, v3 }[2], [x3], x4
        \\st3.d { v2, v3, v4 }[1], [x4], x5
        \\st3.h { v3, v4, v5 }[3], [x5], x6
        \\st3.s { v4, v5, v6 }[2], [x6], x7
        \\st3.b { v1, v2, v3 }[2], [x3], #3
        \\st3.d { v2, v3, v4 }[1], [x4], #24
        \\st3.h { v3, v4, v5 }[3], [x5], #6
        \\st3.s { v4, v5, v6 }[2], [x6], #12
        \\ld3.8b { v1, v2, v3 }, [x2], x3
        \\ld3.16b { v2, v3, v4 }, [x2], x4
        \\ld3.4h { v4, v5, v6 }, [x3], x5
        \\ld3.8h { v7, v8, v9 }, [x4], x6
        \\ld3.2s { v12, v13, v14 }, [x0], x7
        \\ld3.4s { v10, v11, v12 }, [x0], x8
        \\ld3.2d { v15, v16, v17 }, [x2], x10
        \\ld3.8b { v0, v1, v2 }, [x0], #24
        \\ld3.16b { v0, v1, v2 }, [x0], #48
        \\ld3.4h { v0, v1, v2 }, [x0], #24
        \\ld3.8h { v0, v1, v2 }, [x0], #48
        \\ld3.2s { v0, v1, v2 }, [x0], #24
        \\ld3.4s { v0, v1, v2 }, [x0], #48
        \\ld3.2d { v0, v1, v2 }, [x0], #48
        \\st3.8b { v1, v2, v3 }, [x2], x3
        \\st3.16b { v2, v3, v4 }, [x2], x4
        \\st3.4h { v4, v5, v6 }, [x3], x5
        \\st3.8h { v7, v8, v9 }, [x4], x6
        \\st3.2s { v12, v13, v14 }, [x0], x7
        \\st3.4s { v10, v11, v12 }, [x0], x8
        \\st3.2d { v15, v16, v17 }, [x2], x10
        \\st3.8b { v0, v1, v2 }, [x0], #24
        \\st3.16b { v0, v1, v2 }, [x0], #48
        \\st3.4h { v0, v1, v2 }, [x0], #24
        \\st3.8h { v0, v1, v2 }, [x0], #48
        \\st3.2s { v0, v1, v2 }, [x0], #24
        \\st3.4s { v0, v1, v2 }, [x0], #48
        \\st3.2d { v0, v1, v2 }, [x0], #48
        \\ld3.b { v1, v2, v3 }[2], [x3]
        \\ld3.d { v2, v3, v4 }[1], [x4]
        \\ld3.h { v3, v4, v5 }[2], [x6]
        \\ld3.s { v4, v5, v6 }[3], [x7]
        \\ld3.b { v1, v2, v3 }[2], [x3], #3
        \\ld3.d { v2, v3, v4 }[1], [x4], #24
        \\ld3.h { v3, v4, v5 }[3], [x5], #6
        \\ld3.s { v4, v5, v6 }[2], [x6], #12
        \\st3.b { v1, v2, v3 }[2], [x3]
        \\st3.d { v2, v3, v4 }[1], [x4]
        \\st3.h { v3, v4, v5 }[2], [x6]
        \\st3.s { v4, v5, v6 }[3], [x7]
        \\ld3r.8b { v1, v2, v3 }, [x1]
        \\ld3r.8b { v1, v2, v3 }, [x1], x2
        \\ld3r.16b { v1, v2, v3 }, [x1]
        \\ld3r.16b { v1, v2, v3 }, [x1], x2
        \\ld3r.4h { v1, v2, v3 }, [x1]
        \\ld3r.4h { v1, v2, v3 }, [x1], x2
        \\ld3r.8h { v1, v2, v3 }, [x1]
        \\ld3r.8h { v1, v2, v3 }, [x1], x2
        \\ld3r.2s { v1, v2, v3 }, [x1]
        \\ld3r.2s { v1, v2, v3 }, [x1], x2
        \\ld3r.2d { v1, v2, v3 }, [x1]
        \\ld3r.2d { v1, v2, v3 }, [x1], x2
        \\ld3r.1d { v1, v2, v3 }, [x1]
        \\ld3r.1d { v1, v2, v3 }, [x1], x2
        \\ld3r.8b { v1, v2, v3 }, [x1], #3
        \\ld3r.16b { v1, v2, v3 }, [x1], #3
        \\ld3r.4h { v1, v2, v3 }, [x1], #6
        \\ld3r.8h { v1, v2, v3 }, [x1], #6
        \\ld3r.2s { v1, v2, v3 }, [x1], #12
        \\ld3r.2d { v1, v2, v3 }, [x1], #24
        \\ld3r.1d { v1, v2, v3 }, [x1], #24
        \\ld4.8b { v1, v2, v3, v4 }, [x1]
        \\ld4.16b { v5, v6, v7, v8 }, [x2]
        \\ld4.2s { v10, v11, v12, v13 }, [x0]
        \\st4.8b { v1, v2, v3, v4 }, [x1]
        \\st4.16b { v5, v6, v7, v8 }, [x2]
        \\st4.2s { v10, v11, v12, v13 }, [x0]
        \\ld4.b { v1, v2, v3, v4 }[2], [x3], x4
        \\ld4.d { v2, v3, v4, v5 }[1], [x4], x5
        \\ld4.h { v3, v4, v5, v6 }[3], [x5], x6
        \\ld4.s { v4, v5, v6, v7 }[2], [x6], x7
        \\ld4.b { v1, v2, v3, v4 }[2], [x3], #4
        \\ld4.d { v2, v3, v4, v5 }[1], [x4], #32
        \\ld4.h { v3, v4, v5, v6 }[3], [x5], #8
        \\ld4.s { v4, v5, v6, v7 }[2], [x6], #16
        \\st4.b { v1, v2, v3, v4 }[2], [x3], x4
        \\st4.d { v2, v3, v4, v5 }[1], [x4], x5
        \\st4.h { v3, v4, v5, v6 }[3], [x5], x6
        \\st4.s { v4, v5, v6, v7 }[2], [x6], x7
        \\st4.b { v1, v2, v3, v4 }[2], [x3], #4
        \\st4.d { v2, v3, v4, v5 }[1], [x4], #32
        \\st4.h { v3, v4, v5, v6 }[3], [x5], #8
        \\st4.s { v4, v5, v6, v7 }[2], [x6], #16
        \\ld4.8b { v1, v2, v3, v4 }, [x2], x3
        \\ld4.16b { v2, v3, v4, v5 }, [x2], x4
        \\ld4.4h { v4, v5, v6, v7 }, [x3], x5
        \\ld4.8h { v7, v8, v9, v10 }, [x4], x6
        \\ld4.2s { v12, v13, v14, v15 }, [x0], x7
        \\ld4.4s { v10, v11, v12, v13 }, [x0], x8
        \\ld4.2d { v15, v16, v17, v18 }, [x2], x10
        \\ld4.8b { v0, v1, v2, v3 }, [x0], #32
        \\ld4.16b { v0, v1, v2, v3 }, [x0], #64
        \\ld4.4h { v0, v1, v2, v3 }, [x0], #32
        \\ld4.8h { v0, v1, v2, v3 }, [x0], #64
        \\ld4.2s { v0, v1, v2, v3 }, [x0], #32
        \\ld4.4s { v0, v1, v2, v3 }, [x0], #64
        \\ld4.2d { v0, v1, v2, v3 }, [x0], #64
        \\st4.8b { v0, v1, v2, v3 }, [x0], #32
        \\st4.16b { v0, v1, v2, v3 }, [x0], #64
        \\st4.4h { v0, v1, v2, v3 }, [x0], #32
        \\st4.8h { v0, v1, v2, v3 }, [x0], #64
        \\st4.2s { v0, v1, v2, v3 }, [x0], #32
        \\st4.4s { v0, v1, v2, v3 }, [x0], #64
        \\st4.2d { v0, v1, v2, v3 }, [x0], #64
        \\st4.8b { v1, v2, v3, v4 }, [x2], x3
        \\st4.16b { v2, v3, v4, v5 }, [x2], x4
        \\st4.4h { v4, v5, v6, v7 }, [x3], x5
        \\st4.8h { v7, v8, v9, v10 }, [x4], x6
        \\st4.2s { v12, v13, v14, v15 }, [x0], x7
        \\st4.4s { v10, v11, v12, v13 }, [x0], x8
        \\st4.2d { v15, v16, v17, v18 }, [x2], x10
        \\ld4.b { v1, v2, v3, v4 }[2], [x3]
        \\ld4.d { v2, v3, v4, v5 }[1], [x4]
        \\ld4.h { v3, v4, v5, v6 }[2], [x6]
        \\ld4.s { v4, v5, v6, v7 }[3], [x7]
        \\st4.b { v1, v2, v3, v4 }[2], [x3]
        \\st4.d { v2, v3, v4, v5 }[1], [x4]
        \\st4.h { v3, v4, v5, v6 }[2], [x6]
        \\st4.s { v4, v5, v6, v7 }[3], [x7]
        \\ld4r.8b { v1, v2, v3, v4 }, [x1]
        \\ld4r.8b { v1, v2, v3, v4 }, [x1], x2
        \\ld4r.16b { v1, v2, v3, v4 }, [x1]
        \\ld4r.16b { v1, v2, v3, v4 }, [x1], x2
        \\ld4r.4h { v1, v2, v3, v4 }, [x1]
        \\ld4r.4h { v1, v2, v3, v4 }, [x1], x2
        \\ld4r.8h { v1, v2, v3, v4 }, [x1]
        \\ld4r.8h { v1, v2, v3, v4 }, [x1], x2
        \\ld4r.2s { v1, v2, v3, v4 }, [x1]
        \\ld4r.2s { v1, v2, v3, v4 }, [x1], x2
        \\ld4r.2d { v1, v2, v3, v4 }, [x1]
        \\ld4r.2d { v1, v2, v3, v4 }, [x1], x2
        \\ld4r.1d { v1, v2, v3, v4 }, [x1]
        \\ld4r.1d { v1, v2, v3, v4 }, [x1], x2
        \\ld4r.8b { v1, v2, v3, v4 }, [x1], #4
        \\ld4r.16b { v1, v2, v3, v4 }, [x1], #4
        \\ld4r.4h { v1, v2, v3, v4 }, [x1], #8
        \\ld4r.8h { v1, v2, v3, v4 }, [x1], #8
        \\ld4r.2s { v1, v2, v3, v4 }, [x1], #16
        \\ld4r.2d { v1, v2, v3, v4 }, [x1], #32
        \\ld4r.1d { v1, v2, v3, v4 }, [x1], #32
        // \\movi d0, #0x000000000000ff
        // \\movi.2d v0, #0x000000000000ff
        // \\movi.8b v0, #0x1
        // \\movi.16b v0, #0x1
        // \\movi.2s v0, #0x1
        // \\movi.2s v0, #0x1, lsl #8
        // \\movi.2s v0, #0x1, lsl #16
        // \\movi.2s v0, #0x1, lsl #24
        // \\movi.4s v0, #0x1
        // \\movi.4s v0, #0x1, lsl #8
        // \\movi.4s v0, #0x1, lsl #16
        // \\movi.4s v0, #0x1, lsl #24
        // \\movi.4h v0, #0x1
        // \\movi.4h v0, #0x1, lsl #8
        // \\movi.8h v0, #0x1
        // \\movi.8h v0, #0x1, lsl #8
        // \\mvni.2s v0, #0x1
        // \\mvni.2s v0, #0x1, lsl #8
        // \\mvni.2s v0, #0x1, lsl #16
        // \\mvni.2s v0, #0x1, lsl #24
        // \\mvni.4s v0, #0x1
        // \\mvni.4s v0, #0x1, lsl #8
        // \\mvni.4s v0, #0x1, lsl #16
        // \\mvni.4s v0, #0x1, lsl #24
        // \\mvni.4h v0, #0x1
        // \\mvni.4h v0, #0x1, lsl #8
        // \\mvni.8h v0, #0x1
        // \\mvni.8h v0, #0x1, lsl #8
        // \\mvni.2s v0, #0x1, msl #8
        // \\mvni.2s v0, #0x1, msl #16
        // \\mvni.4s v0, #0x1, msl #8
        // \\mvni.4s v0, #0x1, msl #16
        // \\frinta.2s v0, v0
        // \\frintx.2s v0, v0
        // \\frinti.2s v0, v0
        // \\frintm.2s v0, v0
        // \\frintn.2s v0, v0
        // \\frintp.2s v0, v0
        // \\frintz.2s v0, v0
        // \\fmla.s s0, s0, v0[3]
        // \\fmla.d d0, d0, v0[1]
        // \\fmls.s s0, s0, v0[3]
        // \\fmls.d d0, d0, v0[1]
        // \\fmulx.s s0, s0, v0[3]
        // \\fmulx.d d0, d0, v0[1]
        // \\fmul.s s0, s0, v0[3]
        // \\fmul.d d0, d0, v0[1]
        // \\sqdmlal.h s0, h0, v0[7]
        // \\sqdmlal.s d0, s0, v0[3]
        // \\sqdmlsl.h s0, h0, v0[7]
        // \\sqdmulh.h h0, h0, v0[7]
        // \\sqdmulh.s s0, s0, v0[3]
        // \\sqdmull.h s0, h0, v0[7]
        // \\sqdmull.s d0, s0, v0[3]
        // \\sqrdmulh.h h0, h0, v0[7]
        // \\sqrdmulh.s s0, s0, v0[3]
        // \\fmla.2s v0, v0, v0[0]
        // \\fmla.4s v0, v0, v0[1]
        // \\fmla.2d v0, v0, v0[1]
        // \\fmls.2s v0, v0, v0[0]
        // \\fmls.4s v0, v0, v0[1]
        // \\fmls.2d v0, v0, v0[1]
        // \\fmulx.2s v0, v0, v0[0]
        // \\fmulx.4s v0, v0, v0[1]
        // \\fmulx.2d v0, v0, v0[1]
        // \\fmul.2s v0, v0, v0[0]
        // \\fmul.4s v0, v0, v0[1]
        // \\fmul.2d v0, v0, v0[1]
        // \\mla.4h v0, v0, v0[0]
        // \\mla.8h v0, v0, v0[1]
        // \\mla.2s v0, v0, v0[2]
        // \\mla.4s v0, v0, v0[3]
        // \\mls.4h v0, v0, v0[0]
        // \\mls.8h v0, v0, v0[1]
        // \\mls.2s v0, v0, v0[2]
        // \\mls.4s v0, v0, v0[3]
        // \\mul.4h v0, v0, v0[0]
        // \\mul.8h v0, v0, v0[1]
        // \\mul.2s v0, v0, v0[2]
        // \\mul.4s v0, v0, v0[3]
        // \\smlal.4s v0, v0, v0[0]
        // \\smlal2.4s v0, v0, v0[1]
        // \\smlal.2d v0, v0, v0[2]
        // \\smlal2.2d v0, v0, v0[3]
        // \\smlsl.4s v0, v0, v0[0]
        // \\smlsl2.4s v0, v0, v0[1]
        // \\smlsl.2d v0, v0, v0[2]
        // \\smlsl2.2d v0, v0, v0[3]
        // \\smull.4s v0, v0, v0[0]
        // \\smull2.4s v0, v0, v0[1]
        // \\smull.2d v0, v0, v0[2]
        // \\smull2.2d v0, v0, v0[3]
        // \\sqdmlal.4s v0, v0, v0[0]
        // \\sqdmlal2.4s v0, v0, v0[1]
        // \\sqdmlal.2d v0, v0, v0[2]
        // \\sqdmlal2.2d v0, v0, v0[3]
        // \\sqdmlsl.4s v0, v0, v0[0]
        // \\sqdmlsl2.4s v0, v0, v0[1]
        // \\sqdmlsl.2d v0, v0, v0[2]
        // \\sqdmlsl2.2d v0, v0, v0[3]
        // \\sqdmulh.4h v0, v0, v0[0]
        // \\sqdmulh.8h v0, v0, v0[1]
        // \\sqdmulh.2s v0, v0, v0[2]
        // \\sqdmulh.4s v0, v0, v0[3]
        // \\sqdmull.4s v0, v0, v0[0]
        // \\sqdmull2.4s v0, v0, v0[1]
        // \\sqdmull.2d v0, v0, v0[2]
        // \\sqdmull2.2d v0, v0, v0[3]
        // \\sqrdmulh.4h v0, v0, v0[0]
        // \\sqrdmulh.8h v0, v0, v0[1]
        // \\sqrdmulh.2s v0, v0, v0[2]
        // \\sqrdmulh.4s v0, v0, v0[3]
        // \\umlal.4s v0, v0, v0[0]
        // \\umlal2.4s v0, v0, v0[1]
        // \\umlal.2d v0, v0, v0[2]
        // \\umlal2.2d v0, v0, v0[3]
        // \\umlsl.4s v0, v0, v0[0]
        // \\umlsl2.4s v0, v0, v0[1]
        // \\umlsl.2d v0, v0, v0[2]
        // \\umlsl2.2d v0, v0, v0[3]
        // \\umull.4s v0, v0, v0[0]
        // \\umull2.4s v0, v0, v0[1]
        // \\umull.2d v0, v0, v0[2]
        // \\umull2.2d v0, v0, v0[3]
        // \\shl d0, d0, #0x1
        // \\sli d0, d0, #0x1
        // \\sqrshrn b0, h0, #0x7
        // \\sqrshrn h0, s0, #0xe
        // \\sqrshrn s0, d0, #0x1d
        // \\sqrshrun b0, h0, #0x7
        // \\sqrshrun h0, s0, #0xe
        // \\sqrshrun s0, d0, #0x1d
        // \\sqshlu b0, b0, #0x1
        // \\sqshlu h0, h0, #0x2
        // \\sqshlu s0, s0, #0x3
        // \\sqshlu d0, d0, #0x4
        // \\sqshl b0, b0, #0x1
        // \\sqshl h0, h0, #0x2
        // \\sqshl s0, s0, #0x3
        // \\sqshl d0, d0, #0x4
        // \\sqshrn b0, h0, #0x7
        // \\sqshrn h0, s0, #0xe
        // \\sqshrn s0, d0, #0x1d
        // \\sqshrun b0, h0, #0x7
        // \\sqshrun h0, s0, #0xe
        // \\sqshrun s0, d0, #0x1d
        // \\sri d0, d0, #0x3f
        // \\srshr d0, d0, #0x3f
        // \\srsra d0, d0, #0x3f
        // \\sshr d0, d0, #0x3f
        // \\ucvtf s0, s0, #0x1f
        // \\ucvtf d0, d0, #0x3e
        // \\uqrshrn b0, h0, #0x7
        // \\uqrshrn h0, s0, #0xe
        // \\uqrshrn s0, d0, #0x1d
        // \\uqshl b0, b0, #0x1
        // \\uqshl h0, h0, #0x2
        // \\uqshl s0, s0, #0x3
        // \\uqshl d0, d0, #0x4
        // \\uqshrn b0, h0, #0x7
        // \\uqshrn h0, s0, #0xe
        // \\uqshrn s0, d0, #0x1d
        // \\urshr d0, d0, #0x3f
        // \\ursra d0, d0, #0x3f
        // \\ushr d0, d0, #0x3f
        // \\usra d0, d0, #0x3f
        // \\fcvtzs.2s v0, v0, #0x1f
        // \\fcvtzs.4s v0, v0, #0x1e
        // \\fcvtzs.2d v0, v0, #0x3d
        // \\fcvtzu.2s v0, v0, #0x1f
        // \\fcvtzu.4s v0, v0, #0x1e
        // \\fcvtzu.2d v0, v0, #0x3d
        // \\rshrn.8b v0, v0, #0x7
        // \\rshrn2.16b v0, v0, #0x6
        // \\rshrn.4h v0, v0, #0xd
        // \\rshrn2.8h v0, v0, #0xc
        // \\rshrn.2s v0, v0, #0x1b
        // \\rshrn2.4s v0, v0, #0x1a
        // \\scvtf.2s v0, v0, #0x1f
        // \\scvtf.4s v0, v0, #0x1e
        // \\scvtf.2d v0, v0, #0x3d
        // \\shl.8b v0, v0, #0x1
        // \\shl.16b v0, v0, #0x2
        // \\shl.4h v0, v0, #0x3
        // \\shl.8h v0, v0, #0x4
        // \\shl.2s v0, v0, #0x5
        // \\shl.4s v0, v0, #0x6
        // \\shl.2d v0, v0, #0x7
        // \\shrn.8b v0, v0, #0x7
        // \\shrn2.16b v0, v0, #0x6
        // \\shrn.4h v0, v0, #0xd
        // \\shrn2.8h v0, v0, #0xc
        // \\shrn.2s v0, v0, #0x1b
        // \\shrn2.4s v0, v0, #0x1a
        // \\sli.8b v0, v0, #0x1
        // \\sli.16b v0, v0, #0x2
        // \\sli.4h v0, v0, #0x3
        // \\sli.8h v0, v0, #0x4
        // \\sli.2s v0, v0, #0x5
        // \\sli.4s v0, v0, #0x6
        // \\sli.2d v0, v0, #0x7
        // \\sqrshrn.8b v0, v0, #0x7
        // \\sqrshrn2.16b v0, v0, #0x6
        // \\sqrshrn.4h v0, v0, #0xd
        // \\sqrshrn2.8h v0, v0, #0xc
        // \\sqrshrn.2s v0, v0, #0x1b
        // \\sqrshrn2.4s v0, v0, #0x1a
        // \\sqrshrun.8b v0, v0, #0x7
        // \\sqrshrun2.16b v0, v0, #0x6
        // \\sqrshrun.4h v0, v0, #0xd
        // \\sqrshrun2.8h v0, v0, #0xc
        // \\sqrshrun.2s v0, v0, #0x1b
        // \\sqrshrun2.4s v0, v0, #0x1a
        // \\sqshlu.8b v0, v0, #0x1
        // \\sqshlu.16b v0, v0, #0x2
        // \\sqshlu.4h v0, v0, #0x3
        // \\sqshlu.8h v0, v0, #0x4
        // \\sqshlu.2s v0, v0, #0x5
        // \\sqshlu.4s v0, v0, #0x6
        // \\sqshlu.2d v0, v0, #0x7
        // \\sqshl.8b v0, v0, #0x1
        // \\sqshl.16b v0, v0, #0x2
        // \\sqshl.4h v0, v0, #0x3
        // \\sqshl.8h v0, v0, #0x4
        // \\sqshl.2s v0, v0, #0x5
        // \\sqshl.4s v0, v0, #0x6
        // \\sqshl.2d v0, v0, #0x7
        // \\sqshrn.8b v0, v0, #0x7
        // \\sqshrn2.16b v0, v0, #0x6
        // \\sqshrn.4h v0, v0, #0xd
        // \\sqshrn2.8h v0, v0, #0xc
        // \\sqshrn.2s v0, v0, #0x1b
        // \\sqshrn2.4s v0, v0, #0x1a
        // \\sqshrun.8b v0, v0, #0x7
        // \\sqshrun2.16b v0, v0, #0x6
        // \\sqshrun.4h v0, v0, #0xd
        // \\sqshrun2.8h v0, v0, #0xc
        // \\sqshrun.2s v0, v0, #0x1b
        // \\sqshrun2.4s v0, v0, #0x1a
        // \\sri.8b v0, v0, #0x7
        // \\sri.16b v0, v0, #0x6
        // \\sri.4h v0, v0, #0xd
        // \\sri.8h v0, v0, #0xc
        // \\sri.2s v0, v0, #0x1b
        // \\sri.4s v0, v0, #0x1a
        // \\sri.2d v0, v0, #0x39
        // \\srshr.8b v0, v0, #0x7
        // \\srshr.16b v0, v0, #0x6
        // \\srshr.4h v0, v0, #0xd
        // \\srshr.8h v0, v0, #0xc
        // \\srshr.2s v0, v0, #0x1b
        // \\srshr.4s v0, v0, #0x1a
        // \\srshr.2d v0, v0, #0x39
        // \\srsra.8b v0, v0, #0x7
        // \\srsra.16b v0, v0, #0x6
        // \\srsra.4h v0, v0, #0xd
        // \\srsra.8h v0, v0, #0xc
        // \\srsra.2s v0, v0, #0x1b
        // \\srsra.4s v0, v0, #0x1a
        // \\srsra.2d v0, v0, #0x39
        // \\sshll.8h v0, v0, #0x1
        // \\sshll2.8h v0, v0, #0x2
        // \\sshll.4s v0, v0, #0x3
        // \\sshll2.4s v0, v0, #0x4
        // \\sshll.2d v0, v0, #0x5
        // \\sshll2.2d v0, v0, #0x6
        // \\sshr.8b v0, v0, #0x7
        // \\sshr.16b v0, v0, #0x6
        // \\sshr.4h v0, v0, #0xd
        // \\sshr.8h v0, v0, #0xc
        // \\sshr.2s v0, v0, #0x1b
        // \\sshr.4s v0, v0, #0x1a
        // \\sshr.2d v0, v0, #0x39
        // \\sshr.8b v0, v0, #0x7
        // \\ssra.16b v0, v0, #0x6
        // \\ssra.4h v0, v0, #0xd
        // \\ssra.8h v0, v0, #0xc
        // \\ssra.2s v0, v0, #0x1b
        // \\ssra.4s v0, v0, #0x1a
        // \\ssra.2d v0, v0, #0x39
        // \\ssra 	d0, d0, #0x40
        // \\ucvtf.2s v0, v0, #0x1f
        // \\ucvtf.4s v0, v0, #0x1e
        // \\ucvtf.2d v0, v0, #0x3d
        // \\uqrshrn.8b v0, v0, #0x7
        // \\uqrshrn2.16b v0, v0, #0x6
        // \\uqrshrn.4h v0, v0, #0xd
        // \\uqrshrn2.8h v0, v0, #0xc
        // \\uqrshrn.2s v0, v0, #0x1b
        // \\uqrshrn2.4s v0, v0, #0x1a
        // \\uqshl.8b v0, v0, #0x1
        // \\uqshl.16b v0, v0, #0x2
        // \\uqshl.4h v0, v0, #0x3
        // \\uqshl.8h v0, v0, #0x4
        // \\uqshl.2s v0, v0, #0x5
        // \\uqshl.4s v0, v0, #0x6
        // \\uqshl.2d v0, v0, #0x7
        // \\uqshrn.8b v0, v0, #0x7
        // \\uqshrn2.16b v0, v0, #0x6
        // \\uqshrn.4h v0, v0, #0xd
        // \\uqshrn2.8h v0, v0, #0xc
        // \\uqshrn.2s v0, v0, #0x1b
        // \\uqshrn2.4s v0, v0, #0x1a
        // \\urshr.8b v0, v0, #0x7
        // \\urshr.16b v0, v0, #0x6
        // \\urshr.4h v0, v0, #0xd
        // \\urshr.8h v0, v0, #0xc
        // \\urshr.2s v0, v0, #0x1b
        // \\urshr.4s v0, v0, #0x1a
        // \\urshr.2d v0, v0, #0x39
        // \\ursra.8b v0, v0, #0x7
        // \\ursra.16b v0, v0, #0x6
        // \\ursra.4h v0, v0, #0xd
        // \\ursra.8h v0, v0, #0xc
        // \\ursra.2s v0, v0, #0x1b
        // \\ursra.4s v0, v0, #0x1a
        // \\ursra.2d v0, v0, #0x39
        // \\ushll.8h v0, v0, #0x1
        // \\ushll2.8h v0, v0, #0x2
        // \\ushll.4s v0, v0, #0x3
        // \\ushll2.4s v0, v0, #0x4
        // \\ushll.2d v0, v0, #0x5
        // \\ushll2.2d v0, v0, #0x6
        // \\ushr.8b v0, v0, #0x7
        // \\ushr.16b v0, v0, #0x6
        // \\ushr.4h v0, v0, #0xd
        // \\ushr.8h v0, v0, #0xc
        // \\ushr.2s v0, v0, #0x1b
        // \\ushr.4s v0, v0, #0x1a
        // \\ushr.2d v0, v0, #0x39
        // \\usra.8b v0, v0, #0x7
        // \\usra.16b v0, v0, #0x6
        // \\usra.4h v0, v0, #0xd
        // \\usra.8h v0, v0, #0xc
        // \\usra.2s v0, v0, #0x1b
        // \\usra.4s v0, v0, #0x1a
        // \\usra.2d v0, v0, #0x39
        // \\pmull.8h v0, v0, v0
        // \\pmull2.8h v0, v0, v0
        // \\pmull.1q v0, v0, v0
        // \\pmull2.1q v0, v0, v0
        // \\faddp.2d d1, v2
        // \\faddp.2s s3, v4
        // \\tbl.16b v2, { v4, v5, v6, v7 }, v1
        // \\tbl.8b v0, { v4, v5, v6, v7 }, v1
        // \\tbl.16b v2, { v5 }, v1
        // \\tbl.8b v0, { v5 }, v1
        // \\tbl.16b v2, { v5, v6, v7 }, v1
        // \\tbl.8b v0, { v5, v6, v7 }, v1
        // \\tbl.16b v2, { v6, v7 }, v1
        // \\tbl.8b v0, { v6, v7 }, v1
        // \\tbx.16b v2, { v4, v5, v6, v7 }, v1
        // \\tbx.8b v0, { v4, v5, v6, v7 }, v1
        // \\tbx.16b v2, { v5 }, v1
        // \\tbx.8b v0, { v5 }, v1
        // \\tbx.16b v2, { v5, v6, v7 }, v1
        // \\tbx.8b v0, { v5, v6, v7 }, v1
        // \\tbx.16b v2, { v6, v7 }, v1
        // \\tbx.8b v0, { v6, v7 }, v1
        // \\smlal.8h v0, v0, v0
        // \\smlal2.8h v0, v0, v0
        // \\smlal.2d v0, v0, v0
        // \\smlal2.2d v0, v0, v0
        // \\umlal.8h v0, v0, v0
        // \\umlal2.8h v0, v0, v0
        // \\umlal.2d v0, v0, v0
        // \\umlal2.2d v0, v0, v0
        // \\sqdmlal s0, h0, h0
        // \\sqdmlal d0, s0, s0
        // \\sqdmlsl s0, h0, h0
        // \\sqdmlsl d0, s0, s0
        // \\ld1r.8h { v10 }, [x13], x7
        // \\ld1r.4s { v10 }, [x13], x7
        // \\ld1r.16b { v10 }, [x13], x7
        // \\sqdmull s0, h0, h0
        // \\sqdmull d0, s0, s0
        // \\frsqrte s0, s0
        // \\frsqrte d0, d0
        // \\ld1r.2d { v10 }, [x14], x7
        // \\ld2r.4s { v10, v11 }, [x15], x7
        // \\ld3r.4s { v10, v11, v12 }, [x15], x7
        // \\ld4r.4s { v10, v11, v12, v13 }, [x15], x7
        // \\fmulx s2, s3, s1
        // \\fmulx d2, d3, d1
        // \\ld1.4s { v8, v9, v10 }, [sp], #48
        \\
    );
}

test "arm64 arithmetic" {
    try doTheTest(&.{
        // Add/Subtract with carry/borrow
        0x41, 0x00, 0x03, 0x1a,
        0x41, 0x00, 0x03, 0x9a,
        0x85, 0x00, 0x03, 0x3a,
        0x85, 0x00, 0x03, 0xba,
        0x41, 0x00, 0x03, 0x5a,
        0x41, 0x00, 0x03, 0xda,
        0x41, 0x00, 0x03, 0x7a,
        0x41, 0x00, 0x03, 0xfa,
        // Add/Subtract with (optionally shifted) immediate
        0x83, 0x00, 0x10, 0x11,
        0x83, 0x00, 0x10, 0x91,
        0x83, 0x00, 0x50, 0x11,
        0x83, 0x00, 0x40, 0x11,
        0x83, 0x00, 0x50, 0x91,
        0x83, 0x00, 0x40, 0x91,
        0xff, 0x83, 0x00, 0x91,
        0x83, 0x00, 0x10, 0x31,
        0x83, 0x00, 0x50, 0x31,
        0x83, 0x00, 0x10, 0xb1,
        0x83, 0x00, 0x50, 0xb1,
        0xff, 0x83, 0x00, 0xb1,
        0x83, 0x00, 0x10, 0x51,
        0x83, 0x00, 0x50, 0x51,
        0x83, 0x00, 0x10, 0xd1,
        0x83, 0x00, 0x50, 0xd1,
        0xff, 0x83, 0x00, 0xd1,
        0x83, 0x00, 0x10, 0x71,
        0x83, 0x00, 0x50, 0x71,
        0x83, 0x00, 0x10, 0xf1,
        0x83, 0x00, 0x50, 0xf1,
        0xff, 0x83, 0x00, 0xf1,
        // Add/Subtract register with (optional) shift
        0xac, 0x01, 0x0e, 0x0b,
        0xac, 0x01, 0x0e, 0x8b,
        0xac, 0x31, 0x0e, 0x0b,
        0xac, 0x31, 0x0e, 0x8b,
        0xac, 0x29, 0x4e, 0x0b,
        0xac, 0x29, 0x4e, 0x8b,
        0xac, 0x1d, 0x8e, 0x0b,
        0xac, 0x9d, 0x8e, 0x8b,
        0xac, 0x01, 0x0e, 0x4b,
        0xac, 0x01, 0x0e, 0xcb,
        0xac, 0x31, 0x0e, 0x4b,
        0xac, 0x31, 0x0e, 0xcb,
        0xac, 0x29, 0x4e, 0x4b,
        0xac, 0x29, 0x4e, 0xcb,
        0xac, 0x1d, 0x8e, 0x4b,
        0xac, 0x9d, 0x8e, 0xcb,
        0xac, 0x01, 0x0e, 0x2b,
        0xac, 0x01, 0x0e, 0xab,
        0xac, 0x31, 0x0e, 0x2b,
        0xac, 0x31, 0x0e, 0xab,
        0xac, 0x29, 0x4e, 0x2b,
        0xac, 0x29, 0x4e, 0xab,
        0xac, 0x1d, 0x8e, 0x2b,
        0xac, 0x9d, 0x8e, 0xab,
        0xac, 0x01, 0x0e, 0x6b,
        0xac, 0x01, 0x0e, 0xeb,
        0xac, 0x31, 0x0e, 0x6b,
        0xac, 0x31, 0x0e, 0xeb,
        0xac, 0x29, 0x4e, 0x6b,
        0xac, 0x29, 0x4e, 0xeb,
        0xac, 0x1d, 0x8e, 0x6b,
        0xac, 0x9d, 0x8e, 0xeb,
        // Add/Subtract with (optional) extend
        0x41, 0x00, 0x23, 0x0b,
        0x41, 0x20, 0x23, 0x0b,
        0x41, 0x40, 0x23, 0x0b,
        0x41, 0x60, 0x23, 0x0b,
        0x41, 0x80, 0x23, 0x0b,
        0x41, 0xa0, 0x23, 0x0b,
        0x41, 0xc0, 0x23, 0x0b,
        0x41, 0xe0, 0x23, 0x0b,
        0x41, 0x00, 0x23, 0x8b,
        0x41, 0x20, 0x23, 0x8b,
        0x41, 0x40, 0x23, 0x8b,
        0x41, 0x80, 0x23, 0x8b,
        0x41, 0xa0, 0x23, 0x8b,
        0x41, 0xc0, 0x23, 0x8b,
        0xe1, 0x43, 0x23, 0x0b,
        0xe1, 0x43, 0x23, 0x0b,
        0x5f, 0x60, 0x23, 0x8b,
        0x5f, 0x60, 0x23, 0x8b,
        0x41, 0x00, 0x23, 0x4b,
        0x41, 0x20, 0x23, 0x4b,
        0x41, 0x40, 0x23, 0x4b,
        0x41, 0x60, 0x23, 0x4b,
        0x41, 0x80, 0x23, 0x4b,
        0x41, 0xa0, 0x23, 0x4b,
        0x41, 0xc0, 0x23, 0x4b,
        0x41, 0xe0, 0x23, 0x4b,
        0x41, 0x00, 0x23, 0xcb,
        0x41, 0x20, 0x23, 0xcb,
        0x41, 0x40, 0x23, 0xcb,
        0x41, 0x80, 0x23, 0xcb,
        0x41, 0xa0, 0x23, 0xcb,
        0x41, 0xc0, 0x23, 0xcb,
        0xe1, 0x43, 0x23, 0x4b,
        0xe1, 0x43, 0x23, 0x4b,
        0x5f, 0x60, 0x23, 0xcb,
        0x5f, 0x60, 0x23, 0xcb,
        0x41, 0x00, 0x23, 0x2b,
        0x41, 0x20, 0x23, 0x2b,
        0x41, 0x40, 0x23, 0x2b,
        0x41, 0x60, 0x23, 0x2b,
        0x41, 0x80, 0x23, 0x2b,
        0x41, 0xa0, 0x23, 0x2b,
        0x41, 0xc0, 0x23, 0x2b,
        0x41, 0xe0, 0x23, 0x2b,
        0x41, 0x00, 0x23, 0xab,
        0x41, 0x20, 0x23, 0xab,
        0x41, 0x40, 0x23, 0xab,
        0x41, 0x80, 0x23, 0xab,
        0x41, 0xa0, 0x23, 0xab,
        0x41, 0xc0, 0x23, 0xab,
        0xe1, 0x43, 0x23, 0x2b,
        0xe1, 0x43, 0x23, 0x2b,
        0x41, 0x00, 0x23, 0x6b,
        0x41, 0x20, 0x23, 0x6b,
        0x41, 0x40, 0x23, 0x6b,
        0x41, 0x60, 0x23, 0x6b,
        0x41, 0x80, 0x23, 0x6b,
        0x41, 0xa0, 0x23, 0x6b,
        0x41, 0xc0, 0x23, 0x6b,
        0x41, 0xe0, 0x23, 0x6b,
        0x41, 0x00, 0x23, 0xeb,
        0x41, 0x20, 0x23, 0xeb,
        0x41, 0x40, 0x23, 0xeb,
        0x41, 0x80, 0x23, 0xeb,
        0x41, 0xa0, 0x23, 0xeb,
        0x41, 0xc0, 0x23, 0xeb,
        0xe1, 0x43, 0x23, 0x6b,
        0xe1, 0x43, 0x23, 0x6b,
        0x1f, 0x41, 0x28, 0xeb,
        0x3f, 0x41, 0x28, 0x6b,
        0xff, 0x43, 0x28, 0x6b,
        0xff, 0x43, 0x28, 0xeb,
        0x3f, 0x41, 0x28, 0x4b,
        0xe1, 0x43, 0x28, 0x4b,
        0xff, 0x43, 0x28, 0x4b,
        0x3f, 0x41, 0x28, 0xcb,
        0xe1, 0x43, 0x28, 0xcb,
        0xff, 0x43, 0x28, 0xcb,
        0xe1, 0x43, 0x28, 0x6b,
        0xe1, 0x43, 0x28, 0xeb,
        // Signed/Unsigned divide
        0x41, 0x0c, 0xc3, 0x1a,
        0x41, 0x0c, 0xc3, 0x9a,
        0x41, 0x08, 0xc3, 0x1a,
        0x41, 0x08, 0xc3, 0x9a,
        // Variable shifts
        0x41, 0x28, 0xc3, 0x1a,
        0x41, 0x28, 0xc3, 0x9a,
        0x41, 0x20, 0xc3, 0x1a,
        0x41, 0x20, 0xc3, 0x9a,
        0x41, 0x24, 0xc3, 0x1a,
        0x41, 0x24, 0xc3, 0x9a,
        0x41, 0x2c, 0xc3, 0x1a,
        0x41, 0x2c, 0xc3, 0x9a,
        // One operand instructions
        0x41, 0x14, 0xc0, 0x5a,
        0x41, 0x14, 0xc0, 0xda,
        0x41, 0x10, 0xc0, 0x5a,
        0x41, 0x10, 0xc0, 0xda,
        0x41, 0x00, 0xc0, 0x5a,
        0x41, 0x00, 0xc0, 0xda,
        0x41, 0x08, 0xc0, 0x5a,
        0x41, 0x0c, 0xc0, 0xda,
        0x41, 0x04, 0xc0, 0x5a,
        0x41, 0x04, 0xc0, 0xda,
        0x41, 0x08, 0xc0, 0xda,
        // 6.6.1 Multiply-add instructions
        0x41, 0x10, 0x03, 0x1b,
        0x41, 0x10, 0x03, 0x9b,
        0x41, 0x90, 0x03, 0x1b,
        0x41, 0x90, 0x03, 0x9b,
        0x41, 0x10, 0x23, 0x9b,
        0x41, 0x90, 0x23, 0x9b,
        0x41, 0x10, 0xa3, 0x9b,
        0x41, 0x90, 0xa3, 0x9b,
        // Multiply-high instructions
        0x41, 0x7c, 0x43, 0x9b,
        0x41, 0x7c, 0xc3, 0x9b,
        // Move immediate instructions
        0x20, 0x00, 0x80, 0x52,
        0x20, 0x00, 0x80, 0xd2,
        0x20, 0x00, 0xa0, 0x52,
        0x20, 0x00, 0xa0, 0xd2,
        0x40, 0x00, 0x80, 0x12,
        0x40, 0x00, 0x80, 0x92,
        0x40, 0x00, 0xa0, 0x12,
        0x40, 0x00, 0xa0, 0x92,
        0x20, 0x00, 0x80, 0x72,
        0x20, 0x00, 0x80, 0xf2,
        0x20, 0x00, 0xa0, 0x72,
        0x20, 0x00, 0xa0, 0xf2,
        // Conditionally set flags instructions
        0x1f, 0x00, 0x00, 0x31,
        0x1f, 0xfc, 0x03, 0xb1,
        0x23, 0x08, 0x42, 0x3a,
        0x23, 0x08, 0x42, 0xba,
        0x23, 0x08, 0x42, 0x7a,
        0x23, 0x08, 0x42, 0xfa,
        0x23, 0x00, 0x42, 0x3a,
        0x23, 0x00, 0x42, 0xba,
        0x23, 0x00, 0x42, 0x7a,
        0x23, 0x00, 0x42, 0xfa,
        // Conditional select instructions
        0x41, 0x00, 0x83, 0x1a,
        0x41, 0x00, 0x83, 0x9a,
        0x41, 0x04, 0x83, 0x1a,
        0x41, 0x04, 0x83, 0x9a,
        0x41, 0x00, 0x83, 0x5a,
        0x41, 0x00, 0x83, 0xda,
        0x41, 0x04, 0x83, 0x5a,
        0x41, 0x04, 0x83, 0xda,
    },
        \\adc w1, w2, w3
        \\adc x1, x2, x3
        \\adcs w5, w4, w3
        \\adcs x5, x4, x3
        \\sbc w1, w2, w3
        \\sbc x1, x2, x3
        \\sbcs w1, w2, w3
        \\sbcs x1, x2, x3
        \\add w3, w4, #1024
        \\add x3, x4, #1024
        \\add w3, w4, #1024, lsl #12
        \\add w3, w4, #0, lsl #12
        \\add x3, x4, #1024, lsl #12
        \\add x3, x4, #0, lsl #12
        \\add sp, sp, #32
        \\adds w3, w4, #1024
        \\adds w3, w4, #1024, lsl #12
        \\adds x3, x4, #1024
        \\adds x3, x4, #1024, lsl #12
        \\cmn sp, #32
        \\sub w3, w4, #1024
        \\sub w3, w4, #1024, lsl #12
        \\sub x3, x4, #1024
        \\sub x3, x4, #1024, lsl #12
        \\sub sp, sp, #32
        \\subs w3, w4, #1024
        \\subs w3, w4, #1024, lsl #12
        \\subs x3, x4, #1024
        \\subs x3, x4, #1024, lsl #12
        \\cmp sp, #32
        \\add w12, w13, w14
        \\add x12, x13, x14
        \\add w12, w13, w14, lsl #12
        \\add x12, x13, x14, lsl #12
        \\add w12, w13, w14, lsr #10
        \\add x12, x13, x14, lsr #10
        \\add w12, w13, w14, asr #7
        \\add x12, x13, x14, asr #39
        \\sub w12, w13, w14
        \\sub x12, x13, x14
        \\sub w12, w13, w14, lsl #12
        \\sub x12, x13, x14, lsl #12
        \\sub w12, w13, w14, lsr #10
        \\sub x12, x13, x14, lsr #10
        \\sub w12, w13, w14, asr #7
        \\sub x12, x13, x14, asr #39
        \\adds w12, w13, w14
        \\adds x12, x13, x14
        \\adds w12, w13, w14, lsl #12
        \\adds x12, x13, x14, lsl #12
        \\adds w12, w13, w14, lsr #10
        \\adds x12, x13, x14, lsr #10
        \\adds w12, w13, w14, asr #7
        \\adds x12, x13, x14, asr #39
        \\subs w12, w13, w14
        \\subs x12, x13, x14
        \\subs w12, w13, w14, lsl #12
        \\subs x12, x13, x14, lsl #12
        \\subs w12, w13, w14, lsr #10
        \\subs x12, x13, x14, lsr #10
        \\subs w12, w13, w14, asr #7
        \\subs x12, x13, x14, asr #39
        \\add w1, w2, w3, uxtb
        \\add w1, w2, w3, uxth
        \\add w1, w2, w3, uxtw
        \\add w1, w2, w3, uxtx
        \\add w1, w2, w3, sxtb
        \\add w1, w2, w3, sxth
        \\add w1, w2, w3, sxtw
        \\add w1, w2, w3, sxtx
        \\add x1, x2, w3, uxtb
        \\add x1, x2, w3, uxth
        \\add x1, x2, w3, uxtw
        \\add x1, x2, w3, sxtb
        \\add x1, x2, w3, sxth
        \\add x1, x2, w3, sxtw
        \\add w1, wsp, w3
        \\add w1, wsp, w3
        \\add sp, x2, x3
        \\add sp, x2, x3
        \\sub w1, w2, w3, uxtb
        \\sub w1, w2, w3, uxth
        \\sub w1, w2, w3, uxtw
        \\sub w1, w2, w3, uxtx
        \\sub w1, w2, w3, sxtb
        \\sub w1, w2, w3, sxth
        \\sub w1, w2, w3, sxtw
        \\sub w1, w2, w3, sxtx
        \\sub x1, x2, w3, uxtb
        \\sub x1, x2, w3, uxth
        \\sub x1, x2, w3, uxtw
        \\sub x1, x2, w3, sxtb
        \\sub x1, x2, w3, sxth
        \\sub x1, x2, w3, sxtw
        \\sub w1, wsp, w3
        \\sub w1, wsp, w3
        \\sub sp, x2, x3
        \\sub sp, x2, x3
        \\adds w1, w2, w3, uxtb
        \\adds w1, w2, w3, uxth
        \\adds w1, w2, w3, uxtw
        \\adds w1, w2, w3, uxtx
        \\adds w1, w2, w3, sxtb
        \\adds w1, w2, w3, sxth
        \\adds w1, w2, w3, sxtw
        \\adds w1, w2, w3, sxtx
        \\adds x1, x2, w3, uxtb
        \\adds x1, x2, w3, uxth
        \\adds x1, x2, w3, uxtw
        \\adds x1, x2, w3, sxtb
        \\adds x1, x2, w3, sxth
        \\adds x1, x2, w3, sxtw
        \\adds w1, wsp, w3
        \\adds w1, wsp, w3
        \\subs w1, w2, w3, uxtb
        \\subs w1, w2, w3, uxth
        \\subs w1, w2, w3, uxtw
        \\subs w1, w2, w3, uxtx
        \\subs w1, w2, w3, sxtb
        \\subs w1, w2, w3, sxth
        \\subs w1, w2, w3, sxtw
        \\subs w1, w2, w3, sxtx
        \\subs x1, x2, w3, uxtb
        \\subs x1, x2, w3, uxth
        \\subs x1, x2, w3, uxtw
        \\subs x1, x2, w3, sxtb
        \\subs x1, x2, w3, sxth
        \\subs x1, x2, w3, sxtw
        \\subs w1, wsp, w3
        \\subs w1, wsp, w3
        \\cmp x8, w8, uxtw
        \\cmp w9, w8, uxtw
        \\cmp wsp, w8
        \\cmp sp, w8, uxtw
        \\sub wsp, w9, w8
        \\sub w1, wsp, w8
        \\sub wsp, wsp, w8
        \\sub sp, x9, w8, uxtw
        \\sub x1, sp, w8, uxtw
        \\sub sp, sp, w8, uxtw
        \\subs w1, wsp, w8
        \\subs x1, sp, w8, uxtw
        \\sdiv w1, w2, w3
        \\sdiv x1, x2, x3
        \\udiv w1, w2, w3
        \\udiv x1, x2, x3
        \\asr w1, w2, w3
        \\asr x1, x2, x3
        \\lsl w1, w2, w3
        \\lsl x1, x2, x3
        \\lsr w1, w2, w3
        \\lsr x1, x2, x3
        \\ror w1, w2, w3
        \\ror x1, x2, x3
        \\cls w1, w2
        \\cls x1, x2
        \\clz w1, w2
        \\clz x1, x2
        \\rbit w1, w2
        \\rbit x1, x2
        \\rev w1, w2
        \\rev x1, x2
        \\rev16 w1, w2
        \\rev16 x1, x2
        \\rev32 x1, x2
        \\madd w1, w2, w3, w4
        \\madd x1, x2, x3, x4
        \\msub w1, w2, w3, w4
        \\msub x1, x2, x3, x4
        \\smaddl x1, w2, w3, x4
        \\smsubl x1, w2, w3, x4
        \\umaddl x1, w2, w3, x4
        \\umsubl x1, w2, w3, x4
        \\smulh x1, x2, x3
        \\umulh x1, x2, x3
        \\movz w0, #1
        \\movz x0, #1
        \\movz w0, #1, lsl #16
        \\movz x0, #1, lsl #16
        \\movn w0, #2
        \\movn x0, #2
        \\movn w0, #2, lsl #16
        \\movn x0, #2, lsl #16
        \\movk w0, #1
        \\movk x0, #1
        \\movk w0, #1, lsl #16
        \\movk x0, #1, lsl #16
        \\cmn w0, #0
        \\cmn x0, #255
        \\ccmn w1, #2, #3, eq
        \\ccmn x1, #2, #3, eq
        \\ccmp w1, #2, #3, eq
        \\ccmp x1, #2, #3, eq
        \\ccmn w1, w2, #3, eq
        \\ccmn x1, x2, #3, eq
        \\ccmp w1, w2, #3, eq
        \\ccmp x1, x2, #3, eq
        \\csel w1, w2, w3, eq
        \\csel x1, x2, x3, eq
        \\csinc w1, w2, w3, eq
        \\csinc x1, x2, x3, eq
        \\csinv w1, w2, w3, eq
        \\csinv x1, x2, x3, eq
        \\csneg w1, w2, w3, eq
        \\csneg x1, x2, x3, eq
        \\
    );
}

test "arm64 basic a64 undefined" {
    if (true) return error.SkipZigTest;
}

test "arm64 bitfield" {
    try doTheTest(&.{
        // 5.4.4 Bitfield Operations
        0x41, 0x3c, 0x01, 0x33,
        0x41, 0x3c, 0x41, 0xb3,
        0x41, 0x3c, 0x01, 0x13,
        0x41, 0x3c, 0x41, 0x93,
        0x41, 0x3c, 0x01, 0x53,
        0x41, 0x3c, 0x41, 0xd3,
        // 5.4.5 Extract (immediate)
        0x41, 0x3c, 0x83, 0x13,
        0x62, 0x04, 0xc4, 0x93,
    },
        \\bfxil w1, w2, #1, #15
        \\bfxil x1, x2, #1, #15
        \\sbfx w1, w2, #1, #15
        \\sbfx x1, x2, #1, #15
        \\ubfx w1, w2, #1, #15
        \\ubfx x1, x2, #1, #15
        \\extr w1, w2, w3, #15
        \\extr x2, x3, x4, #1
        \\
    );
}

test "arm64 branch" {
    try doTheTest(&.{
        // Unconditional branch (register) instructions.
        0xc0, 0x03, 0x5f, 0xd6,
        0x20, 0x00, 0x5f, 0xd6,
        0xe0, 0x03, 0xbf, 0xd6,
        0xe0, 0x03, 0x9f, 0xd6,
        0xa0, 0x00, 0x1f, 0xd6,
        0x20, 0x01, 0x3f, 0xd6,
        0x0B, 0x00, 0x18, 0x37,
        // Exception generation instructions.
        0x20, 0x00, 0x20, 0xd4,
        0x41, 0x00, 0xa0, 0xd4,
        0x62, 0x00, 0xa0, 0xd4,
        0x83, 0x00, 0xa0, 0xd4,
        0xa0, 0x00, 0x40, 0xd4,
        0xc2, 0x00, 0x00, 0xd4,
        0xe3, 0x00, 0x00, 0xd4,
        0x01, 0x01, 0x00, 0xd4,
        // // PC-relative branches (both positive and negative displacement)
        0x07, 0x00, 0x00, 0x14,
        0x06, 0x00, 0x00, 0x94,
        0xa1, 0x00, 0x00, 0x54,
        0x80, 0x00, 0x08, 0x36,
        0xe1, 0xff, 0xf7, 0x36,
        0x60, 0x00, 0x08, 0x37,
        0x40, 0x00, 0x00, 0xb4,
        0x20, 0x00, 0x00, 0xb5,
        0x1f, 0x20, 0x03, 0xd5,
        0xff, 0xff, 0xff, 0x17,
        0xc1, 0xff, 0xff, 0x54,
        0xa0, 0xff, 0x0f, 0x36,
        0x80, 0xff, 0xff, 0xb4,
        0x1f, 0x20, 0x03, 0xd5,
    },
        \\ret
        \\ret x1
        \\drps
        \\eret
        \\br x5
        \\blr x9
        \\tbnz w11, #3, #0
        \\brk #1
        \\dcps1 #2
        \\dcps2 #3
        \\dcps3 #4
        \\hlt #5
        \\hvc #6
        \\smc #7
        \\svc #8
        \\b #28
        \\bl #24
        \\b.ne #20
        \\tbz w0, #1, #16
        \\tbz w1, #30, #-4
        \\tbnz w0, #1, #12
        \\cbz x0, #8
        \\cbnz x0, #4
        \\nop
        \\b #-4
        \\b.ne #-8
        \\tbz w0, #1, #-12
        \\cbz x0, #-16
        \\nop
        \\
    );
}

test "arm64 canonical form" {
    try doTheTest(&.{
        0x00, 0x08, 0x00, 0xc8,
        0x00, 0x00, 0x40, 0x9b,
        0x08, 0x20, 0x21, 0x1e,
        0x1f, 0x00, 0x00, 0x11,
        0x00, 0x7c, 0x00, 0x13,
    },
        \\stxr w0, x0, [x0]
        \\smulh x0, x0, x0
        \\fcmp s0, #0.0
        \\mov wsp, w0
        \\asr w0, w0, #0
        \\
    );
}

test "arm64 crc32" {
    try doTheTest(&.{
        0xe5, 0x40, 0xd4, 0x1a,
        0xfc, 0x47, 0xde, 0x1a,
        0x20, 0x48, 0xc2, 0x1a,
        0x27, 0x4d, 0xd4, 0x9a,
        0xa9, 0x50, 0xc4, 0x1a,
        0x2d, 0x56, 0xd9, 0x1a,
        0x7f, 0x58, 0xc5, 0x1a,
        0x12, 0x5e, 0xdf, 0x9a,
    },
        \\crc32b w5, w7, w20
        \\crc32h w28, wzr, w30
        \\crc32w w0, w1, w2
        \\crc32x w7, w9, x20
        \\crc32cb w9, w5, w4
        \\crc32ch w13, w17, w25
        \\crc32cw wzr, w3, w5
        \\crc32cx w18, w16, xzr
        \\
    );
}

test "arm64 crypto" {
    try doTheTest(&.{
        0x20, 0x48, 0x28, 0x4e,
        0x20, 0x58, 0x28, 0x4e,
        0x20, 0x68, 0x28, 0x4e,
        0x20, 0x78, 0x28, 0x4e,
        0x20, 0x00, 0x02, 0x5e,
        0x20, 0x10, 0x02, 0x5e,
        0x20, 0x20, 0x02, 0x5e,
        0x20, 0x30, 0x02, 0x5e,
        0x20, 0x40, 0x02, 0x5e,
        0x20, 0x50, 0x02, 0x5e,
        0x20, 0x60, 0x02, 0x5e,
        0x20, 0x08, 0x28, 0x5e,
        0x20, 0x18, 0x28, 0x5e,
        0x20, 0x28, 0x28, 0x5e,
    },
        \\aese v0.16b, v1.16b
        \\aesd v0.16b, v1.16b
        \\aesmc v0.16b, v1.16b
        \\aesimc v0.16b, v1.16b
        \\sha1c q0, s1, v2.4s
        \\sha1p q0, s1, v2.4s
        \\sha1m q0, s1, v2.4s
        \\sha1su0 v0.4s, v1.4s, v2
        \\sha256h q0, q1, v2.4s
        \\sha256h2 q0, q1, v2.4s
        \\sha256su1 v0.4s, v1.4s, v2.4s
        \\sha1h s0, s1
        \\sha1su1 v0.4s, v1.4s
        \\sha256su0 v0.4s, v1.4s
        \\
        // TODO: apple output
        // \\aese.16b v0, v1
        // \\aesd.16b v0, v1
        // \\aesmc.16b v0, v1
        // \\aesimc.16b v0, v1
        // \\sha1c.4s q0, s1, v2
        // \\sha1p.4s q0, s1, v2
        // \\sha1m.4s q0, s1, v2
        // \\sha1su0.4s v0, v1, v2
        // \\sha256h.4s q0, q1, v2
        // \\sha256h2.4s q0, q1, v2
        // \\sha256su1.4s v0, v1, v2
        // \\sha1h s0, s1
        // \\sha1su1.4s v0, v1
        // \\sha256su0.4s v0, v1
        // \\
    );
}

test "arm64 invalid logical" {
    if (true) return error.SkipZigTest;
}

test "arm64 logical" {
    try doTheTest(&.{
        // 5.4.2 Logical (immediate)
        0x00, 0x00, 0x00, 0x12,
        0x00, 0x00, 0x40, 0x92,
        0x41, 0x0c, 0x00, 0x12,
        0x41, 0x0c, 0x40, 0x92,
        0xbf, 0xec, 0x7c, 0x92,
        0x00, 0x00, 0x00, 0x72,
        0x00, 0x00, 0x40, 0xf2,
        0x41, 0x0c, 0x00, 0x72,
        0x41, 0x0c, 0x40, 0xf2,
        0x5f, 0x0c, 0x40, 0xf2,
        0x41, 0x00, 0x12, 0x52,
        0x41, 0x00, 0x71, 0xd2,
        0x5f, 0x00, 0x71, 0xd2,
        0x41, 0x00, 0x12, 0x32,
        0x41, 0x00, 0x71, 0xb2,
        0x5f, 0x00, 0x71, 0xb2,
        // 5.5.3 Logical (shifted register)
        0x41, 0x00, 0x03, 0x0a,
        0x41, 0x00, 0x03, 0x8a,
        0x41, 0x08, 0x03, 0x0a,
        0x41, 0x08, 0x03, 0x8a,
        0x41, 0x08, 0x43, 0x0a,
        0x41, 0x08, 0x43, 0x8a,
        0x41, 0x08, 0x83, 0x0a,
        0x41, 0x08, 0x83, 0x8a,
        0x41, 0x08, 0xc3, 0x0a,
        0x41, 0x08, 0xc3, 0x8a,
        0x41, 0x00, 0x03, 0x6a,
        0x41, 0x00, 0x03, 0xea,
        0x41, 0x08, 0x03, 0x6a,
        0x41, 0x08, 0x03, 0xea,
        0x41, 0x08, 0x43, 0x6a,
        0x41, 0x08, 0x43, 0xea,
        0x41, 0x08, 0x83, 0x6a,
        0x41, 0x08, 0x83, 0xea,
        0x41, 0x08, 0xc3, 0x6a,
        0x41, 0x08, 0xc3, 0xea,
        0x41, 0x00, 0x23, 0x0a,
        0x41, 0x00, 0x23, 0x8a,
        0x41, 0x0c, 0x23, 0x0a,
        0x41, 0x0c, 0x23, 0x8a,
        0x41, 0x0c, 0x63, 0x0a,
        0x41, 0x0c, 0x63, 0x8a,
        0x41, 0x0c, 0xa3, 0x0a,
        0x41, 0x0c, 0xa3, 0x8a,
        0x41, 0x0c, 0xe3, 0x0a,
        0x41, 0x0c, 0xe3, 0x8a,
        0x41, 0x00, 0x23, 0x6a,
        0x41, 0x00, 0x23, 0xea,
        0x41, 0x0c, 0x23, 0x6a,
        0x41, 0x0c, 0x23, 0xea,
        0x41, 0x0c, 0x63, 0x6a,
        0x41, 0x0c, 0x63, 0xea,
        0x41, 0x0c, 0xa3, 0x6a,
        0x41, 0x0c, 0xa3, 0xea,
        0x41, 0x0c, 0xe3, 0x6a,
        0x41, 0x0c, 0xe3, 0xea,
        0x41, 0x00, 0x23, 0x4a,
        0x41, 0x00, 0x23, 0xca,
        0x41, 0x10, 0x23, 0x4a,
        0x41, 0x10, 0x23, 0xca,
        0x41, 0x10, 0x63, 0x4a,
        0x41, 0x10, 0x63, 0xca,
        0x41, 0x10, 0xa3, 0x4a,
        0x41, 0x10, 0xa3, 0xca,
        0x41, 0x10, 0xe3, 0x4a,
        0x41, 0x10, 0xe3, 0xca,
        0x41, 0x00, 0x03, 0x4a,
        0x41, 0x00, 0x03, 0xca,
        0x41, 0x14, 0x03, 0x4a,
        0x41, 0x14, 0x03, 0xca,
        0x41, 0x14, 0x43, 0x4a,
        0x41, 0x14, 0x43, 0xca,
        0x41, 0x14, 0x83, 0x4a,
        0x41, 0x14, 0x83, 0xca,
        0x41, 0x14, 0xc3, 0x4a,
        0x41, 0x14, 0xc3, 0xca,
        0x41, 0x00, 0x03, 0x2a,
        0x41, 0x00, 0x03, 0xaa,
        0x41, 0x18, 0x03, 0x2a,
        0x41, 0x18, 0x03, 0xaa,
        0x41, 0x18, 0x43, 0x2a,
        0x41, 0x18, 0x43, 0xaa,
        0x41, 0x18, 0x83, 0x2a,
        0x41, 0x18, 0x83, 0xaa,
        0x41, 0x18, 0xc3, 0x2a,
        0x41, 0x18, 0xc3, 0xaa,
        0x41, 0x00, 0x23, 0x2a,
        0x41, 0x00, 0x23, 0xaa,
        0x41, 0x1c, 0x23, 0x2a,
        0x41, 0x1c, 0x23, 0xaa,
        0x41, 0x1c, 0x63, 0x2a,
        0x41, 0x1c, 0x63, 0xaa,
        0x41, 0x1c, 0xa3, 0x2a,
        0x41, 0x1c, 0xa3, 0xaa,
        0x41, 0x1c, 0xe3, 0x2a,
        0x41, 0x1c, 0xe3, 0xaa,
    },
        \\and w0, w0, #0x1
        \\and x0, x0, #0x1
        \\and w1, w2, #0xf
        \\and x1, x2, #0xf
        \\and sp, x5, #0xfffffffffffffff0
        \\ands w0, w0, #0x1
        \\ands x0, x0, #0x1
        \\ands w1, w2, #0xf
        \\ands x1, x2, #0xf
        \\tst x2, #0xf
        \\eor w1, w2, #0x4000
        \\eor x1, x2, #0x8000
        \\eor sp, x2, #0x8000
        \\orr w1, w2, #0x4000
        \\orr x1, x2, #0x8000
        \\orr sp, x2, #0x8000
        \\and w1, w2, w3
        \\and x1, x2, x3
        \\and w1, w2, w3, lsl #2
        \\and x1, x2, x3, lsl #2
        \\and w1, w2, w3, lsr #2
        \\and x1, x2, x3, lsr #2
        \\and w1, w2, w3, asr #2
        \\and x1, x2, x3, asr #2
        \\and w1, w2, w3, ror #2
        \\and x1, x2, x3, ror #2
        \\ands w1, w2, w3
        \\ands x1, x2, x3
        \\ands w1, w2, w3, lsl #2
        \\ands x1, x2, x3, lsl #2
        \\ands w1, w2, w3, lsr #2
        \\ands x1, x2, x3, lsr #2
        \\ands w1, w2, w3, asr #2
        \\ands x1, x2, x3, asr #2
        \\ands w1, w2, w3, ror #2
        \\ands x1, x2, x3, ror #2
        \\bic w1, w2, w3
        \\bic x1, x2, x3
        \\bic w1, w2, w3, lsl #3
        \\bic x1, x2, x3, lsl #3
        \\bic w1, w2, w3, lsr #3
        \\bic x1, x2, x3, lsr #3
        \\bic w1, w2, w3, asr #3
        \\bic x1, x2, x3, asr #3
        \\bic w1, w2, w3, ror #3
        \\bic x1, x2, x3, ror #3
        \\bics w1, w2, w3
        \\bics x1, x2, x3
        \\bics w1, w2, w3, lsl #3
        \\bics x1, x2, x3, lsl #3
        \\bics w1, w2, w3, lsr #3
        \\bics x1, x2, x3, lsr #3
        \\bics w1, w2, w3, asr #3
        \\bics x1, x2, x3, asr #3
        \\bics w1, w2, w3, ror #3
        \\bics x1, x2, x3, ror #3
        \\eon w1, w2, w3
        \\eon x1, x2, x3
        \\eon w1, w2, w3, lsl #4
        \\eon x1, x2, x3, lsl #4
        \\eon w1, w2, w3, lsr #4
        \\eon x1, x2, x3, lsr #4
        \\eon w1, w2, w3, asr #4
        \\eon x1, x2, x3, asr #4
        \\eon w1, w2, w3, ror #4
        \\eon x1, x2, x3, ror #4
        \\eor w1, w2, w3
        \\eor x1, x2, x3
        \\eor w1, w2, w3, lsl #5
        \\eor x1, x2, x3, lsl #5
        \\eor w1, w2, w3, lsr #5
        \\eor x1, x2, x3, lsr #5
        \\eor w1, w2, w3, asr #5
        \\eor x1, x2, x3, asr #5
        \\eor w1, w2, w3, ror #5
        \\eor x1, x2, x3, ror #5
        \\orr w1, w2, w3
        \\orr x1, x2, x3
        \\orr w1, w2, w3, lsl #6
        \\orr x1, x2, x3, lsl #6
        \\orr w1, w2, w3, lsr #6
        \\orr x1, x2, x3, lsr #6
        \\orr w1, w2, w3, asr #6
        \\orr x1, x2, x3, asr #6
        \\orr w1, w2, w3, ror #6
        \\orr x1, x2, x3, ror #6
        \\orn w1, w2, w3
        \\orn x1, x2, x3
        \\orn w1, w2, w3, lsl #7
        \\orn x1, x2, x3, lsl #7
        \\orn w1, w2, w3, lsr #7
        \\orn x1, x2, x3, lsr #7
        \\orn w1, w2, w3, asr #7
        \\orn x1, x2, x3, asr #7
        \\orn w1, w2, w3, ror #7
        \\orn x1, x2, x3, ror #7
        \\
    );
}

test "arm64 memory" {
    try doTheTest(&.{
        // Indexed loads
        0x85, 0x14, 0x40, 0xb9,
        0x64, 0x00, 0x40, 0xf9,
        0xe2, 0x13, 0x40, 0xf9,
        0xe5, 0x07, 0x40, 0x3d,
        0xe6, 0x07, 0x40, 0x7d,
        0xe7, 0x07, 0x40, 0xbd,
        0xe8, 0x07, 0x40, 0xfd,
        0xe9, 0x07, 0xc0, 0x3d,
        0x64, 0x00, 0x40, 0x39,
        0x20, 0x78, 0xa0, 0xb8,
        0x85, 0x50, 0x40, 0x39,
        0x69, 0x00, 0xc0, 0x39,
        0xe2, 0x03, 0x82, 0x39,
        0xe2, 0x43, 0x40, 0x79,
        0xe3, 0x43, 0xc0, 0x79,
        0x25, 0x31, 0x80, 0x79,
        0xe9, 0x03, 0x82, 0xb9,
        0xe5, 0x13, 0x80, 0xf9,
        0x40, 0x00, 0x80, 0xf9,
        0x41, 0x00, 0x80, 0xf9,
        0x42, 0x00, 0x80, 0xf9,
        0x43, 0x00, 0x80, 0xf9,
        0x44, 0x00, 0x80, 0xf9,
        0x45, 0x00, 0x80, 0xf9,
        0x50, 0x00, 0x80, 0xf9,
        0x51, 0x00, 0x80, 0xf9,
        0x52, 0x00, 0x80, 0xf9,
        0x53, 0x00, 0x80, 0xf9,
        0x54, 0x00, 0x80, 0xf9,
        0x55, 0x00, 0x80, 0xf9,
        // Indexed stores
        0x64, 0x00, 0x00, 0xf9,
        0xe2, 0x13, 0x00, 0xf9,
        0x85, 0x14, 0x00, 0xb9,
        0xe5, 0x07, 0x00, 0x3d,
        0xe6, 0x07, 0x00, 0x7d,
        0xe7, 0x07, 0x00, 0xbd,
        0xe8, 0x07, 0x00, 0xfd,
        0xe9, 0x07, 0x80, 0x3d,
        0x64, 0x00, 0x00, 0x39,
        0x85, 0x50, 0x00, 0x39,
        0xe2, 0x43, 0x00, 0x79,
        0x00, 0xe8, 0x20, 0x38,
        0x00, 0x48, 0x20, 0x38,
        // Unscaled immediate loads and stores
        0x62, 0x00, 0x40, 0xb8,
        0xe2, 0x83, 0x41, 0xb8,
        0x62, 0x00, 0x40, 0xf8,
        0xe2, 0x83, 0x41, 0xf8,
        0xe5, 0x13, 0x40, 0x3c,
        0xe6, 0x23, 0x40, 0x7c,
        0xe7, 0x43, 0x40, 0xbc,
        0xe8, 0x83, 0x40, 0xfc,
        0xe9, 0x03, 0xc1, 0x3c,
        0x69, 0x00, 0xc0, 0x38,
        0xe2, 0x03, 0x88, 0x38,
        0xe3, 0x03, 0xc2, 0x78,
        0x25, 0x81, 0x81, 0x78,
        0xe9, 0x03, 0x98, 0xb8,
        0x64, 0x00, 0x00, 0xb8,
        0xe2, 0x03, 0x02, 0xb8,
        0x64, 0x00, 0x00, 0xf8,
        0xe2, 0x03, 0x02, 0xf8,
        0x85, 0x40, 0x01, 0xb8,
        0xe5, 0x13, 0x00, 0x3c,
        0xe6, 0x23, 0x00, 0x7c,
        0xe7, 0x43, 0x00, 0xbc,
        0xe8, 0x83, 0x00, 0xfc,
        0xe9, 0x03, 0x81, 0x3c,
        0x64, 0x00, 0x00, 0x38,
        0x85, 0x40, 0x01, 0x38,
        0xe2, 0x03, 0x02, 0x78,
        0xe5, 0x03, 0x82, 0xf8,
        // Unprivileged loads and stores
        0x83, 0x08, 0x41, 0xb8,
        0x83, 0x08, 0x41, 0xf8,
        0x83, 0x08, 0x41, 0x38,
        0x69, 0x08, 0xc0, 0x38,
        0xe2, 0x0b, 0x88, 0x38,
        0x83, 0x08, 0x41, 0x78,
        0xe3, 0x0b, 0xc2, 0x78,
        0x25, 0x89, 0x81, 0x78,
        0xe9, 0x0b, 0x98, 0xb8,
        0x85, 0x48, 0x01, 0xb8,
        0x64, 0x08, 0x00, 0xf8,
        0xe2, 0x0b, 0x02, 0xf8,
        0x64, 0x08, 0x00, 0x38,
        0x85, 0x48, 0x01, 0x38,
        0xe2, 0x0b, 0x02, 0x78,
        // Pre-indexed loads and stores
        0xfd, 0x8c, 0x40, 0xf8,
        0xfe, 0x8c, 0x40, 0xf8,
        0x05, 0x1c, 0x40, 0x3c,
        0x06, 0x2c, 0x40, 0x7c,
        0x07, 0x4c, 0x40, 0xbc,
        0x08, 0x8c, 0x40, 0xfc,
        0x09, 0x0c, 0xc1, 0x3c,
        0xfe, 0x8c, 0x1f, 0xf8,
        0xfd, 0x8c, 0x1f, 0xf8,
        0x05, 0xfc, 0x1f, 0x3c,
        0x06, 0xec, 0x1f, 0x7c,
        0x07, 0xcc, 0x1f, 0xbc,
        0x08, 0x8c, 0x1f, 0xfc,
        0x09, 0x0c, 0x9f, 0x3c,
        // Post-indexed loads and stores
        0xfe, 0x84, 0x1f, 0xf8,
        0xfd, 0x84, 0x1f, 0xf8,
        0x05, 0xf4, 0x1f, 0x3c,
        0x06, 0xe4, 0x1f, 0x7c,
        0x07, 0xc4, 0x1f, 0xbc,
        0x08, 0x84, 0x1f, 0xfc,
        0x09, 0x04, 0x9f, 0x3c,
        0xfd, 0x84, 0x40, 0xf8,
        0xfe, 0x84, 0x40, 0xf8,
        0x05, 0x14, 0x40, 0x3c,
        0x06, 0x24, 0x40, 0x7c,
        0x07, 0x44, 0x40, 0xbc,
        0x08, 0x84, 0x40, 0xfc,
        0x09, 0x04, 0xc1, 0x3c,
        // Load/Store pair (indexed  offset)
        0xe3, 0x09, 0x42, 0x29,
        0xe4, 0x27, 0x7f, 0xa9,
        0xc2, 0x0d, 0x42, 0x69,
        0xe2, 0x0f, 0x7e, 0x69,
        0x4a, 0x04, 0x48, 0x2d,
        0x4a, 0x04, 0x40, 0x6d,
        0xe3, 0x09, 0x02, 0x29,
        0xe4, 0x27, 0x3f, 0xa9,
        0x4a, 0x04, 0x08, 0x2d,
        0x4a, 0x04, 0x00, 0x6d,
        // Load/Store pair (pre-indexed)
        0xe3, 0x09, 0xc2, 0x29,
        0xe4, 0x27, 0xff, 0xa9,
        0xc2, 0x0d, 0xc2, 0x69,
        0xe2, 0x0f, 0xfe, 0x69,
        0x4a, 0x04, 0xc8, 0x2d,
        0x4a, 0x04, 0xc1, 0x6d,
        0xe3, 0x09, 0x82, 0x29,
        0xe4, 0x27, 0xbf, 0xa9,
        0x4a, 0x04, 0x88, 0x2d,
        0x4a, 0x04, 0x81, 0x6d,
        // Load/Store pair (post-indexed)
        0xe3, 0x09, 0xc2, 0x28,
        0xe4, 0x27, 0xff, 0xa8,
        0xc2, 0x0d, 0xc2, 0x68,
        0xe2, 0x0f, 0xfe, 0x68,
        0x4a, 0x04, 0xc8, 0x2c,
        0x4a, 0x04, 0xc1, 0x6c,
        0xe3, 0x09, 0x82, 0x28,
        0xe4, 0x27, 0xbf, 0xa8,
        0x4a, 0x04, 0x88, 0x2c,
        0x4a, 0x04, 0x81, 0x6c,
        // Load/Store pair (no-allocate)
        0xe3, 0x09, 0x42, 0x28,
        0xe4, 0x27, 0x7f, 0xa8,
        0x4a, 0x04, 0x48, 0x2c,
        0x4a, 0x04, 0x40, 0x6c,
        0xe3, 0x09, 0x02, 0x28,
        0xe4, 0x27, 0x3f, 0xa8,
        0x4a, 0x04, 0x08, 0x2c,
        0x4a, 0x04, 0x00, 0x6c,
        // Load/Store register offset
        0x00, 0x68, 0x60, 0xb8,
        0x00, 0x78, 0x60, 0xb8,
        0x00, 0x68, 0x60, 0xf8,
        0x00, 0x78, 0x60, 0xf8,
        0x00, 0xe8, 0x60, 0xf8,
        0x21, 0x68, 0x62, 0x3c,
        0x21, 0x78, 0x62, 0x3c,
        0x21, 0x68, 0x62, 0x7c,
        0x21, 0x78, 0x62, 0x7c,
        0x21, 0x68, 0x62, 0xbc,
        0x21, 0x78, 0x62, 0xbc,
        0x21, 0x68, 0x62, 0xfc,
        0x21, 0x78, 0x62, 0xfc,
        0x21, 0x68, 0xe2, 0x3c,
        0x21, 0x78, 0xe2, 0x3c,
        0x00, 0x48, 0x20, 0x7c,
        0xe1, 0x6b, 0x23, 0xfc,
        0xe1, 0x5b, 0x23, 0xfc,
        0xe1, 0x6b, 0xa3, 0x3c,
        0xe1, 0x5b, 0xa3, 0x3c,
        // Load/Store exclusive
        0x26, 0x7c, 0x5f, 0x08,
        0x26, 0x7c, 0x5f, 0x48,
        0x27, 0x0d, 0x7f, 0x88,
        0x27, 0x0d, 0x7f, 0xc8,
        0x64, 0x7c, 0x01, 0xc8,
        0x64, 0x7c, 0x01, 0x88,
        0x64, 0x7c, 0x01, 0x08,
        0x64, 0x7c, 0x01, 0x48,
        0x22, 0x18, 0x21, 0xc8,
        0x22, 0x18, 0x21, 0x88,
        // Load-acquire/Store-release non-exclusive
        0xe4, 0xff, 0xdf, 0x88,
        0xe4, 0xff, 0xdf, 0xc8,
        0xe4, 0xff, 0xdf, 0x08,
        0xe4, 0xff, 0xdf, 0x48,
        0xc3, 0xfc, 0x9f, 0x88,
        0xc3, 0xfc, 0x9f, 0xc8,
        0xc3, 0xfc, 0x9f, 0x08,
        0xc3, 0xfc, 0x9f, 0x48,
        // Load-acquire/Store-release exclusive
        0x82, 0xfc, 0x5f, 0x88,
        0x82, 0xfc, 0x5f, 0xc8,
        0x82, 0xfc, 0x5f, 0x08,
        0x82, 0xfc, 0x5f, 0x48,
        0x22, 0x98, 0x7f, 0x88,
        0x22, 0x98, 0x7f, 0xc8,
        0x27, 0xfc, 0x08, 0xc8,
        0x27, 0xfc, 0x08, 0x88,
        0x27, 0xfc, 0x08, 0x08,
        0x27, 0xfc, 0x08, 0x48,
        0x22, 0x98, 0x21, 0xc8,
        0x22, 0x98, 0x21, 0x88,
        // Load/Store with explicit LSL values
        0x20, 0x78, 0xa0, 0xb8,
        0x20, 0x78, 0x60, 0xf8,
        0x20, 0x78, 0x20, 0xf8,
        0x20, 0x78, 0x60, 0xb8,
        0x20, 0x78, 0x20, 0xb8,
        0x20, 0x78, 0xe0, 0x3c,
        0x20, 0x78, 0xa0, 0x3c,
        0x20, 0x78, 0x60, 0xfc,
        0x20, 0x78, 0x20, 0xfc,
        0x20, 0x78, 0x60, 0xbc,
        0x20, 0x78, 0x20, 0xbc,
        0x20, 0x78, 0x60, 0x7c,
        0x20, 0x78, 0x60, 0x3c,
        0x20, 0x78, 0x60, 0x38,
        0x20, 0x78, 0x20, 0x38,
        0x20, 0x78, 0xe0, 0x38,
        0x20, 0x78, 0x60, 0x78,
        0x20, 0x78, 0x20, 0x78,
        0x20, 0x78, 0xe0, 0x78,
        0x20, 0x78, 0xa0, 0x38,
        0x20, 0x78, 0xa0, 0x78,
    },
        \\ldr w5, [x4, #20]
        \\ldr x4, [x3]
        \\ldr x2, [sp, #32]
        \\ldr b5, [sp, #1]
        \\ldr h6, [sp, #2]
        \\ldr s7, [sp, #4]
        \\ldr d8, [sp, #8]
        \\ldr q9, [sp, #16]
        \\ldrb w4, [x3]
        \\ldrsw x0, [x1, x0, lsl #2]
        \\ldrb w5, [x4, #20]
        \\ldrsb w9, [x3]
        \\ldrsb x2, [sp, #128]
        \\ldrh w2, [sp, #32]
        \\ldrsh w3, [sp, #32]
        \\ldrsh x5, [x9, #24]
        \\ldrsw x9, [sp, #512]
        \\prfm pldl3strm, [sp, #32]
        \\prfm pldl1keep, [x2]
        \\prfm pldl1strm, [x2]
        \\prfm pldl2keep, [x2]
        \\prfm pldl2strm, [x2]
        \\prfm pldl3keep, [x2]
        \\prfm pldl3strm, [x2]
        \\prfm pstl1keep, [x2]
        \\prfm pstl1strm, [x2]
        \\prfm pstl2keep, [x2]
        \\prfm pstl2strm, [x2]
        \\prfm pstl3keep, [x2]
        \\prfm pstl3strm, [x2]
        \\str x4, [x3]
        \\str x2, [sp, #32]
        \\str w5, [x4, #20]
        \\str b5, [sp, #1]
        \\str h6, [sp, #2]
        \\str s7, [sp, #4]
        \\str d8, [sp, #8]
        \\str q9, [sp, #16]
        \\strb w4, [x3]
        \\strb w5, [x4, #20]
        \\strh w2, [sp, #32]
        \\strb w0, [x0, x0, sxtx]
        \\strb w0, [x0, w0, uxtw]
        \\ldur w2, [x3]
        \\ldur w2, [sp, #24]
        \\ldur x2, [x3]
        \\ldur x2, [sp, #24]
        \\ldur b5, [sp, #1]
        \\ldur h6, [sp, #2]
        \\ldur s7, [sp, #4]
        \\ldur d8, [sp, #8]
        \\ldur q9, [sp, #16]
        \\ldursb w9, [x3]
        \\ldursb x2, [sp, #128]
        \\ldursh w3, [sp, #32]
        \\ldursh x5, [x9, #24]
        \\ldursw x9, [sp, #-128]
        \\stur w4, [x3]
        \\stur w2, [sp, #32]
        \\stur x4, [x3]
        \\stur x2, [sp, #32]
        \\stur w5, [x4, #20]
        \\stur b5, [sp, #1]
        \\stur h6, [sp, #2]
        \\stur s7, [sp, #4]
        \\stur d8, [sp, #8]
        \\stur q9, [sp, #16]
        \\sturb w4, [x3]
        \\sturb w5, [x4, #20]
        \\sturh w2, [sp, #32]
        \\prfum pldl3strm, [sp, #32]
        \\ldtr w3, [x4, #16]
        \\ldtr x3, [x4, #16]
        \\ldtrb w3, [x4, #16]
        \\ldtrsb w9, [x3]
        \\ldtrsb x2, [sp, #128]
        \\ldtrh w3, [x4, #16]
        \\ldtrsh w3, [sp, #32]
        \\ldtrsh x5, [x9, #24]
        \\ldtrsw x9, [sp, #-128]
        \\sttr w5, [x4, #20]
        \\sttr x4, [x3]
        \\sttr x2, [sp, #32]
        \\sttrb w4, [x3]
        \\sttrb w5, [x4, #20]
        \\sttrh w2, [sp, #32]
        \\ldr x29, [x7, #8]!
        \\ldr x30, [x7, #8]!
        \\ldr b5, [x0, #1]!
        \\ldr h6, [x0, #2]!
        \\ldr s7, [x0, #4]!
        \\ldr d8, [x0, #8]!
        \\ldr q9, [x0, #16]!
        \\str x30, [x7, #-8]!
        \\str x29, [x7, #-8]!
        \\str b5, [x0, #-1]!
        \\str h6, [x0, #-2]!
        \\str s7, [x0, #-4]!
        \\str d8, [x0, #-8]!
        \\str q9, [x0, #-16]!
        \\str x30, [x7], #-8
        \\str x29, [x7], #-8
        \\str b5, [x0], #-1
        \\str h6, [x0], #-2
        \\str s7, [x0], #-4
        \\str d8, [x0], #-8
        \\str q9, [x0], #-16
        \\ldr x29, [x7], #8
        \\ldr x30, [x7], #8
        \\ldr b5, [x0], #1
        \\ldr h6, [x0], #2
        \\ldr s7, [x0], #4
        \\ldr d8, [x0], #8
        \\ldr q9, [x0], #16
        \\ldp w3, w2, [x15, #16]
        \\ldp x4, x9, [sp, #-16]
        \\ldpsw x2, x3, [x14, #16]
        \\ldpsw x2, x3, [sp, #-16]
        \\ldp s10, s1, [x2, #64]
        \\ldp d10, d1, [x2]
        \\stp w3, w2, [x15, #16]
        \\stp x4, x9, [sp, #-16]
        \\stp s10, s1, [x2, #64]
        \\stp d10, d1, [x2]
        \\ldp w3, w2, [x15, #16]!
        \\ldp x4, x9, [sp, #-16]!
        \\ldpsw x2, x3, [x14, #16]!
        \\ldpsw x2, x3, [sp, #-16]!
        \\ldp s10, s1, [x2, #64]!
        \\ldp d10, d1, [x2, #16]!
        \\stp w3, w2, [x15, #16]!
        \\stp x4, x9, [sp, #-16]!
        \\stp s10, s1, [x2, #64]!
        \\stp d10, d1, [x2, #16]!
        \\ldp w3, w2, [x15], #16
        \\ldp x4, x9, [sp], #-16
        \\ldpsw x2, x3, [x14], #16
        \\ldpsw x2, x3, [sp], #-16
        \\ldp s10, s1, [x2], #64
        \\ldp d10, d1, [x2], #16
        \\stp w3, w2, [x15], #16
        \\stp x4, x9, [sp], #-16
        \\stp s10, s1, [x2], #64
        \\stp d10, d1, [x2], #16
        \\ldnp w3, w2, [x15, #16]
        \\ldnp x4, x9, [sp, #-16]
        \\ldnp s10, s1, [x2, #64]
        \\ldnp d10, d1, [x2]
        \\stnp w3, w2, [x15, #16]
        \\stnp x4, x9, [sp, #-16]
        \\stnp s10, s1, [x2, #64]
        \\stnp d10, d1, [x2]
        \\ldr w0, [x0, x0]
        \\ldr w0, [x0, x0, lsl #2]
        \\ldr x0, [x0, x0]
        \\ldr x0, [x0, x0, lsl #3]
        \\ldr x0, [x0, x0, sxtx]
        \\ldr b1, [x1, x2]
        \\ldr b1, [x1, x2, lsl #0]
        \\ldr h1, [x1, x2]
        \\ldr h1, [x1, x2, lsl #1]
        \\ldr s1, [x1, x2]
        \\ldr s1, [x1, x2, lsl #2]
        \\ldr d1, [x1, x2]
        \\ldr d1, [x1, x2, lsl #3]
        \\ldr q1, [x1, x2]
        \\ldr q1, [x1, x2, lsl #4]
        \\str h0, [x0, w0, uxtw]
        \\str d1, [sp, x3]
        \\str d1, [sp, w3, uxtw #3]
        \\str q1, [sp, x3]
        \\str q1, [sp, w3, uxtw #4]
        \\ldxrb w6, [x1]
        \\ldxrh w6, [x1]
        \\ldxp w7, w3, [x9]
        \\ldxp x7, x3, [x9]
        \\stxr w1, x4, [x3]
        \\stxr w1, w4, [x3]
        \\stxrb w1, w4, [x3]
        \\stxrh w1, w4, [x3]
        \\stxp w1, x2, x6, [x1]
        \\stxp w1, w2, w6, [x1]
        \\ldar w4, [sp]
        \\ldar x4, [sp]
        \\ldarb w4, [sp]
        \\ldarh w4, [sp]
        \\stlr w3, [x6]
        \\stlr x3, [x6]
        \\stlrb w3, [x6]
        \\stlrh w3, [x6]
        \\ldaxr w2, [x4]
        \\ldaxr x2, [x4]
        \\ldaxrb w2, [x4]
        \\ldaxrh w2, [x4]
        \\ldaxp w2, w6, [x1]
        \\ldaxp x2, x6, [x1]
        \\stlxr w8, x7, [x1]
        \\stlxr w8, w7, [x1]
        \\stlxrb w8, w7, [x1]
        \\stlxrh w8, w7, [x1]
        \\stlxp w1, x2, x6, [x1]
        \\stlxp w1, w2, w6, [x1]
        \\ldrsw x0, [x1, x0, lsl #2]
        \\ldr x0, [x1, x0, lsl #3]
        \\str x0, [x1, x0, lsl #3]
        \\ldr w0, [x1, x0, lsl #2]
        \\str w0, [x1, x0, lsl #2]
        \\ldr q0, [x1, x0, lsl #4]
        \\str q0, [x1, x0, lsl #4]
        \\ldr d0, [x1, x0, lsl #3]
        \\str d0, [x1, x0, lsl #3]
        \\ldr s0, [x1, x0, lsl #2]
        \\str s0, [x1, x0, lsl #2]
        \\ldr h0, [x1, x0, lsl #1]
        \\ldr b0, [x1, x0, lsl #0]
        \\ldrb w0, [x1, x0, lsl #0]
        \\strb w0, [x1, x0, lsl #0]
        \\ldrsb w0, [x1, x0, lsl #0]
        \\ldrh w0, [x1, x0, lsl #1]
        \\strh w0, [x1, x0, lsl #1]
        \\ldrsh w0, [x1, x0, lsl #1]
        \\ldrsb x0, [x1, x0, lsl #0]
        \\ldrsh x0, [x1, x0, lsl #1]
        \\
    );
}

test "arm64 non apple fmov" {
    if (true) return error.SkipZigTest;
}

test "arm64 scalar fp" {
    if (true) return error.SkipZigTest;
}

test "arm64 system" {
    try doTheTest(&.{
        // Hint encodings
        0x1f, 0x20, 0x03, 0xd5,
        0x9f, 0x20, 0x03, 0xd5,
        0xbf, 0x20, 0x03, 0xd5,
        0x5f, 0x20, 0x03, 0xd5,
        0x7f, 0x20, 0x03, 0xd5,
        0x3f, 0x20, 0x03, 0xd5,
        // Single-immediate operand instructions
        0x5f, 0x3a, 0x03, 0xd5,
        0xdf, 0x3f, 0x03, 0xd5,
        0xdf, 0x31, 0x03, 0xd5,
        0xbf, 0x33, 0x03, 0xd5,
        0x9f, 0x37, 0x03, 0xd5,
        0x3f, 0x76, 0x08, 0xd5,
        // Generic system instructions
        0xff, 0x05, 0x0a, 0xd5,
        0xe7, 0x6a, 0x0f, 0xd5,
        0xf4, 0x3f, 0x2e, 0xd5,
        0xbf, 0x40, 0x00, 0xd5,
        0x00, 0xb0, 0x18, 0xd5,
        0x00, 0xb0, 0x38, 0xd5,
        0x40, 0xc0, 0x1e, 0xd5,
        0x40, 0xc0, 0x1c, 0xd5,
        0x40, 0xc0, 0x18, 0xd5,
    },
        \\nop
        \\sev
        \\sevl
        \\wfe
        \\wfi
        \\yield
        \\clrex #10
        \\isb
        \\isb #1
        \\dmb osh
        \\dsb nsh
        \\dc ivac
        \\sys #2, c0, c5, #7
        \\sys #7, c6, c10, #7, x7
        \\sysl x20, #6, c3, c15, #7
        \\msr SPSel, #0
        \\msr S3_0_C11_C0_0, x0
        \\mrs x0, S3_0_C11_C0_0
        \\msr RMR_EL3, x0
        \\msr RMR_EL2, x0
        \\msr RMR_EL1, x0
        \\
    );
}

test "armv8.1a atomic" {
    if (true) return error.SkipZigTest;
}

test "armv8.1a lor" {
    try doTheTest(&.{
        0x20, 0x7c, 0xdf, 0x08,
        0x20, 0x7c, 0xdf, 0x48,
        0x20, 0x7c, 0xdf, 0x88,
        0x20, 0x7c, 0xdf, 0xc8,
        0x20, 0x7c, 0x9f, 0x08,
        0x20, 0x7c, 0x9f, 0x48,
        0x20, 0x7c, 0x9f, 0x88,
        0x20, 0x7c, 0x9f, 0xc8,
        0x00, 0xa4, 0x18, 0xd5,
        0x20, 0xa4, 0x18, 0xd5,
        0x40, 0xa4, 0x18, 0xd5,
        0x60, 0xa4, 0x18, 0xd5,
        0xe0, 0xa4, 0x18, 0xd5,
        0x00, 0xa4, 0x38, 0xd5,
        0x20, 0xa4, 0x38, 0xd5,
        0x40, 0xa4, 0x38, 0xd5,
        0x60, 0xa4, 0x38, 0xd5,
        0xe0, 0xa4, 0x38, 0xd5,
    },
        \\ldlarb w0, [x1]
        \\ldlarh w0, [x1]
        \\ldlar w0, [x1]
        \\ldlar x0, [x1]
        \\stllrb w0, [x1]
        \\stllrh w0, [x1]
        \\stllr w0, [x1]
        \\stllr x0, [x1]
        \\msr LORSA_EL1, x0
        \\msr LOREA_EL1, x0
        \\msr LORN_EL1, x0
        \\msr LORC_EL1, x0
        \\msr LORID_EL1, x0
        \\mrs x0, LORSA_EL1
        \\mrs x0, LOREA_EL1
        \\mrs x0, LORN_EL1
        \\mrs x0, LORC_EL1
        \\mrs x0, LORID_EL1
        \\
    );
}

test "armv8.1a pan" {
    if (true) return error.SkipZigTest;
}

test "armv8.1a rdma" {
    if (true) return error.SkipZigTest;
}

test "armv8.1a vhe" {
    if (true) return error.SkipZigTest;
}

test "armv8.2a at" {
    if (true) return error.SkipZigTest;
}

test "armv8.2a crypto" {
    if (true) return error.SkipZigTest;
}

test "armv8.2a dotprod" {
    if (true) return error.SkipZigTest;
}

test "armv8.2a mmfr2" {
    if (true) return error.SkipZigTest;
}

test "armv8.2a persistent memory" {
    if (true) return error.SkipZigTest;
}

test "armv8.2a statistical profiling" {
    if (true) return error.SkipZigTest;
}

test "armv8.2a uao" {
    if (true) return error.SkipZigTest;
}

test "armv8.3a complex" {
    if (true) return error.SkipZigTest;
}

test "armv8.3a ID_ISAR6_EL1" {
    if (true) return error.SkipZigTest;
}

test "armv8.3a js" {
    if (true) return error.SkipZigTest;
}

test "armv8.3a rcpc" {
    if (true) return error.SkipZigTest;
}

test "armv8.3a signed pointer" {
    if (true) return error.SkipZigTest;
}

test "armv8.4a actmon" {
    if (true) return error.SkipZigTest;
}

test "armv8.4a dit" {
    if (true) return error.SkipZigTest;
}

test "armv8.4a flag" {
    if (true) return error.SkipZigTest;
}

test "armv8.4a ldst" {
    try doTheTest(&.{
        0x41, 0x01, 0x00, 0x19,
        0x41, 0x01, 0x10, 0x19,
        0x62, 0xf1, 0x0f, 0x19,
        0xe3, 0xd3, 0x1f, 0x19,
        0x84, 0x01, 0x40, 0x19,
        0x84, 0x01, 0x50, 0x19,
        0xa5, 0xf1, 0x4f, 0x19,
        0xe6, 0xe3, 0x5f, 0x19,
        0xc7, 0x01, 0xc0, 0x19,
        0xc7, 0x01, 0xd0, 0x19,
        0xe8, 0xf1, 0xcf, 0x19,
        0xe9, 0xf3, 0xdf, 0x19,
        0x00, 0x02, 0x80, 0x19,
        0x00, 0x02, 0x90, 0x19,
        0x21, 0xf2, 0x8f, 0x19,
        0xe2, 0x03, 0x80, 0x19,
        0x4a, 0x02, 0x00, 0x59,
        0x4a, 0x02, 0x10, 0x59,
        0x6b, 0xf2, 0x0f, 0x59,
        0xec, 0x13, 0x00, 0x59,
        0x8d, 0x02, 0x40, 0x59,
        0x8d, 0x02, 0x50, 0x59,
        0xae, 0xf2, 0x4f, 0x59,
        0xef, 0x23, 0x40, 0x59,
        0xd0, 0x02, 0xc0, 0x59,
        0xd0, 0x02, 0xd0, 0x59,
        0xf1, 0xf2, 0xcf, 0x59,
        0xf2, 0x33, 0xc0, 0x59,
        0x03, 0x03, 0x80, 0x59,
        0x03, 0x03, 0x90, 0x59,
        0x24, 0xf3, 0x8f, 0x59,
        0xe5, 0x43, 0x80, 0x59,
        0x53, 0x03, 0x00, 0x99,
        0x53, 0x03, 0x10, 0x99,
        0x74, 0xf3, 0x0f, 0x99,
        0xf5, 0x53, 0x00, 0x99,
        0x96, 0x03, 0x40, 0x99,
        0x96, 0x03, 0x50, 0x99,
        0xb7, 0xf3, 0x4f, 0x99,
        0xf8, 0x63, 0x40, 0x99,
        0xc6, 0x03, 0x80, 0x99,
        0xc6, 0x03, 0x90, 0x99,
        0x07, 0xf0, 0x8f, 0x99,
        0xe8, 0x73, 0x80, 0x99,
        0x29, 0x00, 0x00, 0xd9,
        0x29, 0x00, 0x10, 0xd9,
        0x4a, 0xf0, 0x0f, 0xd9,
        0xeb, 0x83, 0x00, 0xd9,
        0x6c, 0x00, 0x40, 0xd9,
        0x6c, 0x00, 0x50, 0xd9,
        0x8d, 0xf0, 0x4f, 0xd9,
        0xee, 0x93, 0x40, 0xd9,
    },
        \\stlurb w1, [x10]
        \\stlurb w1, [x10, #-256]
        \\stlurb w2, [x11, #255]
        \\stlurb w3, [sp, #-3]
        \\ldapurb w4, [x12]
        \\ldapurb w4, [x12, #-256]
        \\ldapurb w5, [x13, #255]
        \\ldapurb w6, [sp, #-2]
        \\ldapursb w7, [x14]
        \\ldapursb w7, [x14, #-256]
        \\ldapursb w8, [x15, #255]
        \\ldapursb w9, [sp, #-1]
        \\ldapursb x0, [x16]
        \\ldapursb x0, [x16, #-256]
        \\ldapursb x1, [x17, #255]
        \\ldapursb x2, [sp]
        \\stlurh w10, [x18]
        \\stlurh w10, [x18, #-256]
        \\stlurh w11, [x19, #255]
        \\stlurh w12, [sp, #1]
        \\ldapurh w13, [x20]
        \\ldapurh w13, [x20, #-256]
        \\ldapurh w14, [x21, #255]
        \\ldapurh w15, [sp, #2]
        \\ldapursh w16, [x22]
        \\ldapursh w16, [x22, #-256]
        \\ldapursh w17, [x23, #255]
        \\ldapursh w18, [sp, #3]
        \\ldapursh x3, [x24]
        \\ldapursh x3, [x24, #-256]
        \\ldapursh x4, [x25, #255]
        \\ldapursh x5, [sp, #4]
        \\stlur w19, [x26]
        \\stlur w19, [x26, #-256]
        \\stlur w20, [x27, #255]
        \\stlur w21, [sp, #5]
        \\ldapur w22, [x28]
        \\ldapur w22, [x28, #-256]
        \\ldapur w23, [x29, #255]
        \\ldapur w24, [sp, #6]
        \\ldapursw x6, [x30]
        \\ldapursw x6, [x30, #-256]
        \\ldapursw x7, [x0, #255]
        \\ldapursw x8, [sp, #7]
        \\stlur x9, [x1]
        \\stlur x9, [x1, #-256]
        \\stlur x10, [x2, #255]
        \\stlur x11, [sp, #8]
        \\ldapur x12, [x3]
        \\ldapur x12, [x3, #-256]
        \\ldapur x13, [x4, #255]
        \\ldapur x14, [sp, #9]
        \\
        // TODO: v8.4 only, should have a way to tell user that these are not valid instructions if the architecture is insufficient
    );
}

test "armv8.4a mpam" {
    if (true) return error.SkipZigTest;
}

test "armv8.4a pmu" {
    if (true) return error.SkipZigTest;
}

test "armv8.4a ras" {
    if (true) return error.SkipZigTest;
}

test "armv8.4a tlb" {
    if (true) return error.SkipZigTest;
}

test "armv8.4a trace" {
    if (true) return error.SkipZigTest;
}

test "armv8.4a virt" {
    if (true) return error.SkipZigTest;
}

test "armv8.4a vncr" {
    if (true) return error.SkipZigTest;
}

test "armv8.5a bti" {
    if (true) return error.SkipZigTest;
}

test "armv8.5a dataproc" {
    if (true) return error.SkipZigTest;
}

test "armv8.5a mte" {
    if (true) return error.SkipZigTest;
}

test "armv8.5a persistent memory" {
    if (true) return error.SkipZigTest;
}

test "armv8.5a predres" {
    if (true) return error.SkipZigTest;
}

test "armv8.5a rand" {
    if (true) return error.SkipZigTest;
}

test "armv8.5a sb" {
    if (true) return error.SkipZigTest;
}

test "armv8.5a specrestrict" {
    if (true) return error.SkipZigTest;
}

test "armv8.5a ssbs" {
    if (true) return error.SkipZigTest;
}

test "armv8.6a amvs.s" {
    if (true) return error.SkipZigTest;
}

test "armv8.6a bf16" {
    if (true) return error.SkipZigTest;
}

test "armv8.6a ecv" {
    if (true) return error.SkipZigTest;
}

test "armv8.6a fgt" {
    if (true) return error.SkipZigTest;
}

test "armv8.6a simd matmul" {
    if (true) return error.SkipZigTest;
}

test "armv8.7a hcx" {
    if (true) return error.SkipZigTest;
}

test "armv8.7a ls64" {
    if (true) return error.SkipZigTest;
}

test "armv8.7a wfxt" {
    if (true) return error.SkipZigTest;
}

test "armv8.7a xs" {
    if (true) return error.SkipZigTest;
}

test "armv8a fpmul err" {
    if (true) return error.SkipZigTest;
}

test "armv8a fpmul" {
    if (true) return error.SkipZigTest;
}

test "armv9a rme" {
    if (true) return error.SkipZigTest;
}

test "basic a64 instructions" {
    try doTheTest(&.{
        // Add/sub (immediate)
        0xa4, 0x00, 0x00, 0x11,
        0x62, 0xfc, 0x3f, 0x11,
        0xbe, 0x07, 0x40, 0x11,
        0xad, 0xfc, 0x7f, 0x11,
        0xe5, 0x98, 0x19, 0x91,
        0xf4, 0x87, 0x0c, 0x11,
        0xff, 0x43, 0x11, 0x11,
        0xdf, 0xd3, 0x3f, 0x11,
        0x00, 0x8f, 0x04, 0x91,
        0x03, 0xff, 0x7f, 0x91,
        0xe8, 0xcb, 0x10, 0x91,
        0xbf, 0xa3, 0x3b, 0x91,
        0xe0, 0xb7, 0x3f, 0x51,
        0x84, 0x8a, 0x48, 0x51,
        0xff, 0x83, 0x04, 0xd1,
        0x7f, 0x42, 0x00, 0x51,
        0xed, 0x8e, 0x44, 0x31,
        0x5f, 0xfc, 0x3f, 0x31,
        0xf4, 0x03, 0x00, 0x31,
        0x7f, 0x04, 0x40, 0xb1,
        0xff, 0x53, 0x40, 0xf1,
        0xdf, 0xff, 0x3f, 0xf1,
        0xe4, 0xbb, 0x3b, 0xf1,
        0x7f, 0x8c, 0x44, 0x31,
        0xff, 0x57, 0x15, 0x31,
        0xff, 0x13, 0x51, 0xb1,
        0xdf, 0x03, 0x00, 0x91,
        0x9f, 0x02, 0x00, 0x11,
        0xeb, 0x03, 0x00, 0x91,
        0xf8, 0x03, 0x00, 0x11,
        // Add-subtract (shifted register)
        0xa3, 0x00, 0x07, 0x0b,
        0x7f, 0x00, 0x05, 0x0b,
        0xf4, 0x03, 0x04, 0x0b,
        0xc4, 0x00, 0x1f, 0x0b,
        0xab, 0x01, 0x0f, 0x0b,
        0x69, 0x28, 0x1f, 0x0b,
        0xb1, 0x7f, 0x14, 0x0b,
        0xd5, 0x02, 0x57, 0x0b,
        0x38, 0x4b, 0x5a, 0x0b,
        0x9b, 0x7f, 0x5d, 0x0b,
        0x62, 0x00, 0x84, 0x0b,
        0xc5, 0x54, 0x87, 0x0b,
        0x28, 0x7d, 0x8a, 0x0b,
        0xa3, 0x00, 0x07, 0x8b,
        0x7f, 0x00, 0x05, 0x8b,
        0xf4, 0x03, 0x04, 0x8b,
        0xc4, 0x00, 0x1f, 0x8b,
        0xab, 0x01, 0x0f, 0x8b,
        0x69, 0x28, 0x1f, 0x8b,
        0xb1, 0xff, 0x14, 0x8b,
        0xd5, 0x02, 0x57, 0x8b,
        0x38, 0x4b, 0x5a, 0x8b,
        0x9b, 0xff, 0x5d, 0x8b,
        0x62, 0x00, 0x84, 0x8b,
        0xc5, 0x54, 0x87, 0x8b,
        0x28, 0xfd, 0x8a, 0x8b,
        0xa3, 0x00, 0x07, 0x2b,
        0x7f, 0x00, 0x05, 0x2b,
        0xf4, 0x03, 0x04, 0x2b,
        0xc4, 0x00, 0x1f, 0x2b,
        0xab, 0x01, 0x0f, 0x2b,
        0x69, 0x28, 0x1f, 0x2b,
        0xb1, 0x7f, 0x14, 0x2b,
        0xd5, 0x02, 0x57, 0x2b,
        0x38, 0x4b, 0x5a, 0x2b,
        0x9b, 0x7f, 0x5d, 0x2b,
        0x62, 0x00, 0x84, 0x2b,
        0xc5, 0x54, 0x87, 0x2b,
        0x28, 0x7d, 0x8a, 0x2b,
        0xa3, 0x00, 0x07, 0xab,
        0x7f, 0x00, 0x05, 0xab,
        0xf4, 0x03, 0x04, 0xab,
        0xc4, 0x00, 0x1f, 0xab,
        0xab, 0x01, 0x0f, 0xab,
        0x69, 0x28, 0x1f, 0xab,
        0xb1, 0xff, 0x14, 0xab,
        0xd5, 0x02, 0x57, 0xab,
        0x38, 0x4b, 0x5a, 0xab,
        0x9b, 0xff, 0x5d, 0xab,
        0x62, 0x00, 0x84, 0xab,
        0xc5, 0x54, 0x87, 0xab,
        0x28, 0xfd, 0x8a, 0xab,
        0xa3, 0x00, 0x07, 0x4b,
        0x7f, 0x00, 0x05, 0x4b,
        0xf4, 0x03, 0x04, 0x4b,
        0xc4, 0x00, 0x1f, 0x4b,
        0xab, 0x01, 0x0f, 0x4b,
        0x69, 0x28, 0x1f, 0x4b,
        0xb1, 0x7f, 0x14, 0x4b,
        0xd5, 0x02, 0x57, 0x4b,
        0x38, 0x4b, 0x5a, 0x4b,
        0x9b, 0x7f, 0x5d, 0x4b,
        0x62, 0x00, 0x84, 0x4b,
        0xc5, 0x54, 0x87, 0x4b,
        0x28, 0x7d, 0x8a, 0x4b,
        0xa3, 0x00, 0x07, 0xcb,
        0x7f, 0x00, 0x05, 0xcb,
        0xf4, 0x03, 0x04, 0xcb,
        0xc4, 0x00, 0x1f, 0xcb,
        0xab, 0x01, 0x0f, 0xcb,
        0x69, 0x28, 0x1f, 0xcb,
        0xb1, 0xff, 0x14, 0xcb,
        0xd5, 0x02, 0x57, 0xcb,
        0x38, 0x4b, 0x5a, 0xcb,
        0x9b, 0xff, 0x5d, 0xcb,
        0x62, 0x00, 0x84, 0xcb,
        0xc5, 0x54, 0x87, 0xcb,
        0x28, 0xfd, 0x8a, 0xcb,
        0xa3, 0x00, 0x07, 0x6b,
        0x7f, 0x00, 0x05, 0x6b,
        0xf4, 0x03, 0x04, 0x6b,
        0xc4, 0x00, 0x1f, 0x6b,
        0xab, 0x01, 0x0f, 0x6b,
        0x69, 0x28, 0x1f, 0x6b,
        0xb1, 0x7f, 0x14, 0x6b,
        0xd5, 0x02, 0x57, 0x6b,
        0x38, 0x4b, 0x5a, 0x6b,
        0x9b, 0x7f, 0x5d, 0x6b,
        0x62, 0x00, 0x84, 0x6b,
        0xc5, 0x54, 0x87, 0x6b,
        0x28, 0x7d, 0x8a, 0x6b,
        0xa3, 0x00, 0x07, 0xeb,
        0x7f, 0x00, 0x05, 0xeb,
        0xf4, 0x03, 0x04, 0xeb,
        0xc4, 0x00, 0x1f, 0xeb,
        0xab, 0x01, 0x0f, 0xeb,
        0x69, 0x28, 0x1f, 0xeb,
        0xb1, 0xff, 0x14, 0xeb,
        0xd5, 0x02, 0x57, 0xeb,
        0x38, 0x4b, 0x5a, 0xeb,
        0x9b, 0xff, 0x5d, 0xeb,
        0x62, 0x00, 0x84, 0xeb,
        0xc5, 0x54, 0x87, 0xeb,
        0x28, 0xfd, 0x8a, 0xeb,
        0x1f, 0x00, 0x03, 0x2b,
        0xff, 0x03, 0x04, 0x2b,
        0xbf, 0x00, 0x1f, 0x2b,
        0xdf, 0x00, 0x07, 0x2b,
        0x1f, 0x3d, 0x09, 0x2b,
        0x5f, 0x7d, 0x0b, 0x2b,
        0x9f, 0x01, 0x4d, 0x2b,
        0xdf, 0x55, 0x4f, 0x2b,
        0x1f, 0x7e, 0x51, 0x2b,
        0x5f, 0x02, 0x93, 0x2b,
        0x9f, 0x5a, 0x95, 0x2b,
        0xdf, 0x7e, 0x97, 0x2b,
        0x1f, 0x00, 0x03, 0xab,
        0xff, 0x03, 0x04, 0xab,
        0xbf, 0x00, 0x1f, 0xab,
        0xdf, 0x00, 0x07, 0xab,
        0x1f, 0x3d, 0x09, 0xab,
        0x5f, 0xfd, 0x0b, 0xab,
        0x9f, 0x01, 0x4d, 0xab,
        0xdf, 0xa5, 0x4f, 0xab,
        0x1f, 0xfe, 0x51, 0xab,
        0x5f, 0x02, 0x93, 0xab,
        0x9f, 0xde, 0x95, 0xab,
        0xdf, 0xfe, 0x97, 0xab,
        0x1f, 0x00, 0x03, 0x6b,
        0xff, 0x03, 0x04, 0x6b,
        0xbf, 0x00, 0x1f, 0x6b,
        0xdf, 0x00, 0x07, 0x6b,
        0x1f, 0x3d, 0x09, 0x6b,
        0x5f, 0x7d, 0x0b, 0x6b,
        0x9f, 0x01, 0x4d, 0x6b,
        0xdf, 0x55, 0x4f, 0x6b,
        0x1f, 0x7e, 0x51, 0x6b,
        0x5f, 0x02, 0x93, 0x6b,
        0x9f, 0x5a, 0x95, 0x6b,
        0xdf, 0x7e, 0x97, 0x6b,
        0x1f, 0x00, 0x03, 0xeb,
        0xff, 0x03, 0x04, 0xeb,
        0xbf, 0x00, 0x1f, 0xeb,
        0xdf, 0x00, 0x07, 0xeb,
        0x1f, 0x3d, 0x09, 0xeb,
        0x5f, 0xfd, 0x0b, 0xeb,
        0x9f, 0x01, 0x4d, 0xeb,
        0xdf, 0xa5, 0x4f, 0xeb,
        0x1f, 0xfe, 0x51, 0xeb,
        0x5f, 0x02, 0x93, 0xeb,
        0x9f, 0xde, 0x95, 0xeb,
        0xdf, 0xfe, 0x97, 0xeb,
        0xfd, 0x03, 0x1e, 0x4b,
        0xfe, 0x03, 0x1f, 0x4b,
        0xff, 0x03, 0x00, 0x4b,
        0xfc, 0x03, 0x1b, 0x4b,
        0xfa, 0x77, 0x19, 0x4b,
        0xf8, 0x7f, 0x17, 0x4b,
        0xf6, 0x03, 0x55, 0x4b,
        0xf4, 0x07, 0x53, 0x4b,
        0xf2, 0x7f, 0x51, 0x4b,
        0xf0, 0x03, 0x8f, 0x4b,
        0xee, 0x33, 0x8d, 0x4b,
        0xec, 0x7f, 0x8b, 0x4b,
        0xfd, 0x03, 0x1e, 0xcb,
        0xfe, 0x03, 0x1f, 0xcb,
        0xff, 0x03, 0x00, 0xcb,
        0xfc, 0x03, 0x1b, 0xcb,
        0xfa, 0x77, 0x19, 0xcb,
        0xf8, 0x7f, 0x17, 0xcb,
        0xf6, 0x03, 0x55, 0xcb,
        0xf4, 0x07, 0x53, 0xcb,
        0xf2, 0x7f, 0x51, 0xcb,
        0xf0, 0x03, 0x8f, 0xcb,
        0xee, 0x33, 0x8d, 0xcb,
        0xec, 0x7f, 0x8b, 0xcb,
        0xfd, 0x03, 0x1e, 0x6b,
        0xfe, 0x03, 0x1f, 0x6b,
        0xff, 0x03, 0x00, 0x6b,
        0xfc, 0x03, 0x1b, 0x6b,
        0xfa, 0x77, 0x19, 0x6b,
        0xf8, 0x7f, 0x17, 0x6b,
        0xf6, 0x03, 0x55, 0x6b,
        0xf4, 0x07, 0x53, 0x6b,
        0xf2, 0x7f, 0x51, 0x6b,
        0xf0, 0x03, 0x8f, 0x6b,
        0xee, 0x33, 0x8d, 0x6b,
        0xec, 0x7f, 0x8b, 0x6b,
        0xfd, 0x03, 0x1e, 0xeb,
        0xfe, 0x03, 0x1f, 0xeb,
        0xff, 0x03, 0x00, 0xeb,
        0xfc, 0x03, 0x1b, 0xeb,
        0xfa, 0x77, 0x19, 0xeb,
        0xf8, 0x7f, 0x17, 0xeb,
        0xf6, 0x03, 0x55, 0xeb,
        0xf4, 0x07, 0x53, 0xeb,
        0xf2, 0x7f, 0x51, 0xeb,
        0xf0, 0x03, 0x8f, 0xeb,
        0xee, 0x33, 0x8d, 0xeb,
        0xec, 0x7f, 0x8b, 0xeb,
        // Add-subtract (shifted register)
        0x7d, 0x03, 0x19, 0x1a,
        0x7f, 0x00, 0x04, 0x1a,
        0xe9, 0x03, 0x0a, 0x1a,
        0x14, 0x00, 0x1f, 0x1a,
        0x7d, 0x03, 0x19, 0x9a,
        0x7f, 0x00, 0x04, 0x9a,
        0xe9, 0x03, 0x0a, 0x9a,
        0x14, 0x00, 0x1f, 0x9a,
        0x7d, 0x03, 0x19, 0x3a,
        0x7f, 0x00, 0x04, 0x3a,
        0xe9, 0x03, 0x0a, 0x3a,
        0x14, 0x00, 0x1f, 0x3a,
        0x7d, 0x03, 0x19, 0xba,
        0x7f, 0x00, 0x04, 0xba,
        0xe9, 0x03, 0x0a, 0xba,
        0x14, 0x00, 0x1f, 0xba,
        0x7d, 0x03, 0x19, 0x5a,
        0x7f, 0x00, 0x04, 0x5a,
        0xe9, 0x03, 0x0a, 0x5a,
        0x14, 0x00, 0x1f, 0x5a,
        0x7d, 0x03, 0x19, 0xda,
        0x7f, 0x00, 0x04, 0xda,
        0xe9, 0x03, 0x0a, 0xda,
        0x14, 0x00, 0x1f, 0xda,
        0x7d, 0x03, 0x19, 0x7a,
        0x7f, 0x00, 0x04, 0x7a,
        0xe9, 0x03, 0x0a, 0x7a,
        0x14, 0x00, 0x1f, 0x7a,
        0x7d, 0x03, 0x19, 0xfa,
        0x7f, 0x00, 0x04, 0xfa,
        0xe9, 0x03, 0x0a, 0xfa,
        0x14, 0x00, 0x1f, 0xfa,
        0xe3, 0x03, 0x0c, 0x5a,
        0xff, 0x03, 0x09, 0x5a,
        0xf7, 0x03, 0x1f, 0x5a,
        0xfd, 0x03, 0x1e, 0xda,
        0xff, 0x03, 0x00, 0xda,
        0xe0, 0x03, 0x1f, 0xda,
        0xe3, 0x03, 0x0c, 0x7a,
        0xff, 0x03, 0x09, 0x7a,
        0xf7, 0x03, 0x1f, 0x7a,
        0xfd, 0x03, 0x1e, 0xfa,
        0xff, 0x03, 0x00, 0xfa,
        0xe0, 0x03, 0x1f, 0xfa,
        // Compare and branch (immediate)
        0x41, 0x10, 0x43, 0x93,
        0x83, 0xfc, 0x7f, 0x93,
        0xff, 0x7f, 0x1f, 0x13,
        0x2c, 0x01, 0x00, 0x13,
        0xa4, 0x28, 0x4c, 0xd3,
        0x9f, 0x00, 0x40, 0xd3,
        0xe4, 0x17, 0x7f, 0xd3,
        0xc5, 0xfc, 0x4c, 0xd3,
        0xa4, 0x28, 0x4c, 0xb3,
        0x9f, 0x00, 0x40, 0xb3,
        0xe4, 0x17, 0x7f, 0xb3,
        0xc5, 0xfc, 0x4c, 0xb3,
        0x41, 0x1c, 0x00, 0x13,
        0x7f, 0x1c, 0x40, 0x93,
        0x49, 0x3d, 0x00, 0x13,
        0x20, 0x3c, 0x40, 0x93,
        0xc3, 0x7f, 0x40, 0x93,
        0x41, 0x1c, 0x00, 0x53,
        0x49, 0x3d, 0x00, 0x53,
        0xc3, 0x7f, 0x40, 0xd3,
        0x43, 0x7c, 0x00, 0x13,
        0x49, 0x7d, 0x1f, 0x13,
        0xb4, 0xfe, 0x7f, 0x93,
        0xe1, 0x7f, 0x03, 0x13,
        0x43, 0x7c, 0x00, 0x53,
        0x49, 0x7d, 0x1f, 0x53,
        0xb4, 0xfe, 0x7f, 0xd3,
        0xff, 0x7f, 0x03, 0x53,
        0x43, 0x7c, 0x00, 0x53,
        0x49, 0x01, 0x01, 0x53,
        0xb4, 0x02, 0x41, 0xd3,
        0xe1, 0x73, 0x1d, 0x53,
        0x49, 0x01, 0x00, 0x13,
        0x62, 0x00, 0x41, 0x93,
        0x93, 0xfe, 0x40, 0x93,
        0x49, 0xe9, 0x7b, 0x93,
        0x49, 0x7d, 0x00, 0x13,
        0x8b, 0x01, 0x01, 0x13,
        0xcd, 0x09, 0x03, 0x13,
        0xff, 0x2b, 0x76, 0x93,
        0x49, 0x01, 0x00, 0x13,
        0x62, 0xfc, 0x7f, 0x93,
        0x93, 0xfe, 0x40, 0x93,
        0x49, 0xfd, 0x45, 0x93,
        0x49, 0x7d, 0x00, 0x13,
        0x8b, 0x7d, 0x1f, 0x13,
        0xcd, 0x7d, 0x1d, 0x13,
        0xff, 0x53, 0x4a, 0x93,
        0x49, 0x01, 0x00, 0x33,
        0x62, 0x00, 0x41, 0xb3,
        0x93, 0xfe, 0x40, 0xb3,
        0x49, 0xe9, 0x7b, 0xb3,
        0x49, 0x7d, 0x00, 0x33,
        0x8b, 0x01, 0x01, 0x33,
        0xcd, 0x09, 0x03, 0x33,
        0xff, 0x2b, 0x76, 0xb3,
        0x49, 0x01, 0x00, 0x33,
        0x62, 0xfc, 0x7f, 0xb3,
        0x93, 0xfe, 0x40, 0xb3,
        0x49, 0xfd, 0x45, 0xb3,
        0x49, 0x7d, 0x00, 0x33,
        0x8b, 0x7d, 0x1f, 0x33,
        0xcd, 0x7d, 0x1d, 0x33,
        0xff, 0x53, 0x4a, 0xb3,
        0x49, 0x01, 0x00, 0x53,
        0x62, 0x00, 0x41, 0xd3,
        0x93, 0xfe, 0x40, 0xd3,
        0x49, 0xe9, 0x7b, 0xd3,
        0x49, 0x7d, 0x00, 0x53,
        0x8b, 0x01, 0x01, 0x53,
        0xcd, 0x09, 0x03, 0x53,
        0xff, 0x2b, 0x76, 0xd3,
        0x49, 0x01, 0x00, 0x53,
        0x62, 0xfc, 0x7f, 0xd3,
        0x93, 0xfe, 0x40, 0xd3,
        0x49, 0xfd, 0x45, 0xd3,
        0x49, 0x7d, 0x00, 0x53,
        0x8b, 0x7d, 0x1f, 0x53,
        0xcd, 0x7d, 0x1d, 0x53,
        0xff, 0x53, 0x4a, 0xd3,
        // Compare and branch (immediate)
        0x25, 0x00, 0x00, 0x34,
        0x05, 0x00, 0x00, 0xb4,
        0xe2, 0xff, 0xff, 0xb5,
        0xfa, 0xff, 0x7f, 0xb5,
        0x1f, 0x00, 0x00, 0x34,
        0x1f, 0x00, 0x00, 0xb5,
        // Conditional branch (immediate)
        0x21, 0x00, 0x00, 0x54,
        0xea, 0xff, 0x7f, 0x54,
        0xea, 0xff, 0xff, 0x54,
        // Conditional compare (immediate)
        0x20, 0x08, 0x5f, 0x7a,
        0x6f, 0x28, 0x40, 0x7a,
        0xed, 0x2b, 0x4f, 0x7a,
        0x20, 0xd9, 0x5f, 0xfa,
        0x6f, 0xc8, 0x40, 0xfa,
        0xe7, 0x1b, 0x45, 0xfa,
        0x20, 0x08, 0x5f, 0x3a,
        0x6f, 0x28, 0x40, 0x3a,
        0xed, 0x2b, 0x4f, 0x3a,
        0x20, 0xd9, 0x5f, 0xba,
        0x6f, 0xc8, 0x40, 0xba,
        0xe7, 0x1b, 0x45, 0xba,
        // Conditional compare (register)
        0x20, 0x00, 0x5f, 0x7a,
        0x6f, 0x20, 0x40, 0x7a,
        0xed, 0x23, 0x4f, 0x7a,
        0x20, 0xd1, 0x5f, 0xfa,
        0x6f, 0xc0, 0x40, 0xfa,
        0xe7, 0x13, 0x45, 0xfa,
        0x20, 0x00, 0x5f, 0x3a,
        0x6f, 0x20, 0x40, 0x3a,
        0xed, 0x23, 0x4f, 0x3a,
        0x20, 0xd1, 0x5f, 0xba,
        0x6f, 0xc0, 0x40, 0xba,
        0xe7, 0x13, 0x45, 0xba,
        // Conditional branch (immediate)
        0x01, 0x10, 0x93, 0x1a,
        0xbf, 0x00, 0x89, 0x1a,
        0xe9, 0xc3, 0x9e, 0x1a,
        0x81, 0x43, 0x9f, 0x1a,
        0xf3, 0xb2, 0x9d, 0x9a,
        0x7f, 0xa0, 0x84, 0x9a,
        0xe5, 0x23, 0x86, 0x9a,
        0x07, 0x31, 0x9f, 0x9a,
        0x01, 0x14, 0x93, 0x1a,
        0xbf, 0x04, 0x89, 0x1a,
        0xe9, 0xc7, 0x9e, 0x1a,
        0x81, 0x47, 0x9f, 0x1a,
        0xf3, 0xb6, 0x9d, 0x9a,
        0x7f, 0xa4, 0x84, 0x9a,
        0xe5, 0x27, 0x86, 0x9a,
        0x07, 0x35, 0x9f, 0x9a,
        0x01, 0x10, 0x93, 0x5a,
        0xbf, 0x00, 0x89, 0x5a,
        0xe9, 0xc3, 0x9e, 0x5a,
        0x81, 0x43, 0x9f, 0x5a,
        0xf3, 0xb2, 0x9d, 0xda,
        0x7f, 0xa0, 0x84, 0xda,
        0xe5, 0x23, 0x86, 0xda,
        0x07, 0x31, 0x9f, 0xda,
        0x01, 0x14, 0x93, 0x5a,
        0xbf, 0x04, 0x89, 0x5a,
        0xe9, 0xc7, 0x9e, 0x5a,
        0x81, 0x47, 0x9f, 0x5a,
        0xf3, 0xb6, 0x9d, 0xda,
        0x7f, 0xa4, 0x84, 0xda,
        0xe5, 0x27, 0x86, 0xda,
        0x07, 0x35, 0x9f, 0xda,
        0xe3, 0x17, 0x9f, 0x1a,
        0xe9, 0x47, 0x9f, 0x9a,
        0xf4, 0x03, 0x9f, 0x5a,
        0xfe, 0xb3, 0x9f, 0xda,
        0xe2, 0xe7, 0x9f, 0x1a,
        0xe3, 0xf3, 0x9f, 0xda,
        0xa3, 0xd4, 0x85, 0x1a,
        0x9f, 0xc4, 0x84, 0x1a,
        0xe9, 0xa7, 0x9f, 0x1a,
        0xa3, 0xd4, 0x85, 0x9a,
        0x9f, 0xc4, 0x84, 0x9a,
        0xe9, 0xa7, 0x9f, 0x9a,
        0xc5, 0xf4, 0x86, 0x1a,
        0x41, 0xe4, 0x82, 0x9a,
        0xa3, 0xd0, 0x85, 0x5a,
        0x9f, 0xc0, 0x84, 0x5a,
        0xe9, 0xa3, 0x9f, 0x5a,
        0xa3, 0xd0, 0x85, 0xda,
        0x9f, 0xc0, 0x84, 0xda,
        0xe9, 0xa3, 0x9f, 0xda,
        0x01, 0xe0, 0x80, 0xda,
        0x09, 0xf1, 0x88, 0x5a,
        0xa3, 0xd4, 0x85, 0x5a,
        0x9f, 0xc4, 0x84, 0x5a,
        0xe9, 0xa7, 0x9f, 0x5a,
        0xa3, 0xd4, 0x85, 0xda,
        0x9f, 0xc4, 0x84, 0xda,
        0xe9, 0xa7, 0x9f, 0xda,
        0x04, 0xe5, 0x88, 0xda,
        0x09, 0xf1, 0x88, 0x5a,
        // Data-processing (1 source)
        0xe0, 0x00, 0xc0, 0x5a,
        0x72, 0x00, 0xc0, 0xda,
        0x31, 0x04, 0xc0, 0x5a,
        0x45, 0x04, 0xc0, 0xda,
        0x12, 0x08, 0xc0, 0x5a,
        0x34, 0x08, 0xc0, 0xda,
        0x56, 0x0c, 0xc0, 0xda,
        0x78, 0x10, 0xc0, 0x5a,
        0x9a, 0x10, 0xc0, 0xda,
        0xa3, 0x14, 0xc0, 0x5a,
        0xb4, 0x14, 0xc0, 0xda,
        // Data-processing (2 source)
        0xe0, 0x08, 0xca, 0x1a,
        0xc9, 0x0a, 0xc4, 0x9a,
        0xac, 0x0e, 0xc0, 0x1a,
        0x4d, 0x0c, 0xc1, 0x9a,
        0x8b, 0x21, 0xcd, 0x1a,
        0xee, 0x21, 0xd0, 0x9a,
        0x51, 0x26, 0xd3, 0x1a,
        0xb4, 0x26, 0xd6, 0x9a,
        0x17, 0x2b, 0xd9, 0x1a,
        0x7a, 0x2b, 0xdc, 0x9a,
        0x20, 0x2c, 0xc2, 0x1a,
        0x83, 0x2c, 0xc5, 0x9a,
        0xe6, 0x20, 0xc8, 0x1a,
        0x49, 0x21, 0xcb, 0x9a,
        0xac, 0x25, 0xce, 0x1a,
        0x0f, 0x26, 0xd1, 0x9a,
        0x72, 0x2a, 0xd4, 0x1a,
        0xd5, 0x2a, 0xd7, 0x9a,
        0x38, 0x2f, 0xda, 0x1a,
        0x9b, 0x2f, 0xdd, 0x9a,
        // Data-processing (3 sources)
        0xbe, 0x73, 0x5c, 0x9b,
        0x7f, 0x2f, 0x5a, 0x9b,
        0xbe, 0x3f, 0xdc, 0x9b,
        0xd7, 0x77, 0xdf, 0x9b,
        0x61, 0x10, 0x07, 0x1b,
        0x1f, 0x2c, 0x09, 0x1b,
        0xed, 0x13, 0x04, 0x1b,
        0xd3, 0x77, 0x1f, 0x1b,
        0xa4, 0x7c, 0x06, 0x1b,
        0x61, 0x10, 0x07, 0x9b,
        0x1f, 0x2c, 0x09, 0x9b,
        0xed, 0x13, 0x04, 0x9b,
        0xd3, 0x77, 0x1f, 0x9b,
        0xa4, 0x7c, 0x06, 0x9b,
        0x61, 0x90, 0x07, 0x1b,
        0x1f, 0xac, 0x09, 0x1b,
        0xed, 0x93, 0x04, 0x1b,
        0xd3, 0xf7, 0x1f, 0x1b,
        0xa4, 0xfc, 0x06, 0x1b,
        0x61, 0x90, 0x07, 0x9b,
        0x1f, 0xac, 0x09, 0x9b,
        0xed, 0x93, 0x04, 0x9b,
        0xd3, 0xf7, 0x1f, 0x9b,
        0xa4, 0xfc, 0x06, 0x9b,
        0xa3, 0x24, 0x22, 0x9b,
        0x5f, 0x31, 0x2b, 0x9b,
        0xed, 0x3f, 0x2e, 0x9b,
        0x30, 0x4a, 0x3f, 0x9b,
        0x93, 0x7e, 0x35, 0x9b,
        0xa3, 0xa4, 0x22, 0x9b,
        0x5f, 0xb1, 0x2b, 0x9b,
        0xed, 0xbf, 0x2e, 0x9b,
        0x30, 0xca, 0x3f, 0x9b,
        0x93, 0xfe, 0x35, 0x9b,
        0xa3, 0x24, 0xa2, 0x9b,
        0x5f, 0x31, 0xab, 0x9b,
        0xed, 0x3f, 0xae, 0x9b,
        0x30, 0x4a, 0xbf, 0x9b,
        0x93, 0x7e, 0xb5, 0x9b,
        0xa3, 0xa4, 0xa2, 0x9b,
        0x5f, 0xb1, 0xab, 0x9b,
        0xed, 0xbf, 0xae, 0x9b,
        0x30, 0xca, 0xbf, 0x9b,
        0x93, 0xfe, 0xb5, 0x9b,
        0xbe, 0x7f, 0x5c, 0x9b,
        0x7f, 0x7f, 0x5a, 0x9b,
        0xf9, 0x7f, 0x58, 0x9b,
        0xd7, 0x7e, 0x5f, 0x9b,
        0xbe, 0x7f, 0xdc, 0x9b,
        0x7f, 0x7f, 0xda, 0x9b,
        0xf9, 0x7f, 0xd8, 0x9b,
        0xd7, 0x7e, 0xdf, 0x9b,
        0x83, 0x7c, 0x05, 0x1b,
        0xdf, 0x7c, 0x07, 0x1b,
        0xe8, 0x7f, 0x09, 0x1b,
        0x6a, 0x7d, 0x1f, 0x1b,
        0xac, 0x7d, 0x0e, 0x9b,
        0xff, 0x7d, 0x10, 0x9b,
        0xf1, 0x7f, 0x12, 0x9b,
        0x93, 0x7e, 0x1f, 0x9b,
        0xd5, 0xfe, 0x17, 0x1b,
        0x1f, 0xff, 0x19, 0x1b,
        0xfa, 0xff, 0x1b, 0x1b,
        0xbc, 0xff, 0x1f, 0x1b,
        0xab, 0x7d, 0x31, 0x9b,
        0xab, 0x7d, 0xb1, 0x9b,
        0xab, 0xfd, 0x31, 0x9b,
        0xab, 0xfd, 0xb1, 0x9b,
        // Exception generation
        0x01, 0x00, 0x00, 0xd4,
        0xe1, 0xff, 0x1f, 0xd4,
        0x22, 0x00, 0x00, 0xd4,
        0x03, 0xdc, 0x05, 0xd4,
        0x80, 0x01, 0x20, 0xd4,
        0x60, 0x0f, 0x40, 0xd4,
        0x41, 0x05, 0xa0, 0xd4,
        0x22, 0x01, 0xa0, 0xd4,
        0x03, 0x7d, 0xa0, 0xd4,
        0x01, 0x00, 0xa0, 0xd4,
        0x02, 0x00, 0xa0, 0xd4,
        0x03, 0x00, 0xa0, 0xd4,
        // Extract (immediate)
        0xa3, 0x00, 0x87, 0x13,
        0xab, 0x7d, 0x91, 0x13,
        0xa3, 0x3c, 0xc7, 0x93,
        0xab, 0xfd, 0xd1, 0x93,
        0xf3, 0x62, 0xd7, 0x93,
        0xfd, 0xff, 0xdf, 0x93,
        0xa9, 0x7d, 0x8d, 0x13,
        // Floating-point compare
        0x60, 0x20, 0x25, 0x1e,
        0xe8, 0x23, 0x20, 0x1e,
        0xe8, 0x23, 0x3f, 0x1e,
        0xb0, 0x23, 0x3e, 0x1e,
        0xf8, 0x21, 0x20, 0x1e,
        0xf8, 0x21, 0x2f, 0x1e,
        0x80, 0x20, 0x6c, 0x1e,
        0xe8, 0x22, 0x60, 0x1e,
        0xe8, 0x22, 0x77, 0x1e,
        0x50, 0x23, 0x76, 0x1e,
        0xb8, 0x23, 0x60, 0x1e,
        0xb8, 0x23, 0x6d, 0x1e,
        // Floating-point conditional compare
        0x20, 0x04, 0x3f, 0x1e,
        0x6f, 0x24, 0x20, 0x1e,
        0xed, 0x27, 0x2f, 0x1e,
        0x20, 0xd5, 0x7f, 0x1e,
        0x6f, 0xc4, 0x60, 0x1e,
        0xe7, 0x17, 0x65, 0x1e,
        0x30, 0x04, 0x3f, 0x1e,
        0x7f, 0x24, 0x20, 0x1e,
        0xfd, 0x27, 0x2f, 0x1e,
        0x30, 0xd5, 0x7f, 0x1e,
        0x7f, 0xc4, 0x60, 0x1e,
        0xf7, 0x17, 0x65, 0x1e,
        // Floating-point conditional compare
        0x83, 0x5e, 0x29, 0x1e,
        0x49, 0x4d, 0x6b, 0x1e,
        // Floating-point data-processing (1 source)
        0x20, 0x40, 0x20, 0x1e,
        0x62, 0xc0, 0x20, 0x1e,
        0xa4, 0x40, 0x21, 0x1e,
        0xe6, 0xc0, 0x21, 0x1e,
        0x28, 0xc1, 0x22, 0x1e,
        0x6a, 0xc1, 0x23, 0x1e,
        0xac, 0x41, 0x24, 0x1e,
        0xee, 0xc1, 0x24, 0x1e,
        0x30, 0x42, 0x25, 0x1e,
        0x72, 0xc2, 0x25, 0x1e,
        0xb4, 0x42, 0x26, 0x1e,
        0xf6, 0x42, 0x27, 0x1e,
        0x38, 0xc3, 0x27, 0x1e,
        0x20, 0x40, 0x60, 0x1e,
        0x62, 0xc0, 0x60, 0x1e,
        0xa4, 0x40, 0x61, 0x1e,
        0xe6, 0xc0, 0x61, 0x1e,
        0x28, 0x41, 0x62, 0x1e,
        0x6a, 0xc1, 0x63, 0x1e,
        0xac, 0x41, 0x64, 0x1e,
        0xee, 0xc1, 0x64, 0x1e,
        0x30, 0x42, 0x65, 0x1e,
        0x72, 0xc2, 0x65, 0x1e,
        0xb4, 0x42, 0x66, 0x1e,
        0xf6, 0x42, 0x67, 0x1e,
        0x38, 0xc3, 0x67, 0x1e,
        0x7a, 0x43, 0xe2, 0x1e,
        0xbc, 0xc3, 0xe2, 0x1e,
        // Floating-point data-processing (2 sources)
        0x74, 0x0a, 0x31, 0x1e,
        0x41, 0x18, 0x23, 0x1e,
        0xa4, 0x28, 0x26, 0x1e,
        0x07, 0x39, 0x29, 0x1e,
        0x6a, 0x49, 0x2c, 0x1e,
        0xcd, 0x59, 0x2f, 0x1e,
        0x30, 0x6a, 0x32, 0x1e,
        0x93, 0x7a, 0x35, 0x1e,
        0xf6, 0x8a, 0x38, 0x1e,
        0x74, 0x0a, 0x71, 0x1e,
        0x41, 0x18, 0x63, 0x1e,
        0xa4, 0x28, 0x66, 0x1e,
        0x07, 0x39, 0x69, 0x1e,
        0x6a, 0x49, 0x6c, 0x1e,
        0xcd, 0x59, 0x6f, 0x1e,
        0x30, 0x6a, 0x72, 0x1e,
        0x93, 0x7a, 0x75, 0x1e,
        0xf6, 0x8a, 0x78, 0x1e,
        // Floating-point data-processing (1 source)
        0xa3, 0x7c, 0x06, 0x1f,
        0xa3, 0x5d, 0x40, 0x1f,
        0xa3, 0xfc, 0x06, 0x1f,
        0xa3, 0xdd, 0x40, 0x1f,
        0xa3, 0x7c, 0x26, 0x1f,
        0xa3, 0x5d, 0x60, 0x1f,
        0xa3, 0xfc, 0x26, 0x1f,
        0xa3, 0xdd, 0x60, 0x1f,
        // Floating-point <-> fixed-point conversion
        0xa3, 0xfc, 0xd8, 0x1e,
        0x9f, 0xce, 0xd8, 0x1e,
        0x13, 0x80, 0xd8, 0x1e,
        0xa3, 0xfc, 0xd8, 0x9e,
        0xcc, 0x4f, 0xd8, 0x9e,
        0x13, 0x00, 0xd8, 0x9e,
        0xa3, 0xfc, 0x18, 0x1e,
        0x9f, 0xce, 0x18, 0x1e,
        0x13, 0x80, 0x18, 0x1e,
        0xa3, 0xfc, 0x18, 0x9e,
        0xcc, 0x4f, 0x18, 0x9e,
        0x13, 0x00, 0x18, 0x9e,
        0xa3, 0xfc, 0x58, 0x1e,
        0x9f, 0xce, 0x58, 0x1e,
        0x13, 0x80, 0x58, 0x1e,
        0xa3, 0xfc, 0x58, 0x9e,
        0xcc, 0x4f, 0x58, 0x9e,
        0x13, 0x00, 0x58, 0x9e,
        0xa3, 0xfc, 0xd9, 0x1e,
        0x9f, 0xce, 0xd9, 0x1e,
        0x13, 0x80, 0xd9, 0x1e,
        0xa3, 0xfc, 0xd9, 0x9e,
        0xcc, 0x4f, 0xd9, 0x9e,
        0x13, 0x00, 0xd9, 0x9e,
        0xa3, 0xfc, 0x19, 0x1e,
        0x9f, 0xce, 0x19, 0x1e,
        0x13, 0x80, 0x19, 0x1e,
        0xa3, 0xfc, 0x19, 0x9e,
        0xcc, 0x4f, 0x19, 0x9e,
        0x13, 0x00, 0x19, 0x9e,
        0xa3, 0xfc, 0x59, 0x1e,
        0x9f, 0xce, 0x59, 0x1e,
        0x13, 0x80, 0x59, 0x1e,
        0xa3, 0xfc, 0x59, 0x9e,
        0xcc, 0x4f, 0x59, 0x9e,
        0x13, 0x00, 0x59, 0x9e,
        0x77, 0xfe, 0xc2, 0x1e,
        0xff, 0xb3, 0xc2, 0x1e,
        0x0e, 0x80, 0xc2, 0x1e,
        0x77, 0xfe, 0xc2, 0x9e,
        0xff, 0xb3, 0xc2, 0x9e,
        0x0e, 0x00, 0xc2, 0x9e,
        0x77, 0xfe, 0x02, 0x1e,
        0xff, 0xb3, 0x02, 0x1e,
        0x0e, 0x80, 0x02, 0x1e,
        0x77, 0xfe, 0x02, 0x9e,
        0xff, 0xb3, 0x02, 0x9e,
        0x0e, 0x00, 0x02, 0x9e,
        0x77, 0xfe, 0x42, 0x1e,
        0xff, 0xb3, 0x42, 0x1e,
        0x0e, 0x80, 0x42, 0x1e,
        0x77, 0xfe, 0x42, 0x9e,
        0xff, 0xb3, 0x42, 0x9e,
        0x0e, 0x00, 0x42, 0x9e,
        0x77, 0xfe, 0xc3, 0x1e,
        0xff, 0xb3, 0xc3, 0x1e,
        0x0e, 0x80, 0xc3, 0x1e,
        0x77, 0xfe, 0xc3, 0x9e,
        0xff, 0xb3, 0xc3, 0x9e,
        0x0e, 0x00, 0xc3, 0x9e,
        0x77, 0xfe, 0x03, 0x1e,
        0xff, 0xb3, 0x03, 0x1e,
        0x0e, 0x80, 0x03, 0x1e,
        0x77, 0xfe, 0x03, 0x9e,
        0xff, 0xb3, 0x03, 0x9e,
        0x0e, 0x00, 0x03, 0x9e,
        0x77, 0xfe, 0x43, 0x1e,
        0xff, 0xb3, 0x43, 0x1e,
        0x0e, 0x80, 0x43, 0x1e,
        0x77, 0xfe, 0x43, 0x9e,
        0xff, 0xb3, 0x43, 0x9e,
        0x0e, 0x00, 0x43, 0x9e,
        // Floating-point <-> integer conversion
        0xe3, 0x03, 0xe0, 0x1e,
        0x9f, 0x01, 0xe0, 0x9e,
        0x9f, 0x01, 0xe1, 0x1e,
        0x00, 0x00, 0xe1, 0x9e,
        0x3f, 0x01, 0xe8, 0x1e,
        0x8c, 0x02, 0xe8, 0x9e,
        0xfe, 0x02, 0xe9, 0x1e,
        0x7d, 0x00, 0xe9, 0x9e,
        0x62, 0x00, 0xf0, 0x1e,
        0xa4, 0x00, 0xf0, 0x9e,
        0xe6, 0x00, 0xf1, 0x1e,
        0x28, 0x01, 0xf1, 0x9e,
        0x6a, 0x01, 0xf8, 0x1e,
        0xac, 0x01, 0xf8, 0x9e,
        0xee, 0x01, 0xf9, 0x1e,
        0x0f, 0x02, 0xf9, 0x9e,
        0x51, 0x02, 0xe2, 0x1e,
        0x93, 0x02, 0xe2, 0x9e,
        0xd5, 0x02, 0xe3, 0x1e,
        0x17, 0x03, 0xe2, 0x9e,
        0x59, 0x03, 0xe4, 0x1e,
        0x9b, 0x03, 0xe4, 0x9e,
        0xdd, 0x03, 0xe5, 0x1e,
        0x1f, 0x00, 0xe5, 0x9e,
        0xe3, 0x03, 0x20, 0x1e,
        0x9f, 0x01, 0x20, 0x9e,
        0x9f, 0x01, 0x21, 0x1e,
        0x00, 0x00, 0x21, 0x9e,
        0x3f, 0x01, 0x28, 0x1e,
        0x8c, 0x02, 0x28, 0x9e,
        0xfe, 0x02, 0x29, 0x1e,
        0x7d, 0x00, 0x29, 0x9e,
        0x62, 0x00, 0x30, 0x1e,
        0xa4, 0x00, 0x30, 0x9e,
        0xe6, 0x00, 0x31, 0x1e,
        0x28, 0x01, 0x31, 0x9e,
        0x6a, 0x01, 0x38, 0x1e,
        0xac, 0x01, 0x38, 0x9e,
        0xee, 0x01, 0x39, 0x1e,
        0x0f, 0x02, 0x39, 0x9e,
        0x51, 0x02, 0x22, 0x1e,
        0x93, 0x02, 0x22, 0x9e,
        0xd5, 0x02, 0x23, 0x1e,
        0x17, 0x03, 0x22, 0x9e,
        0x59, 0x03, 0x24, 0x1e,
        0x9b, 0x03, 0x24, 0x9e,
        0xdd, 0x03, 0x25, 0x1e,
        0x1f, 0x00, 0x25, 0x9e,
        0xe3, 0x03, 0x60, 0x1e,
        0x9f, 0x01, 0x60, 0x9e,
        0x9f, 0x01, 0x61, 0x1e,
        0x00, 0x00, 0x61, 0x9e,
        0x3f, 0x01, 0x68, 0x1e,
        0x8c, 0x02, 0x68, 0x9e,
        0xfe, 0x02, 0x69, 0x1e,
        0x7d, 0x00, 0x69, 0x9e,
        0x62, 0x00, 0x70, 0x1e,
        0xa4, 0x00, 0x70, 0x9e,
        0xe6, 0x00, 0x71, 0x1e,
        0x28, 0x01, 0x71, 0x9e,
        0x6a, 0x01, 0x78, 0x1e,
        0xac, 0x01, 0x78, 0x9e,
        0xee, 0x01, 0x79, 0x1e,
        0x0f, 0x02, 0x79, 0x9e,
        0x51, 0x02, 0x62, 0x1e,
        0x93, 0x02, 0x62, 0x9e,
        0xd5, 0x02, 0x63, 0x1e,
        0x17, 0x03, 0x63, 0x9e,
        0x59, 0x03, 0x64, 0x1e,
        0x9b, 0x03, 0x64, 0x9e,
        0xdd, 0x03, 0x65, 0x1e,
        0x1f, 0x00, 0x65, 0x9e,
        0x23, 0x01, 0x26, 0x1e,
        0x69, 0x00, 0x27, 0x1e,
        0xf4, 0x03, 0x66, 0x9e,
        0xe1, 0x01, 0x67, 0x9e,
        0x83, 0x01, 0xae, 0x9e,
        0x61, 0x02, 0xaf, 0x9e,
        // Floating-point immediate
        0x02, 0x10, 0x28, 0x1e,
        0x03, 0x10, 0x2e, 0x1e,
        0x1e, 0x10, 0x66, 0x1e,
        0x04, 0x30, 0x2e, 0x1e,
        0x0a, 0xf0, 0x6f, 0x1e,
        0x0c, 0x10, 0x3e, 0x1e,
        0x10, 0x30, 0x64, 0x1e,
        // TODO
        // // Load-register (literal)
        // 0x03, 0x00, 0x00, 0x18,
        // 0x3d, 0x00, 0x00, 0x58,
        // 0xff, 0xff, 0xff, 0x98,
        // 0x40, 0x00, 0x00, 0x1c,
        // 0xe0, 0xff, 0x7f, 0x5c,
        // 0x00, 0x00, 0x80, 0x9c,
        // 0x01, 0x00, 0x00, 0xd8,
        // 0x16, 0x00, 0x00, 0xd8,
        // // Load/store exclusive
        // 0xe8, 0x7f, 0x12, 0x08,
        // 0x0f, 0x7e, 0x18, 0x48,
        // 0x26, 0x7e, 0x05, 0x88,
        // 0xaa, 0x7e, 0x01, 0xc8,
        // 0xaa, 0x7a, 0x01, 0xc8,
        // 0x1e, 0x7c, 0x5f, 0x08,
        // 0x91, 0x7c, 0x5f, 0x48,
        // 0xf6, 0x7f, 0x5f, 0x88,
        // 0xab, 0x7f, 0x5f, 0xc8,
        // 0xab, 0x6f, 0x5f, 0xc8,
        // 0xab, 0x7f, 0x5e, 0xc8,
        // 0xeb, 0x2b, 0x2c, 0x88,
        // 0x9b, 0x25, 0x3f, 0xc8,
        // 0xe0, 0x7f, 0x7f, 0x88,
        // 0x51, 0x02, 0x7f, 0xc8,
        // 0x51, 0x02, 0x7e, 0xc8,
        // 0x16, 0xfc, 0x0c, 0x08,
        // 0x21, 0xfc, 0x0a, 0x48,
        // 0x42, 0xfc, 0x09, 0x88,
        // 0xe3, 0xff, 0x09, 0xc8,
        // 0x88, 0xfc, 0x5f, 0x08,
        // 0xa7, 0xfc, 0x5f, 0x48,
        // 0xe6, 0xff, 0x5f, 0x88,
        // 0xc5, 0xfc, 0x5f, 0xc8,
        // 0xc5, 0xec, 0x5f, 0xc8,
        // 0xc5, 0xfc, 0x5e, 0xc8,
        // 0xe5, 0x9b, 0x24, 0x88,
        // 0x26, 0x9c, 0x3f, 0xc8,
        // 0xe5, 0xcb, 0x7f, 0x88,
        // 0xc6, 0xce, 0x7f, 0xc8,
        // 0xc6, 0xce, 0x7e, 0xc8,
        // 0xf8, 0xff, 0x9f, 0x08,
        // 0xd9, 0xff, 0x9f, 0x48,
        // 0xba, 0xff, 0x9f, 0x88,
        // 0x9b, 0xff, 0x9f, 0xc8,
        // 0x9b, 0xef, 0x9f, 0xc8,
        // 0x9b, 0xff, 0x9e, 0xc8,
        // 0xf7, 0xff, 0xdf, 0x08,
        // 0xd6, 0xff, 0xdf, 0x48,
        // 0xbf, 0xff, 0xdf, 0x88,
        // 0x95, 0xff, 0xdf, 0xc8,
        // 0x95, 0xef, 0xdf, 0xc8,
        // 0x95, 0xff, 0xde, 0xc8,
        // // Load/store (unscaled  immediate)
        // 0xe9, 0x03, 0x00, 0x38,
        // 0x9f, 0xf1, 0x0f, 0x78,
        // 0x10, 0x00, 0x10, 0xb8,
        // 0xdc, 0x11, 0x00, 0xf8,
        // 0x81, 0xf2, 0x4f, 0x38,
        // 0x34, 0xf0, 0x4f, 0x78,
        // 0xec, 0xf3, 0x4f, 0xb8,
        // 0x9f, 0xf1, 0x4f, 0xf8,
        // 0xe9, 0x00, 0x90, 0x38,
        // 0x71, 0x02, 0x90, 0x78,
        // 0xf4, 0x01, 0x90, 0xb8,
        // 0xe2, 0x03, 0x90, 0xf8,
        // 0x33, 0x00, 0xd0, 0x38,
        // 0xaf, 0x02, 0xd0, 0x78,
        // 0xe0, 0x13, 0x00, 0x3c,
        // 0x8c, 0xf1, 0x1f, 0x7c,
        // 0x0f, 0xf0, 0x0f, 0xbc,
        // 0xbf, 0x90, 0x01, 0xfc,
        // 0xa9, 0x00, 0x80, 0x3c,
        // 0xe3, 0x03, 0x40, 0x3c,
        // 0x85, 0x00, 0x50, 0x7c,
        // 0x87, 0xf1, 0x5f, 0xbc,
        // 0x6b, 0x42, 0x40, 0xfc,
        // 0x2d, 0x20, 0xc0, 0x3c,
        // // Load/store (immediate post-indexed)
        // 0xff, 0x47, 0x40, 0xb8,
        // 0x49, 0xf4, 0x0f, 0x38,
        // 0x6a, 0x14, 0x00, 0x38,
        // 0x6a, 0x04, 0x10, 0x38,
        // 0x49, 0xf4, 0x0f, 0x78,
        // 0x49, 0x14, 0x00, 0x78,
        // 0x6a, 0x04, 0x10, 0x78,
        // 0xf3, 0xf7, 0x0f, 0xb8,
        // 0xd4, 0x17, 0x00, 0xb8,
        // 0x95, 0x05, 0x10, 0xb8,
        // 0x3f, 0xf5, 0x0f, 0xf8,
        // 0x62, 0x14, 0x00, 0xf8,
        // 0x93, 0x05, 0x10, 0xf8,
        // 0x49, 0xf4, 0x4f, 0x38,
        // 0x6a, 0x14, 0x40, 0x38,
        // 0x6a, 0x04, 0x50, 0x38,
        // 0x49, 0xf4, 0x4f, 0x78,
        // 0x49, 0x14, 0x40, 0x78,
        // 0x6a, 0x04, 0x50, 0x78,
        // 0xf3, 0xf7, 0x4f, 0xb8,
        // 0xd4, 0x17, 0x40, 0xb8,
        // 0x95, 0x05, 0x50, 0xb8,
        // 0x3f, 0xf5, 0x4f, 0xf8,
        // 0x62, 0x14, 0x40, 0xf8,
        // 0x93, 0x05, 0x50, 0xf8,
        // 0x3f, 0xf5, 0x8f, 0x38,
        // 0x62, 0x14, 0x80, 0x38,
        // 0x93, 0x05, 0x90, 0x38,
        // 0x3f, 0xf5, 0x8f, 0x78,
        // 0x62, 0x14, 0x80, 0x78,
        // 0x93, 0x05, 0x90, 0x78,
        // 0x3f, 0xf5, 0x8f, 0xb8,
        // 0x62, 0x14, 0x80, 0xb8,
        // 0x93, 0x05, 0x90, 0xb8,
        // 0x3f, 0xf5, 0xcf, 0x38,
        // 0x62, 0x14, 0xc0, 0x38,
        // 0x93, 0x05, 0xd0, 0x38,
        // 0x3f, 0xf5, 0xcf, 0x78,
        // 0x62, 0x14, 0xc0, 0x78,
        // 0x93, 0x05, 0xd0, 0x78,
        // 0x00, 0xf4, 0x0f, 0x3c,
        // 0x63, 0x14, 0x00, 0x3c,
        // 0xe5, 0x07, 0x10, 0x3c,
        // 0x4a, 0xf5, 0x0f, 0x7c,
        // 0xed, 0x16, 0x00, 0x7c,
        // 0xef, 0x07, 0x10, 0x7c,
        // 0x94, 0xf6, 0x0f, 0xbc,
        // 0xf7, 0x16, 0x00, 0xbc,
        // 0x19, 0x04, 0x10, 0xbc,
        // 0x94, 0xf6, 0x0f, 0xfc,
        // 0xf7, 0x16, 0x00, 0xfc,
        // 0x19, 0x04, 0x10, 0xfc,
        // 0x00, 0xf4, 0x4f, 0x3c,
        // 0x63, 0x14, 0x40, 0x3c,
        // 0xe5, 0x07, 0x50, 0x3c,
        // 0x4a, 0xf5, 0x4f, 0x7c,
        // 0xed, 0x16, 0x40, 0x7c,
        // 0xef, 0x07, 0x50, 0x7c,
        // 0x94, 0xf6, 0x4f, 0xbc,
        // 0xf7, 0x16, 0x40, 0xbc,
        // 0x19, 0x04, 0x50, 0xbc,
        // 0x94, 0xf6, 0x4f, 0xfc,
        // 0xf7, 0x16, 0x40, 0xfc,
        // 0x19, 0x04, 0x50, 0xfc,
        // 0x34, 0xf4, 0xcf, 0x3c,
        // 0x37, 0x15, 0xc0, 0x3c,
        // 0x99, 0x06, 0xd0, 0x3c,
        // 0x2a, 0xf4, 0x8f, 0x3c,
        // 0xf6, 0x17, 0x80, 0x3c,
        // 0x95, 0x06, 0x90, 0x3c,
        // // Load-store register (immediate pre-indexed)
        // 0xff, 0x0f, 0x40, 0xf8,
        // 0x83, 0x0c, 0x40, 0xf8,
        // 0x49, 0xfc, 0x0f, 0x38,
        // 0x6a, 0x1c, 0x00, 0x38,
        // 0x6a, 0x0c, 0x10, 0x38,
        // 0x49, 0xfc, 0x0f, 0x78,
        // 0x49, 0x1c, 0x00, 0x78,
        // 0x6a, 0x0c, 0x10, 0x78,
        // 0xf3, 0xff, 0x0f, 0xb8,
        // 0xd4, 0x1f, 0x00, 0xb8,
        // 0x95, 0x0d, 0x10, 0xb8,
        // 0x3f, 0xfd, 0x0f, 0xf8,
        // 0x62, 0x1c, 0x00, 0xf8,
        // 0x93, 0x0d, 0x10, 0xf8,
        // 0x49, 0xfc, 0x4f, 0x38,
        // 0x6a, 0x1c, 0x40, 0x38,
        // 0x6a, 0x0c, 0x50, 0x38,
        // 0x49, 0xfc, 0x4f, 0x78,
        // 0x49, 0x1c, 0x40, 0x78,
        // 0x6a, 0x0c, 0x50, 0x78,
        // 0xf3, 0xff, 0x4f, 0xb8,
        // 0xd4, 0x1f, 0x40, 0xb8,
        // 0x95, 0x0d, 0x50, 0xb8,
        // 0x3f, 0xfd, 0x4f, 0xf8,
        // 0x62, 0x1c, 0x40, 0xf8,
        // 0x93, 0x0d, 0x50, 0xf8,
        // 0x3f, 0xfd, 0x8f, 0x38,
        // 0x62, 0x1c, 0x80, 0x38,
        // 0x93, 0x0d, 0x90, 0x38,
        // 0x3f, 0xfd, 0x8f, 0x78,
        // 0x62, 0x1c, 0x80, 0x78,
        // 0x93, 0x0d, 0x90, 0x78,
        // 0x3f, 0xfd, 0x8f, 0xb8,
        // 0x62, 0x1c, 0x80, 0xb8,
        // 0x93, 0x0d, 0x90, 0xb8,
        // 0x3f, 0xfd, 0xcf, 0x38,
        // 0x62, 0x1c, 0xc0, 0x38,
        // 0x93, 0x0d, 0xd0, 0x38,
        // 0x3f, 0xfd, 0xcf, 0x78,
        // 0x62, 0x1c, 0xc0, 0x78,
        // 0x93, 0x0d, 0xd0, 0x78,
        // 0x00, 0xfc, 0x0f, 0x3c,
        // 0x63, 0x1c, 0x00, 0x3c,
        // 0xe5, 0x0f, 0x10, 0x3c,
        // 0x4a, 0xfd, 0x0f, 0x7c,
        // 0xed, 0x1e, 0x00, 0x7c,
        // 0xef, 0x0f, 0x10, 0x7c,
        // 0x94, 0xfe, 0x0f, 0xbc,
        // 0xf7, 0x1e, 0x00, 0xbc,
        // 0x19, 0x0c, 0x10, 0xbc,
        // 0x94, 0xfe, 0x0f, 0xfc,
        // 0xf7, 0x1e, 0x00, 0xfc,
        // 0x19, 0x0c, 0x10, 0xfc,
        // 0x00, 0xfc, 0x4f, 0x3c,
        // 0x63, 0x1c, 0x40, 0x3c,
        // 0xe5, 0x0f, 0x50, 0x3c,
        // 0x4a, 0xfd, 0x4f, 0x7c,
        // 0xed, 0x1e, 0x40, 0x7c,
        // 0xef, 0x0f, 0x50, 0x7c,
        // 0x94, 0xfe, 0x4f, 0xbc,
        // 0xf7, 0x1e, 0x40, 0xbc,
        // 0x19, 0x0c, 0x50, 0xbc,
        // 0x94, 0xfe, 0x4f, 0xfc,
        // 0xf7, 0x1e, 0x40, 0xfc,
        // 0x19, 0x0c, 0x50, 0xfc,
        // 0x34, 0xfc, 0xcf, 0x3c,
        // 0x37, 0x1d, 0xc0, 0x3c,
        // 0x99, 0x0e, 0xd0, 0x3c,
        // 0x2a, 0xfc, 0x8f, 0x3c,
        // 0xf6, 0x1f, 0x80, 0x3c,
        // 0x95, 0x0e, 0x90, 0x3c,
        // // Load/store (unprivileged)
        // 0xe9, 0x0b, 0x00, 0x38,
        // 0x9f, 0xf9, 0x0f, 0x78,
        // 0x10, 0x08, 0x10, 0xb8,
        // 0xdc, 0x19, 0x00, 0xf8,
        // 0x81, 0xfa, 0x4f, 0x38,
        // 0x34, 0xf8, 0x4f, 0x78,
        // 0xec, 0xfb, 0x4f, 0xb8,
        // 0x9f, 0xf9, 0x4f, 0xf8,
        // 0xe9, 0x08, 0x90, 0x38,
        // 0x71, 0x0a, 0x90, 0x78,
        // 0xf4, 0x09, 0x90, 0xb8,
        // 0x33, 0x08, 0xd0, 0x38,
        // 0xaf, 0x0a, 0xd0, 0x78,
        // // Load/store (unsigned  immediate)
        // 0x00, 0x00, 0x40, 0xf9,
        // 0xa4, 0x03, 0x40, 0xf9,
        // 0x9e, 0xfd, 0x7f, 0xf9,
        // 0xf4, 0x07, 0x40, 0xf9,
        // 0xff, 0x03, 0x40, 0xf9,
        // 0xe2, 0x03, 0x40, 0xb9,
        // 0xf1, 0xff, 0x7f, 0xb9,
        // 0x4d, 0x04, 0x40, 0xb9,
        // 0xa2, 0x04, 0x80, 0xb9,
        // 0xf7, 0xff, 0xbf, 0xb9,
        // 0x82, 0x00, 0x40, 0x79,
        // 0xd7, 0xfc, 0xff, 0x79,
        // 0xff, 0x07, 0xc0, 0x79,
        // 0x5d, 0x04, 0x80, 0x79,
        // 0x7a, 0xe4, 0x41, 0x39,
        // 0x4c, 0x00, 0x40, 0x39,
        // 0xfb, 0xff, 0xff, 0x39,
        // 0xff, 0x01, 0x80, 0x39,
        // 0xfe, 0x03, 0x00, 0xf9,
        // 0x94, 0xfc, 0x3f, 0xb9,
        // 0x54, 0x1d, 0x00, 0x79,
        // 0xf1, 0xff, 0x3f, 0x79,
        // 0x77, 0xfc, 0x3f, 0x39,
        // 0x5f, 0x00, 0x00, 0x39,
        // 0xff, 0xff, 0x7f, 0x3d,
        // 0x54, 0xfc, 0x7f, 0x7d,
        // 0x6a, 0xfe, 0x7f, 0xbd,
        // 0x43, 0xfd, 0x7f, 0xfd,
        // 0xec, 0xff, 0xbf, 0x3d,
        // 0xe0, 0x07, 0x80, 0xf9,
        // 0x61, 0x00, 0x80, 0xf9,
        // 0xa2, 0x08, 0x80, 0xf9,
        // 0x43, 0x00, 0x80, 0xf9,
        // 0xa4, 0x00, 0x80, 0xf9,
        // 0xc5, 0x00, 0x80, 0xf9,
        // 0xe8, 0x07, 0x80, 0xf9,
        // 0x69, 0x00, 0x80, 0xf9,
        // 0xaa, 0x08, 0x80, 0xf9,
        // 0x4b, 0x00, 0x80, 0xf9,
        // 0xac, 0x00, 0x80, 0xf9,
        // 0xcd, 0x00, 0x80, 0xf9,
        // 0xf0, 0x07, 0x80, 0xf9,
        // 0x71, 0x00, 0x80, 0xf9,
        // 0xb2, 0x08, 0x80, 0xf9,
        // 0x53, 0x00, 0x80, 0xf9,
        // 0xb4, 0x00, 0x80, 0xf9,
        // 0xd5, 0x00, 0x80, 0xf9,
        // // Load/store (register offset)
        // 0xe3, 0x6b, 0x65, 0x38,
        // 0x69, 0x6b, 0x66, 0x38,
        // 0xca, 0x6b, 0xe7, 0x38,
        // 0xab, 0xeb, 0x63, 0x38,
        // 0x8c, 0xeb, 0x3f, 0x38,
        // 0x4e, 0x4b, 0x66, 0x38,
        // 0x2f, 0x4b, 0xe7, 0x38,
        // 0xf1, 0xca, 0x69, 0x38,
        // 0xd2, 0xca, 0xaa, 0x38,
        // 0xe3, 0x6b, 0xe5, 0x78,
        // 0x69, 0x6b, 0xe6, 0x78,
        // 0xca, 0x7b, 0x67, 0x78,
        // 0xab, 0xeb, 0x23, 0x78,
        // 0x8c, 0xeb, 0x7f, 0x78,
        // 0x6d, 0xfb, 0xa5, 0x78,
        // 0x4e, 0x4b, 0x66, 0x78,
        // 0x2f, 0x4b, 0x67, 0x78,
        // 0x10, 0x5b, 0xe8, 0x78,
        // 0xf1, 0xca, 0x69, 0x78,
        // 0xd2, 0xca, 0x6a, 0x78,
        // 0xb3, 0xda, 0x3f, 0x78,
        // 0xe3, 0x6b, 0x65, 0xb8,
        // 0x69, 0x6b, 0x66, 0xbc,
        // 0xca, 0x7b, 0x67, 0xb8,
        // 0xab, 0xeb, 0x63, 0xb8,
        // 0x8c, 0xeb, 0x3f, 0xbc,
        // 0x6d, 0xfb, 0x25, 0xb8,
        // 0x4e, 0x4b, 0x26, 0xb8,
        // 0x2f, 0x4b, 0x67, 0xb8,
        // 0x10, 0x5b, 0x68, 0xb8,
        // 0xf1, 0xca, 0xa9, 0xb8,
        // 0xd2, 0xca, 0x6a, 0xb8,
        // 0xb3, 0xda, 0xbf, 0xb8,
        // 0xe3, 0x6b, 0x65, 0xf8,
        // 0x69, 0x6b, 0x26, 0xf8,
        // 0xca, 0x7b, 0x67, 0xfc,
        // 0xab, 0xeb, 0x23, 0xf8,
        // 0x8c, 0xeb, 0x7f, 0xf8,
        // 0x6d, 0xfb, 0x65, 0xf8,
        // 0x40, 0x4b, 0xa6, 0xf8,
        // 0x2f, 0x4b, 0x67, 0xf8,
        // 0x10, 0x5b, 0x68, 0xf8,
        // 0xf1, 0xca, 0x69, 0xf8,
        // 0xd2, 0xca, 0x6a, 0xf8,
        // 0xb3, 0xda, 0x3f, 0xfc,
        // 0xe3, 0x6b, 0xe5, 0x3c,
        // 0x69, 0x6b, 0xe6, 0x3c,
        // 0xca, 0x7b, 0xe7, 0x3c,
        // 0xab, 0xeb, 0xa3, 0x3c,
        // 0x8c, 0xeb, 0xbf, 0x3c,
        // 0x6d, 0xfb, 0xa5, 0x3c,
        // 0x4e, 0x4b, 0xe6, 0x3c,
        // 0x2f, 0x4b, 0xe7, 0x3c,
        // 0x10, 0x5b, 0xe8, 0x3c,
        // 0xf1, 0xca, 0xe9, 0x3c,
        // 0xd2, 0xca, 0xaa, 0x3c,
        // 0xb3, 0xda, 0xff, 0x3c,
        // // Load/store register pair (offset)
        // 0xe3, 0x17, 0x40, 0x29,
        // 0xff, 0xa7, 0x1f, 0x29,
        // 0xe2, 0x7f, 0x60, 0x29,
        // 0xe9, 0xab, 0x40, 0x29,
        // 0xe9, 0xab, 0x40, 0x69,
        // 0x49, 0x28, 0x60, 0x69,
        // 0xf4, 0xfb, 0x5f, 0x69,
        // 0x55, 0xf4, 0x5f, 0xa9,
        // 0x76, 0x5c, 0x60, 0xa9,
        // 0x98, 0xe4, 0x40, 0xa9,
        // 0xfd, 0xf3, 0x5f, 0x2d,
        // 0xfb, 0x6b, 0x20, 0x2d,
        // 0x61, 0x88, 0x45, 0x2d,
        // 0x23, 0x95, 0x1f, 0x6d,
        // 0x47, 0x2d, 0x20, 0x6d,
        // 0xc2, 0x8f, 0x7f, 0x6d,
        // 0xe3, 0x17, 0x00, 0xad,
        // 0xf1, 0xcf, 0x1f, 0xad,
        // 0x37, 0x74, 0x60, 0xad,
        // // Load/store register pair (post-indexed)
        // 0xe3, 0x17, 0xc0, 0x28,
        // 0xff, 0xa7, 0x9f, 0x28,
        // 0xe2, 0x7f, 0xe0, 0x28,
        // 0xe9, 0xab, 0xc0, 0x28,
        // 0xe9, 0xab, 0xc0, 0x68,
        // 0x49, 0x28, 0xe0, 0x68,
        // 0xf4, 0xfb, 0xdf, 0x68,
        // 0x55, 0xf4, 0xdf, 0xa8,
        // 0x76, 0x5c, 0xe0, 0xa8,
        // 0x98, 0xe4, 0xc0, 0xa8,
        // 0xfd, 0xf3, 0xdf, 0x2c,
        // 0xfb, 0x6b, 0xa0, 0x2c,
        // 0x61, 0x88, 0xc5, 0x2c,
        // 0x23, 0x95, 0x9f, 0x6c,
        // 0x47, 0x2d, 0xa0, 0x6c,
        // 0xc2, 0x8f, 0xff, 0x6c,
        // 0xe3, 0x17, 0x80, 0xac,
        // 0xf1, 0xcf, 0x9f, 0xac,
        // 0x37, 0x74, 0xe0, 0xac,
        // // Load/store register pair (pre-indexed)
        // 0xe3, 0x17, 0xc0, 0x29,
        // 0xff, 0xa7, 0x9f, 0x29,
        // 0xe2, 0x7f, 0xe0, 0x29,
        // 0xe9, 0xab, 0xc0, 0x29,
        // 0xe9, 0xab, 0xc0, 0x69,
        // 0x49, 0x28, 0xe0, 0x69,
        // 0xf4, 0xfb, 0xdf, 0x69,
        // 0x55, 0xf4, 0xdf, 0xa9,
        // 0x76, 0x5c, 0xe0, 0xa9,
        // 0x98, 0xe4, 0xc0, 0xa9,
        // 0xfd, 0xf3, 0xdf, 0x2d,
        // 0xfb, 0x6b, 0xa0, 0x2d,
        // 0x61, 0x88, 0xc5, 0x2d,
        // 0x23, 0x95, 0x9f, 0x6d,
        // 0x47, 0x2d, 0xa0, 0x6d,
        // 0xc2, 0x8f, 0xff, 0x6d,
        // 0xe3, 0x17, 0x80, 0xad,
        // 0xf1, 0xcf, 0x9f, 0xad,
        // 0x37, 0x74, 0xe0, 0xad,
        // // Load/store register pair (offset)
        // 0xe3, 0x17, 0x40, 0x28,
        // 0xff, 0xa7, 0x1f, 0x28,
        // 0xe2, 0x7f, 0x60, 0x28,
        // 0xe9, 0xab, 0x40, 0x28,
        // 0x55, 0xf4, 0x5f, 0xa8,
        // 0x76, 0x5c, 0x60, 0xa8,
        // 0x98, 0xe4, 0x40, 0xa8,
        // 0xfd, 0xf3, 0x5f, 0x2c,
        // 0xfb, 0x6b, 0x20, 0x2c,
        // 0x61, 0x88, 0x45, 0x2c,
        // 0x23, 0x95, 0x1f, 0x6c,
        // 0x47, 0x2d, 0x20, 0x6c,
        // 0xc2, 0x8f, 0x7f, 0x6c,
        // 0xe3, 0x17, 0x00, 0xac,
        // 0xf1, 0xcf, 0x1f, 0xac,
        // 0x37, 0x74, 0x60, 0xac,
        // Logical (immediate)
        0x23, 0x3d, 0x10, 0x32,
        0x5f, 0x29, 0x03, 0x32,
        0x49, 0x25, 0x00, 0x32,
        0xee, 0x81, 0x01, 0x12,
        0xac, 0xad, 0x0a, 0x12,
        0xeb, 0x87, 0x00, 0x12,
        0xc3, 0xc8, 0x03, 0x52,
        0xff, 0xc7, 0x00, 0x52,
        0x30, 0xc6, 0x01, 0x52,
        0x5f, 0xe6, 0x02, 0x72,
        0x93, 0xe6, 0x00, 0x72,
        0xd5, 0xe6, 0x01, 0x72,
        0x7f, 0xf0, 0x01, 0x72,
        0xff, 0xf3, 0x00, 0x72,
        0xa3, 0x84, 0x66, 0xd2,
        0x49, 0xb9, 0x40, 0x92,
        0x8b, 0x31, 0x41, 0xb2,
        0x23, 0x3d, 0x10, 0xb2,
        0x5f, 0x29, 0x03, 0xb2,
        0x49, 0x25, 0x00, 0xb2,
        0xee, 0x81, 0x01, 0x92,
        0xac, 0xad, 0x0a, 0x92,
        0xeb, 0x87, 0x00, 0x92,
        0xc3, 0xc8, 0x03, 0xd2,
        0xff, 0xc7, 0x00, 0xd2,
        0x30, 0xc6, 0x01, 0xd2,
        0x5f, 0xe6, 0x02, 0xf2,
        0x93, 0xe6, 0x00, 0xf2,
        0xd5, 0xe6, 0x01, 0xf2,
        0x7f, 0xf0, 0x01, 0xf2,
        0xff, 0xf3, 0x00, 0xf2,
        // TODO
        // 0xe3, 0x8f, 0x00, 0x32,
        // 0xea, 0xf3, 0x01, 0xb2,
        0xe3, 0x3f, 0x00, 0x32,
        0xe9, 0x3f, 0x60, 0xb2,
        // Logical (shifted register)
        0xec, 0x02, 0x15, 0xa,
        0xf0, 0x05, 0x01, 0xa,
        0x89, 0x7c, 0x0a, 0xa,
        0xc3, 0x03, 0x0b, 0xa,
        0xa3, 0xfc, 0x07, 0x8a,
        0xc5, 0x11, 0x93, 0x8a,
        0x23, 0x7e, 0xd3, 0xa,
        0x40, 0x44, 0x5f, 0xa,
        0xc3, 0x03, 0x8b, 0xa,
        0x9f, 0x00, 0x1a, 0x8a,
        0xe3, 0x03, 0xd4, 0xa,
        0x87, 0xfe, 0x9f, 0x8a,
        0x8d, 0xbe, 0x2e, 0x8a,
        0xe2, 0x00, 0x29, 0xa,
        0xe2, 0x7c, 0x80, 0x2a,
        0x28, 0x31, 0x0a, 0xaa,
        0xa3, 0x00, 0xa7, 0xaa,
        0xa2, 0x00, 0x3d, 0x2a,
        0xe7, 0x07, 0x09, 0x6a,
        0xa3, 0xfc, 0xd4, 0xea,
        0xa3, 0x00, 0x27, 0x6a,
        0xe3, 0x07, 0x23, 0xea,
        0x7f, 0x7c, 0x07, 0x6a,
        0x5f, 0x00, 0x94, 0xea,
        0xe3, 0x03, 0x06, 0xaa,
        0xe3, 0x03, 0x1f, 0xaa,
        0xff, 0x03, 0x02, 0x2a,
        0xe3, 0x03, 0x05, 0x2a,
        // Move wide (immediate)
        0xe1, 0xff, 0x9f, 0x52,
        0x02, 0x00, 0xa0, 0x52,
        0x42, 0x9a, 0x80, 0x12,
        0x42, 0x9a, 0xc0, 0xd2,
        0x3f, 0x1c, 0xe2, 0xf2,
        0x02, 0x00, 0x80, 0xd2,
        0x03, 0x00, 0x80, 0x72,
        0x04, 0x00, 0xa0, 0xd2,
        0x05, 0x00, 0xa0, 0x72,
        0x06, 0x00, 0xc0, 0xd2,
        0x07, 0x00, 0xc0, 0xf2,
        0x08, 0x00, 0xe0, 0xd2,
        0x09, 0x00, 0xe0, 0xf2,
        // PC-relative addressing
        0x02, 0x32, 0x00, 0x10,
        0x15, 0x32, 0x00, 0x90,
        0x00, 0x00, 0x20, 0x10,
        // System
        0x1f, 0x20, 0x03, 0xd5,
        0xff, 0x2f, 0x03, 0xd5,
        0x1f, 0x20, 0x03, 0xd5,
        0x3f, 0x20, 0x03, 0xd5,
        0x5f, 0x20, 0x03, 0xd5,
        0x7f, 0x20, 0x03, 0xd5,
        0x9f, 0x20, 0x03, 0xd5,
        0xbf, 0x20, 0x03, 0xd5,
        0xdf, 0x20, 0x3,  0xd5,
        0x5f, 0x3f, 0x03, 0xd5,
        0x5f, 0x30, 0x03, 0xd5,
        0x5f, 0x37, 0x03, 0xd5,
        0x5f, 0x3f, 0x03, 0xd5,
        0x9f, 0x3c, 0x03, 0xd5,
        0x9f, 0x3f, 0x03, 0xd5,
        0x9f, 0x31, 0x03, 0xd5,
        0x9f, 0x32, 0x03, 0xd5,
        0x9f, 0x33, 0x03, 0xd5,
        0x9f, 0x35, 0x03, 0xd5,
        0x9f, 0x36, 0x03, 0xd5,
        0x9f, 0x37, 0x03, 0xd5,
        0x9f, 0x39, 0x03, 0xd5,
        0x9f, 0x3a, 0x03, 0xd5,
        0x9f, 0x3b, 0x03, 0xd5,
        0x9f, 0x3d, 0x03, 0xd5,
        0x9f, 0x3e, 0x03, 0xd5,
        0x9f, 0x3f, 0x03, 0xd5,
        0xbf, 0x30, 0x03, 0xd5,
        0xbf, 0x3c, 0x03, 0xd5,
        0xbf, 0x3f, 0x03, 0xd5,
        0xbf, 0x31, 0x03, 0xd5,
        0xbf, 0x32, 0x03, 0xd5,
        0xbf, 0x33, 0x03, 0xd5,
        0xbf, 0x35, 0x03, 0xd5,
        0xbf, 0x36, 0x03, 0xd5,
        0xbf, 0x37, 0x03, 0xd5,
        0xbf, 0x39, 0x03, 0xd5,
        0xbf, 0x3a, 0x03, 0xd5,
        0xbf, 0x3b, 0x03, 0xd5,
        0xbf, 0x3d, 0x03, 0xd5,
        0xbf, 0x3e, 0x03, 0xd5,
        0xbf, 0x3f, 0x03, 0xd5,
        0xdf, 0x3f, 0x03, 0xd5,
        0xdf, 0x3c, 0x03, 0xd5,
        0xbf, 0x40, 0x00, 0xd5,
        0xdf, 0x4f, 0x03, 0xd5,
        0xff, 0x4c, 0x03, 0xd5,
        0xe5, 0x59, 0x0f, 0xd5,
        0x5f, 0xff, 0x08, 0xd5,
        0xe9, 0x59, 0x2f, 0xd5,
        0x41, 0xff, 0x28, 0xd5,
        0x1f, 0x71, 0x08, 0xd5,
        0x1f, 0x75, 0x08, 0xd5,
        0x29, 0x75, 0x0b, 0xd5,
        0x2c, 0x74, 0x0b, 0xd5,
        0x3f, 0x76, 0x08, 0xd5,
        0x42, 0x76, 0x08, 0xd5,
        0x29, 0x7a, 0x0b, 0xd5,
        0x4a, 0x7a, 0x08, 0xd5,
        0x20, 0x7b, 0x0b, 0xd5,
        0x23, 0x7e, 0x0b, 0xd5,
        0x5e, 0x7e, 0x08, 0xd5,
        0x0c, 0x00, 0x12, 0xd5,
        0x4c, 0x00, 0x10, 0xd5,
        0x0c, 0x02, 0x10, 0xd5,
        0x4c, 0x02, 0x10, 0xd5,
        0x4c, 0x03, 0x10, 0xd5,
        0x0c, 0x04, 0x13, 0xd5,
        0x0c, 0x05, 0x13, 0xd5,
        0x4c, 0x06, 0x10, 0xd5,
        0x0c, 0x07, 0x14, 0xd5,
        0x8c, 0x00, 0x10, 0xd5,
        0x8c, 0x01, 0x10, 0xd5,
        0x8c, 0x02, 0x10, 0xd5,
        0x8c, 0x03, 0x10, 0xd5,
        0x8c, 0x04, 0x10, 0xd5,
        0x8c, 0x05, 0x10, 0xd5,
        0x8c, 0x06, 0x10, 0xd5,
        0x8c, 0x07, 0x10, 0xd5,
        0x8c, 0x08, 0x10, 0xd5,
        0x8c, 0x09, 0x10, 0xd5,
        0x8c, 0x0a, 0x10, 0xd5,
        0x8c, 0x0b, 0x10, 0xd5,
        0x8c, 0x0c, 0x10, 0xd5,
        0x8c, 0x0d, 0x10, 0xd5,
        0x8c, 0x0e, 0x10, 0xd5,
        0x8c, 0x0f, 0x10, 0xd5,
        0xac, 0x00, 0x10, 0xd5,
        0xac, 0x01, 0x10, 0xd5,
        0xac, 0x02, 0x10, 0xd5,
        0xac, 0x03, 0x10, 0xd5,
        0xac, 0x04, 0x10, 0xd5,
        0xac, 0x05, 0x10, 0xd5,
        0xac, 0x06, 0x10, 0xd5,
        0xac, 0x07, 0x10, 0xd5,
        0xac, 0x08, 0x10, 0xd5,
        0xac, 0x09, 0x10, 0xd5,
        0xac, 0x0a, 0x10, 0xd5,
        0xac, 0x0b, 0x10, 0xd5,
        0xac, 0x0c, 0x10, 0xd5,
        0xac, 0x0d, 0x10, 0xd5,
        0xac, 0x0e, 0x10, 0xd5,
        0xac, 0x0f, 0x10, 0xd5,
        0xcc, 0x00, 0x10, 0xd5,
        0xcc, 0x01, 0x10, 0xd5,
        0xcc, 0x02, 0x10, 0xd5,
        0xcc, 0x03, 0x10, 0xd5,
        0xcc, 0x04, 0x10, 0xd5,
        0xcc, 0x05, 0x10, 0xd5,
        0xcc, 0x06, 0x10, 0xd5,
        0xcc, 0x07, 0x10, 0xd5,
        0xcc, 0x08, 0x10, 0xd5,
        0xcc, 0x09, 0x10, 0xd5,
        0xcc, 0x0a, 0x10, 0xd5,
        0xcc, 0x0b, 0x10, 0xd5,
        0xcc, 0x0c, 0x10, 0xd5,
        0xcc, 0x0d, 0x10, 0xd5,
        0xcc, 0x0e, 0x10, 0xd5,
        0xcc, 0x0f, 0x10, 0xd5,
        0xec, 0x00, 0x10, 0xd5,
        0xec, 0x01, 0x10, 0xd5,
        0xec, 0x02, 0x10, 0xd5,
        0xec, 0x03, 0x10, 0xd5,
        0xec, 0x04, 0x10, 0xd5,
        0xec, 0x05, 0x10, 0xd5,
        0xec, 0x06, 0x10, 0xd5,
        0xec, 0x07, 0x10, 0xd5,
        0xec, 0x08, 0x10, 0xd5,
        0xec, 0x09, 0x10, 0xd5,
        0xec, 0x0a, 0x10, 0xd5,
        0xec, 0x0b, 0x10, 0xd5,
        0xec, 0x0c, 0x10, 0xd5,
        0xec, 0x0d, 0x10, 0xd5,
        0xec, 0x0e, 0x10, 0xd5,
        0xec, 0x0f, 0x10, 0xd5,
        0x0c, 0x10, 0x12, 0xd5,
        0x8c, 0x10, 0x10, 0xd5,
        0x8c, 0x13, 0x10, 0xd5,
        0x8c, 0x14, 0x10, 0xd5,
        0xcc, 0x78, 0x10, 0xd5,
        0xcc, 0x79, 0x10, 0xd5,
        0x0c, 0x00, 0x1a, 0xd5,
        0x0c, 0x00, 0x1c, 0xd5,
        0xac, 0x00, 0x1c, 0xd5,
        0x0c, 0x10, 0x18, 0xd5,
        0x0c, 0x10, 0x1c, 0xd5,
        0x0c, 0x10, 0x1e, 0xd5,
        0x2c, 0x10, 0x18, 0xd5,
        0x2c, 0x10, 0x1c, 0xd5,
        0x2c, 0x10, 0x1e, 0xd5,
        0x4c, 0x10, 0x18, 0xd5,
        0x0c, 0x11, 0x1c, 0xd5,
        0x0c, 0x11, 0x1e, 0xd5,
        0x2c, 0x11, 0x1c, 0xd5,
        0x2c, 0x11, 0x1e, 0xd5,
        0x4c, 0x11, 0x1c, 0xd5,
        0x4c, 0x11, 0x1e, 0xd5,
        0x6c, 0x11, 0x1c, 0xd5,
        0xec, 0x11, 0x1c, 0xd5,
        0x2c, 0x13, 0x1e, 0xd5,
        0x0c, 0x20, 0x18, 0xd5,
        0x0c, 0x20, 0x1c, 0xd5,
        0x0c, 0x20, 0x1e, 0xd5,
        0x2c, 0x20, 0x18, 0xd5,
        0x4c, 0x20, 0x18, 0xd5,
        0x4c, 0x20, 0x1c, 0xd5,
        0x4c, 0x20, 0x1e, 0xd5,
        0x0c, 0x21, 0x1c, 0xd5,
        0x4c, 0x21, 0x1c, 0xd5,
        0x0c, 0x30, 0x1c, 0xd5,
        0x0c, 0x40, 0x18, 0xd5,
        0x0c, 0x40, 0x1c, 0xd5,
        0x0c, 0x40, 0x1e, 0xd5,
        0x2c, 0x40, 0x18, 0xd5,
        0x2c, 0x40, 0x1c, 0xd5,
        0x2c, 0x40, 0x1e, 0xd5,
        0x0c, 0x41, 0x18, 0xd5,
        0x0c, 0x41, 0x1c, 0xd5,
        0x0c, 0x41, 0x1e, 0xd5,
        0x0c, 0x42, 0x18, 0xd5,
        0x0c, 0x42, 0x1b, 0xd5,
        0x2c, 0x42, 0x1b, 0xd5,
        0x4c, 0x42, 0x18, 0xd5,
        0x0c, 0x43, 0x1c, 0xd5,
        0x2c, 0x43, 0x1c, 0xd5,
        0x4c, 0x43, 0x1c, 0xd5,
        0x6c, 0x43, 0x1c, 0xd5,
        0x0c, 0x44, 0x1b, 0xd5,
        0x2c, 0x44, 0x1b, 0xd5,
        0x0c, 0x45, 0x1b, 0xd5,
        0x2c, 0x45, 0x1b, 0xd5,
        0x2c, 0x50, 0x1c, 0xd5,
        0x0c, 0x51, 0x18, 0xd5,
        0x0c, 0x51, 0x1c, 0xd5,
        0x0c, 0x51, 0x1e, 0xd5,
        0x2c, 0x51, 0x18, 0xd5,
        0x2c, 0x51, 0x1c, 0xd5,
        0x2c, 0x51, 0x1e, 0xd5,
        0x0c, 0x52, 0x18, 0xd5,
        0x0c, 0x52, 0x1c, 0xd5,
        0x0c, 0x52, 0x1e, 0xd5,
        0x0c, 0x53, 0x1c, 0xd5,
        0x0c, 0x60, 0x18, 0xd5,
        0x0c, 0x60, 0x1c, 0xd5,
        0x0c, 0x60, 0x1e, 0xd5,
        0x8c, 0x60, 0x1c, 0xd5,
        0x0c, 0x74, 0x18, 0xd5,
        0x0c, 0x9c, 0x1b, 0xd5,
        0x2c, 0x9c, 0x1b, 0xd5,
        0x4c, 0x9c, 0x1b, 0xd5,
        0x6c, 0x9c, 0x1b, 0xd5,
        0xac, 0x9c, 0x1b, 0xd5,
        0x0c, 0x9d, 0x1b, 0xd5,
        0x2c, 0x9d, 0x1b, 0xd5,
        0x4c, 0x9d, 0x1b, 0xd5,
        0x0c, 0x9e, 0x1b, 0xd5,
        0x2c, 0x9e, 0x18, 0xd5,
        0x4c, 0x9e, 0x18, 0xd5,
        0x6c, 0x9e, 0x1b, 0xd5,
        0x0c, 0xa2, 0x18, 0xd5,
        0x0c, 0xa2, 0x1c, 0xd5,
        0x0c, 0xa2, 0x1e, 0xd5,
        0x0c, 0xa3, 0x18, 0xd5,
        0x0c, 0xa3, 0x1c, 0xd5,
        0x0c, 0xa3, 0x1e, 0xd5,
        0x0c, 0xc0, 0x18, 0xd5,
        0x0c, 0xc0, 0x1c, 0xd5,
        0x0c, 0xc0, 0x1e, 0xd5,
        0x4c, 0xc0, 0x18, 0xd5,
        0x4c, 0xc0, 0x1c, 0xd5,
        0x4c, 0xc0, 0x1e, 0xd5,
        0x4c, 0xd0, 0x1b, 0xd5,
        0x4c, 0xd0, 0x1c, 0xd5,
        0x4c, 0xd0, 0x1e, 0xd5,
        0x6c, 0xd0, 0x1b, 0xd5,
        0x8c, 0xd0, 0x18, 0xd5,
        0x0c, 0xe0, 0x1b, 0xd5,
        0x6c, 0xe0, 0x1c, 0xd5,
        0x0c, 0xe1, 0x18, 0xd5,
        0x0c, 0xe1, 0x1c, 0xd5,
        0x0c, 0xe2, 0x1b, 0xd5,
        0x0c, 0xe2, 0x1c, 0xd5,
        0x0c, 0xe2, 0x1f, 0xd5,
        0x2c, 0xe2, 0x1b, 0xd5,
        0x2c, 0xe2, 0x1c, 0xd5,
        0x2c, 0xe2, 0x1f, 0xd5,
        0x4c, 0xe2, 0x1b, 0xd5,
        0x4c, 0xe2, 0x1c, 0xd5,
        0x4c, 0xe2, 0x1f, 0xd5,
        0x0c, 0xe3, 0x1b, 0xd5,
        0x2c, 0xe3, 0x1b, 0xd5,
        0x4c, 0xe3, 0x1b, 0xd5,
        0x0c, 0xe8, 0x1b, 0xd5,
        0x2c, 0xe8, 0x1b, 0xd5,
        0x4c, 0xe8, 0x1b, 0xd5,
        0x6c, 0xe8, 0x1b, 0xd5,
        0x8c, 0xe8, 0x1b, 0xd5,
        0xac, 0xe8, 0x1b, 0xd5,
        0xcc, 0xe8, 0x1b, 0xd5,
        0xec, 0xe8, 0x1b, 0xd5,
        0x0c, 0xe9, 0x1b, 0xd5,
        0x2c, 0xe9, 0x1b, 0xd5,
        0x4c, 0xe9, 0x1b, 0xd5,
        0x6c, 0xe9, 0x1b, 0xd5,
        0x8c, 0xe9, 0x1b, 0xd5,
        0xac, 0xe9, 0x1b, 0xd5,
        0xcc, 0xe9, 0x1b, 0xd5,
        0xec, 0xe9, 0x1b, 0xd5,
        0x0c, 0xea, 0x1b, 0xd5,
        0x2c, 0xea, 0x1b, 0xd5,
        0x4c, 0xea, 0x1b, 0xd5,
        0x6c, 0xea, 0x1b, 0xd5,
        0x8c, 0xea, 0x1b, 0xd5,
        0xac, 0xea, 0x1b, 0xd5,
        0xcc, 0xea, 0x1b, 0xd5,
        0xec, 0xea, 0x1b, 0xd5,
        0x0c, 0xeb, 0x1b, 0xd5,
        0x2c, 0xeb, 0x1b, 0xd5,
        0x4c, 0xeb, 0x1b, 0xd5,
        0x6c, 0xeb, 0x1b, 0xd5,
        0x8c, 0xeb, 0x1b, 0xd5,
        0xac, 0xeb, 0x1b, 0xd5,
        0xcc, 0xeb, 0x1b, 0xd5,
        0xec, 0xef, 0x1b, 0xd5,
        0x0c, 0xec, 0x1b, 0xd5,
        0x2c, 0xec, 0x1b, 0xd5,
        0x4c, 0xec, 0x1b, 0xd5,
        0x6c, 0xec, 0x1b, 0xd5,
        0x8c, 0xec, 0x1b, 0xd5,
        0xac, 0xec, 0x1b, 0xd5,
        0xcc, 0xec, 0x1b, 0xd5,
        0xec, 0xec, 0x1b, 0xd5,
        0x0c, 0xed, 0x1b, 0xd5,
        0x2c, 0xed, 0x1b, 0xd5,
        0x4c, 0xed, 0x1b, 0xd5,
        0x6c, 0xed, 0x1b, 0xd5,
        0x8c, 0xed, 0x1b, 0xd5,
        0xac, 0xed, 0x1b, 0xd5,
        0xcc, 0xed, 0x1b, 0xd5,
        0xec, 0xed, 0x1b, 0xd5,
        0x0c, 0xee, 0x1b, 0xd5,
        0x2c, 0xee, 0x1b, 0xd5,
        0x4c, 0xee, 0x1b, 0xd5,
        0x6c, 0xee, 0x1b, 0xd5,
        0x8c, 0xee, 0x1b, 0xd5,
        0xac, 0xee, 0x1b, 0xd5,
        0xcc, 0xee, 0x1b, 0xd5,
        0xec, 0xee, 0x1b, 0xd5,
        0x0c, 0xef, 0x1b, 0xd5,
        0x2c, 0xef, 0x1b, 0xd5,
        0x4c, 0xef, 0x1b, 0xd5,
        0x6c, 0xef, 0x1b, 0xd5,
        0x8c, 0xef, 0x1b, 0xd5,
        0xac, 0xef, 0x1b, 0xd5,
        0xcc, 0xef, 0x1b, 0xd5,
        0x09, 0x00, 0x32, 0xd5,
        0x49, 0x00, 0x30, 0xd5,
        0x09, 0x01, 0x33, 0xd5,
        0x09, 0x02, 0x30, 0xd5,
        0x49, 0x02, 0x30, 0xd5,
        0x49, 0x03, 0x30, 0xd5,
        0x09, 0x04, 0x33, 0xd5,
        0x09, 0x05, 0x33, 0xd5,
        0x49, 0x06, 0x30, 0xd5,
        0x09, 0x07, 0x34, 0xd5,
        0x89, 0x00, 0x30, 0xd5,
        0x89, 0x01, 0x30, 0xd5,
        0x89, 0x02, 0x30, 0xd5,
        0x89, 0x03, 0x30, 0xd5,
        0x89, 0x04, 0x30, 0xd5,
        0x89, 0x05, 0x30, 0xd5,
        0x89, 0x06, 0x30, 0xd5,
        0x89, 0x07, 0x30, 0xd5,
        0x89, 0x08, 0x30, 0xd5,
        0x89, 0x09, 0x30, 0xd5,
        0x89, 0x0a, 0x30, 0xd5,
        0x89, 0x0b, 0x30, 0xd5,
        0x89, 0x0c, 0x30, 0xd5,
        0x89, 0x0d, 0x30, 0xd5,
        0x89, 0x0e, 0x30, 0xd5,
        0x89, 0x0f, 0x30, 0xd5,
        0xa9, 0x00, 0x30, 0xd5,
        0xa9, 0x01, 0x30, 0xd5,
        0xa9, 0x02, 0x30, 0xd5,
        0xa9, 0x03, 0x30, 0xd5,
        0xa9, 0x04, 0x30, 0xd5,
        0xa9, 0x05, 0x30, 0xd5,
        0xa9, 0x06, 0x30, 0xd5,
        0xa9, 0x07, 0x30, 0xd5,
        0xa9, 0x08, 0x30, 0xd5,
        0xa9, 0x09, 0x30, 0xd5,
        0xa9, 0x0a, 0x30, 0xd5,
        0xa9, 0x0b, 0x30, 0xd5,
        0xa9, 0x0c, 0x30, 0xd5,
        0xa9, 0x0d, 0x30, 0xd5,
        0xa9, 0x0e, 0x30, 0xd5,
        0xa9, 0x0f, 0x30, 0xd5,
        0xc9, 0x00, 0x30, 0xd5,
        0xc9, 0x01, 0x30, 0xd5,
        0xc9, 0x02, 0x30, 0xd5,
        0xc9, 0x03, 0x30, 0xd5,
        0xc9, 0x04, 0x30, 0xd5,
        0xc9, 0x05, 0x30, 0xd5,
        0xc9, 0x06, 0x30, 0xd5,
        0xc9, 0x07, 0x30, 0xd5,
        0xc9, 0x08, 0x30, 0xd5,
        0xc9, 0x09, 0x30, 0xd5,
        0xc9, 0x0a, 0x30, 0xd5,
        0xc9, 0x0b, 0x30, 0xd5,
        0xc9, 0x0c, 0x30, 0xd5,
        0xc9, 0x0d, 0x30, 0xd5,
        0xc9, 0x0e, 0x30, 0xd5,
        0xc9, 0x0f, 0x30, 0xd5,
        0xe9, 0x00, 0x30, 0xd5,
        0xe9, 0x01, 0x30, 0xd5,
        0xe9, 0x02, 0x30, 0xd5,
        0xe9, 0x03, 0x30, 0xd5,
        0xe9, 0x04, 0x30, 0xd5,
        0xe9, 0x05, 0x30, 0xd5,
        0xe9, 0x06, 0x30, 0xd5,
        0xe9, 0x07, 0x30, 0xd5,
        0xe9, 0x08, 0x30, 0xd5,
        0xe9, 0x09, 0x30, 0xd5,
        0xe9, 0x0a, 0x30, 0xd5,
        0xe9, 0x0b, 0x30, 0xd5,
        0xe9, 0x0c, 0x30, 0xd5,
        0xe9, 0x0d, 0x30, 0xd5,
        0xe9, 0x0e, 0x30, 0xd5,
        0xe9, 0x0f, 0x30, 0xd5,
        0x09, 0x10, 0x30, 0xd5,
        0x09, 0x10, 0x32, 0xd5,
        0x89, 0x11, 0x30, 0xd5,
        0x89, 0x13, 0x30, 0xd5,
        0x89, 0x14, 0x30, 0xd5,
        0xc9, 0x78, 0x30, 0xd5,
        0xc9, 0x79, 0x30, 0xd5,
        0xc9, 0x7e, 0x30, 0xd5,
        0x09, 0x00, 0x38, 0xd5,
        0x09, 0x00, 0x39, 0xd5,
        0x09, 0x00, 0x3a, 0xd5,
        0x49, 0x00, 0x39, 0xd5,
        0x09, 0x00, 0x3c, 0xd5,
        0x29, 0x00, 0x39, 0xd5,
        0x29, 0x00, 0x3b, 0xd5,
        0xa9, 0x00, 0x38, 0xd5,
        0xa9, 0x00, 0x3c, 0xd5,
        0xc9, 0x00, 0x38, 0xd5,
        0xe9, 0x00, 0x39, 0xd5,
        0xe9, 0x00, 0x3b, 0xd5,
        0x09, 0x01, 0x38, 0xd5,
        0x29, 0x01, 0x38, 0xd5,
        0x49, 0x01, 0x38, 0xd5,
        0x69, 0x01, 0x38, 0xd5,
        0x89, 0x01, 0x38, 0xd5,
        0xa9, 0x01, 0x38, 0xd5,
        0xc9, 0x01, 0x38, 0xd5,
        0xe9, 0x01, 0x38, 0xd5,
        0xc9, 0x02, 0x38, 0xd5,
        0xc9, 0x03, 0x38, 0xd5,
        0x09, 0x02, 0x38, 0xd5,
        0x29, 0x02, 0x38, 0xd5,
        0x49, 0x02, 0x38, 0xd5,
        0x69, 0x02, 0x38, 0xd5,
        0x89, 0x02, 0x38, 0xd5,
        0xa9, 0x02, 0x38, 0xd5,
        0x09, 0x03, 0x38, 0xd5,
        0x29, 0x03, 0x38, 0xd5,
        0x49, 0x03, 0x38, 0xd5,
        0x09, 0x04, 0x38, 0xd5,
        0x29, 0x04, 0x38, 0xd5,
        0x09, 0x05, 0x38, 0xd5,
        0x29, 0x05, 0x38, 0xd5,
        0x89, 0x05, 0x38, 0xd5,
        0xa9, 0x05, 0x38, 0xd5,
        0x09, 0x06, 0x38, 0xd5,
        0x29, 0x06, 0x38, 0xd5,
        0x49, 0x06, 0x38, 0xd5,
        0x09, 0x07, 0x38, 0xd5,
        0x29, 0x07, 0x38, 0xd5,
        0x09, 0x10, 0x38, 0xd5,
        0x09, 0x10, 0x3c, 0xd5,
        0x09, 0x10, 0x3e, 0xd5,
        0x29, 0x10, 0x38, 0xd5,
        0x29, 0x10, 0x3c, 0xd5,
        0x29, 0x10, 0x3e, 0xd5,
        0x49, 0x10, 0x38, 0xd5,
        0x09, 0x11, 0x3c, 0xd5,
        0x09, 0x11, 0x3e, 0xd5,
        0x29, 0x11, 0x3c, 0xd5,
        0x29, 0x11, 0x3e, 0xd5,
        0x49, 0x11, 0x3c, 0xd5,
        0x49, 0x11, 0x3e, 0xd5,
        0x69, 0x11, 0x3c, 0xd5,
        0xe9, 0x11, 0x3c, 0xd5,
        0x29, 0x13, 0x3e, 0xd5,
        0x09, 0x20, 0x38, 0xd5,
        0x09, 0x20, 0x3c, 0xd5,
        0x09, 0x20, 0x3e, 0xd5,
        0x29, 0x20, 0x38, 0xd5,
        0x49, 0x20, 0x38, 0xd5,
        0x49, 0x20, 0x3c, 0xd5,
        0x49, 0x20, 0x3e, 0xd5,
        0x09, 0x21, 0x3c, 0xd5,
        0x49, 0x21, 0x3c, 0xd5,
        0x09, 0x30, 0x3c, 0xd5,
        0x09, 0x40, 0x38, 0xd5,
        0x09, 0x40, 0x3c, 0xd5,
        0x09, 0x40, 0x3e, 0xd5,
        0x29, 0x40, 0x38, 0xd5,
        0x29, 0x40, 0x3c, 0xd5,
        0x29, 0x40, 0x3e, 0xd5,
        0x09, 0x41, 0x38, 0xd5,
        0x09, 0x41, 0x3c, 0xd5,
        0x09, 0x41, 0x3e, 0xd5,
        0x09, 0x42, 0x38, 0xd5,
        0x09, 0x42, 0x3b, 0xd5,
        0x29, 0x42, 0x3b, 0xd5,
        0x49, 0x42, 0x38, 0xd5,
        0x09, 0x43, 0x3c, 0xd5,
        0x29, 0x43, 0x3c, 0xd5,
        0x49, 0x43, 0x3c, 0xd5,
        0x69, 0x43, 0x3c, 0xd5,
        0x09, 0x44, 0x3b, 0xd5,
        0x29, 0x44, 0x3b, 0xd5,
        0x09, 0x45, 0x3b, 0xd5,
        0x29, 0x45, 0x3b, 0xd5,
        0x29, 0x50, 0x3c, 0xd5,
        0x09, 0x51, 0x38, 0xd5,
        0x09, 0x51, 0x3c, 0xd5,
        0x09, 0x51, 0x3e, 0xd5,
        0x29, 0x51, 0x38, 0xd5,
        0x29, 0x51, 0x3c, 0xd5,
        0x29, 0x51, 0x3e, 0xd5,
        0x09, 0x52, 0x38, 0xd5,
        0x09, 0x52, 0x3c, 0xd5,
        0x09, 0x52, 0x3e, 0xd5,
        0x09, 0x53, 0x3c, 0xd5,
        0x09, 0x60, 0x38, 0xd5,
        0x09, 0x60, 0x3c, 0xd5,
        0x09, 0x60, 0x3e, 0xd5,
        0x89, 0x60, 0x3c, 0xd5,
        0x09, 0x74, 0x38, 0xd5,
        0x09, 0x9c, 0x3b, 0xd5,
        0x29, 0x9c, 0x3b, 0xd5,
        0x49, 0x9c, 0x3b, 0xd5,
        0x69, 0x9c, 0x3b, 0xd5,
        0xa9, 0x9c, 0x3b, 0xd5,
        0xc9, 0x9c, 0x3b, 0xd5,
        0xe9, 0x9c, 0x3b, 0xd5,
        0x09, 0x9d, 0x3b, 0xd5,
        0x29, 0x9d, 0x3b, 0xd5,
        0x49, 0x9d, 0x3b, 0xd5,
        0x09, 0x9e, 0x3b, 0xd5,
        0x29, 0x9e, 0x38, 0xd5,
        0x49, 0x9e, 0x38, 0xd5,
        0x69, 0x9e, 0x3b, 0xd5,
        0x09, 0xa2, 0x38, 0xd5,
        0x09, 0xa2, 0x3c, 0xd5,
        0x09, 0xa2, 0x3e, 0xd5,
        0x09, 0xa3, 0x38, 0xd5,
        0x09, 0xa3, 0x3c, 0xd5,
        0x09, 0xa3, 0x3e, 0xd5,
        0x09, 0xc0, 0x38, 0xd5,
        0x09, 0xc0, 0x3c, 0xd5,
        0x09, 0xc0, 0x3e, 0xd5,
        0x29, 0xc0, 0x38, 0xd5,
        0x29, 0xc0, 0x3c, 0xd5,
        0x29, 0xc0, 0x3e, 0xd5,
        0x49, 0xc0, 0x38, 0xd5,
        0x49, 0xc0, 0x3c, 0xd5,
        0x49, 0xc0, 0x3e, 0xd5,
        0x09, 0xc1, 0x38, 0xd5,
        0x29, 0xd0, 0x38, 0xd5,
        0x49, 0xd0, 0x3b, 0xd5,
        0x49, 0xd0, 0x3c, 0xd5,
        0x49, 0xd0, 0x3e, 0xd5,
        0x69, 0xd0, 0x3b, 0xd5,
        0x89, 0xd0, 0x38, 0xd5,
        0x09, 0xe0, 0x3b, 0xd5,
        0x29, 0xe0, 0x3b, 0xd5,
        0x49, 0xe0, 0x3b, 0xd5,
        0x69, 0xe0, 0x3c, 0xd5,
        0x09, 0xe1, 0x38, 0xd5,
        0x09, 0xe1, 0x3c, 0xd5,
        0x09, 0xe2, 0x3b, 0xd5,
        0x09, 0xe2, 0x3c, 0xd5,
        0x09, 0xe2, 0x3f, 0xd5,
        0x29, 0xe2, 0x3b, 0xd5,
        0x29, 0xe2, 0x3c, 0xd5,
        0x29, 0xe2, 0x3f, 0xd5,
        0x49, 0xe2, 0x3b, 0xd5,
        0x49, 0xe2, 0x3c, 0xd5,
        0x49, 0xe2, 0x3f, 0xd5,
        0x09, 0xe3, 0x3b, 0xd5,
        0x29, 0xe3, 0x3b, 0xd5,
        0x49, 0xe3, 0x3b, 0xd5,
        0x09, 0xe8, 0x3b, 0xd5,
        0x29, 0xe8, 0x3b, 0xd5,
        0x49, 0xe8, 0x3b, 0xd5,
        0x69, 0xe8, 0x3b, 0xd5,
        0x89, 0xe8, 0x3b, 0xd5,
        0xa9, 0xe8, 0x3b, 0xd5,
        0xc9, 0xe8, 0x3b, 0xd5,
        0xe9, 0xe8, 0x3b, 0xd5,
        0x09, 0xe9, 0x3b, 0xd5,
        0x29, 0xe9, 0x3b, 0xd5,
        0x49, 0xe9, 0x3b, 0xd5,
        0x69, 0xe9, 0x3b, 0xd5,
        0x89, 0xe9, 0x3b, 0xd5,
        0xa9, 0xe9, 0x3b, 0xd5,
        0xc9, 0xe9, 0x3b, 0xd5,
        0xe9, 0xe9, 0x3b, 0xd5,
        0x09, 0xea, 0x3b, 0xd5,
        0x29, 0xea, 0x3b, 0xd5,
        0x49, 0xea, 0x3b, 0xd5,
        0x69, 0xea, 0x3b, 0xd5,
        0x89, 0xea, 0x3b, 0xd5,
        0xa9, 0xea, 0x3b, 0xd5,
        0xc9, 0xea, 0x3b, 0xd5,
        0xe9, 0xea, 0x3b, 0xd5,
        0x09, 0xeb, 0x3b, 0xd5,
        0x29, 0xeb, 0x3b, 0xd5,
        0x49, 0xeb, 0x3b, 0xd5,
        0x69, 0xeb, 0x3b, 0xd5,
        0x89, 0xeb, 0x3b, 0xd5,
        0xa9, 0xeb, 0x3b, 0xd5,
        0xc9, 0xeb, 0x3b, 0xd5,
        0xe9, 0xef, 0x3b, 0xd5,
        0x09, 0xec, 0x3b, 0xd5,
        0x29, 0xec, 0x3b, 0xd5,
        0x49, 0xec, 0x3b, 0xd5,
        0x69, 0xec, 0x3b, 0xd5,
        0x89, 0xec, 0x3b, 0xd5,
        0xa9, 0xec, 0x3b, 0xd5,
        0xc9, 0xec, 0x3b, 0xd5,
        0xe9, 0xec, 0x3b, 0xd5,
        0x09, 0xed, 0x3b, 0xd5,
        0x29, 0xed, 0x3b, 0xd5,
        0x49, 0xed, 0x3b, 0xd5,
        0x69, 0xed, 0x3b, 0xd5,
        0x89, 0xed, 0x3b, 0xd5,
        0xa9, 0xed, 0x3b, 0xd5,
        0xc9, 0xed, 0x3b, 0xd5,
        0xe9, 0xed, 0x3b, 0xd5,
        0x09, 0xee, 0x3b, 0xd5,
        0x29, 0xee, 0x3b, 0xd5,
        0x49, 0xee, 0x3b, 0xd5,
        0x69, 0xee, 0x3b, 0xd5,
        0x89, 0xee, 0x3b, 0xd5,
        0xa9, 0xee, 0x3b, 0xd5,
        0xc9, 0xee, 0x3b, 0xd5,
        0xe9, 0xee, 0x3b, 0xd5,
        0x09, 0xef, 0x3b, 0xd5,
        0x29, 0xef, 0x3b, 0xd5,
        0x49, 0xef, 0x3b, 0xd5,
        0x69, 0xef, 0x3b, 0xd5,
        0x89, 0xef, 0x3b, 0xd5,
        0xa9, 0xef, 0x3b, 0xd5,
        0xc9, 0xef, 0x3b, 0xd5,
        0xac, 0xf1, 0x3f, 0xd5,
        0xed, 0xbf, 0x3a, 0xd5,
        // This should be undefined, not sure why LLVM thinks its a valid instruction.
        // Trace:
        // Disassembler.next ->
        // Disassembler.decodeBranchExcpSysInstr ->
        // Passes (op0 == 0b110 and @truncate(u7, op1 >> 7) == 0b0100100) to go down system with result branch, fails subtests to become undefined.
        // TODO: maybe not? armconvertor.com and shell-storm.org successfully disassemble to `mrs xzr, s0_0_c4_c0_0`, but onlinedisassembler.com doesn't. Reading bits seems like it shouldn't pass either.
        // 0x1f, 0x40, 0x20, 0xd5,
        0x0c, 0xf0, 0x18, 0xd5,
        0xe5, 0xbd, 0x1f, 0xd5,
        // This is also undefined.
        // 0x1f, 0x40, 0x00, 0xd5,
        // Test and branch (immediate)
        0x0c, 0x00, 0xf0, 0xb6,
        0x2c, 0x00, 0xf0, 0xb6,
        0x0c, 0x00, 0xf4, 0xb6,
        0xec, 0xff, 0xe3, 0xb7,
        // Unconditional branch (immediate)
        0x01, 0x00, 0x00, 0x14,
        0xff, 0xff, 0xff, 0x17,
        0xff, 0xff, 0xff, 0x15,
        // Unconditional branch (register)
        0x80, 0x02, 0x1f, 0xd6,
        0xe0, 0x03, 0x3f, 0xd6,
        0x40, 0x01, 0x5f, 0xd6,
        0xc0, 0x03, 0x5f, 0xd6,
        0xe0, 0x03, 0x9f, 0xd6,
        0xe0, 0x03, 0xbf, 0xd6,
    },
        \\add w4, w5, #0
        \\add w2, w3, #4095
        \\add w30, w29, #1, lsl #12
        \\add w13, w5, #4095, lsl #12
        \\add x5, x7, #1638
        \\add w20, wsp, #801
        \\add wsp, wsp, #1104
        \\add wsp, w30, #4084
        \\add x0, x24, #291
        \\add x3, x24, #4095, lsl #12
        \\add x8, sp, #1074
        \\add sp, x29, #3816
        \\sub w0, wsp, #4077
        \\sub w4, w20, #546, lsl #12
        \\sub sp, sp, #288
        \\sub wsp, w19, #16
        \\adds w13, w23, #291, lsl #12
        \\cmn w2, #4095
        \\adds w20, wsp, #0
        \\cmn x3, #1, lsl #12
        \\cmp sp, #20, lsl #12
        \\cmp x30, #4095
        \\subs x4, sp, #3822
        \\cmn w3, #291, lsl #12
        \\cmn wsp, #1365
        \\cmn sp, #1092, lsl #12
        \\mov sp, x30
        \\mov wsp, w20
        \\mov x11, sp
        \\mov w24, wsp
        \\add w3, w5, w7
        \\add wzr, w3, w5
        \\add w20, wzr, w4
        \\add w4, w6, wzr
        \\add w11, w13, w15
        \\add w9, w3, wzr, lsl #10
        \\add w17, w29, w20, lsl #31
        \\add w21, w22, w23, lsr #0
        \\add w24, w25, w26, lsr #18
        \\add w27, w28, w29, lsr #31
        \\add w2, w3, w4, asr #0
        \\add w5, w6, w7, asr #21
        \\add w8, w9, w10, asr #31
        \\add x3, x5, x7
        \\add xzr, x3, x5
        \\add x20, xzr, x4
        \\add x4, x6, xzr
        \\add x11, x13, x15
        \\add x9, x3, xzr, lsl #10
        \\add x17, x29, x20, lsl #63
        \\add x21, x22, x23, lsr #0
        \\add x24, x25, x26, lsr #18
        \\add x27, x28, x29, lsr #63
        \\add x2, x3, x4, asr #0
        \\add x5, x6, x7, asr #21
        \\add x8, x9, x10, asr #63
        \\adds w3, w5, w7
        \\cmn w3, w5
        \\adds w20, wzr, w4
        \\adds w4, w6, wzr
        \\adds w11, w13, w15
        \\adds w9, w3, wzr, lsl #10
        \\adds w17, w29, w20, lsl #31
        \\adds w21, w22, w23, lsr #0
        \\adds w24, w25, w26, lsr #18
        \\adds w27, w28, w29, lsr #31
        \\adds w2, w3, w4, asr #0
        \\adds w5, w6, w7, asr #21
        \\adds w8, w9, w10, asr #31
        \\adds x3, x5, x7
        \\cmn x3, x5
        \\adds x20, xzr, x4
        \\adds x4, x6, xzr
        \\adds x11, x13, x15
        \\adds x9, x3, xzr, lsl #10
        \\adds x17, x29, x20, lsl #63
        \\adds x21, x22, x23, lsr #0
        \\adds x24, x25, x26, lsr #18
        \\adds x27, x28, x29, lsr #63
        \\adds x2, x3, x4, asr #0
        \\adds x5, x6, x7, asr #21
        \\adds x8, x9, x10, asr #63
        \\sub w3, w5, w7
        \\sub wzr, w3, w5
        \\neg w20, w4
        \\sub w4, w6, wzr
        \\sub w11, w13, w15
        \\sub w9, w3, wzr, lsl #10
        \\sub w17, w29, w20, lsl #31
        \\sub w21, w22, w23, lsr #0
        \\sub w24, w25, w26, lsr #18
        \\sub w27, w28, w29, lsr #31
        \\sub w2, w3, w4, asr #0
        \\sub w5, w6, w7, asr #21
        \\sub w8, w9, w10, asr #31
        \\sub x3, x5, x7
        \\sub xzr, x3, x5
        \\neg x20, x4
        \\sub x4, x6, xzr
        \\sub x11, x13, x15
        \\sub x9, x3, xzr, lsl #10
        \\sub x17, x29, x20, lsl #63
        \\sub x21, x22, x23, lsr #0
        \\sub x24, x25, x26, lsr #18
        \\sub x27, x28, x29, lsr #63
        \\sub x2, x3, x4, asr #0
        \\sub x5, x6, x7, asr #21
        \\sub x8, x9, x10, asr #63
        \\subs w3, w5, w7
        \\cmp w3, w5
        \\negs w20, w4
        \\subs w4, w6, wzr
        \\subs w11, w13, w15
        \\subs w9, w3, wzr, lsl #10
        \\subs w17, w29, w20, lsl #31
        \\subs w21, w22, w23, lsr #0
        \\subs w24, w25, w26, lsr #18
        \\subs w27, w28, w29, lsr #31
        \\subs w2, w3, w4, asr #0
        \\subs w5, w6, w7, asr #21
        \\subs w8, w9, w10, asr #31
        \\subs x3, x5, x7
        \\cmp x3, x5
        \\negs x20, x4
        \\subs x4, x6, xzr
        \\subs x11, x13, x15
        \\subs x9, x3, xzr, lsl #10
        \\subs x17, x29, x20, lsl #63
        \\subs x21, x22, x23, lsr #0
        \\subs x24, x25, x26, lsr #18
        \\subs x27, x28, x29, lsr #63
        \\subs x2, x3, x4, asr #0
        \\subs x5, x6, x7, asr #21
        \\subs x8, x9, x10, asr #63
        \\cmn w0, w3
        \\cmn wzr, w4
        \\cmn w5, wzr
        \\cmn w6, w7
        \\cmn w8, w9, lsl #15
        \\cmn w10, w11, lsl #31
        \\cmn w12, w13, lsr #0
        \\cmn w14, w15, lsr #21
        \\cmn w16, w17, lsr #31
        \\cmn w18, w19, asr #0
        \\cmn w20, w21, asr #22
        \\cmn w22, w23, asr #31
        \\cmn x0, x3
        \\cmn xzr, x4
        \\cmn x5, xzr
        \\cmn x6, x7
        \\cmn x8, x9, lsl #15
        \\cmn x10, x11, lsl #63
        \\cmn x12, x13, lsr #0
        \\cmn x14, x15, lsr #41
        \\cmn x16, x17, lsr #63
        \\cmn x18, x19, asr #0
        \\cmn x20, x21, asr #55
        \\cmn x22, x23, asr #63
        \\cmp w0, w3
        \\cmp wzr, w4
        \\cmp w5, wzr
        \\cmp w6, w7
        \\cmp w8, w9, lsl #15
        \\cmp w10, w11, lsl #31
        \\cmp w12, w13, lsr #0
        \\cmp w14, w15, lsr #21
        \\cmp w16, w17, lsr #31
        \\cmp w18, w19, asr #0
        \\cmp w20, w21, asr #22
        \\cmp w22, w23, asr #31
        \\cmp x0, x3
        \\cmp xzr, x4
        \\cmp x5, xzr
        \\cmp x6, x7
        \\cmp x8, x9, lsl #15
        \\cmp x10, x11, lsl #63
        \\cmp x12, x13, lsr #0
        \\cmp x14, x15, lsr #41
        \\cmp x16, x17, lsr #63
        \\cmp x18, x19, asr #0
        \\cmp x20, x21, asr #55
        \\cmp x22, x23, asr #63
        \\neg w29, w30
        \\neg w30, wzr
        \\neg wzr, w0
        \\neg w28, w27
        \\neg w26, w25, lsl #29
        \\neg w24, w23, lsl #31
        \\neg w22, w21, lsr #0
        \\neg w20, w19, lsr #1
        \\neg w18, w17, lsr #31
        \\neg w16, w15, asr #0
        \\neg w14, w13, asr #12
        \\neg w12, w11, asr #31
        \\neg x29, x30
        \\neg x30, xzr
        \\neg xzr, x0
        \\neg x28, x27
        \\neg x26, x25, lsl #29
        \\neg x24, x23, lsl #31
        \\neg x22, x21, lsr #0
        \\neg x20, x19, lsr #1
        \\neg x18, x17, lsr #31
        \\neg x16, x15, asr #0
        \\neg x14, x13, asr #12
        \\neg x12, x11, asr #31
        \\negs w29, w30
        \\negs w30, wzr
        \\cmp wzr, w0
        \\negs w28, w27
        \\negs w26, w25, lsl #29
        \\negs w24, w23, lsl #31
        \\negs w22, w21, lsr #0
        \\negs w20, w19, lsr #1
        \\negs w18, w17, lsr #31
        \\negs w16, w15, asr #0
        \\negs w14, w13, asr #12
        \\negs w12, w11, asr #31
        \\negs x29, x30
        \\negs x30, xzr
        \\cmp xzr, x0
        \\negs x28, x27
        \\negs x26, x25, lsl #29
        \\negs x24, x23, lsl #31
        \\negs x22, x21, lsr #0
        \\negs x20, x19, lsr #1
        \\negs x18, x17, lsr #31
        \\negs x16, x15, asr #0
        \\negs x14, x13, asr #12
        \\negs x12, x11, asr #31
        \\adc w29, w27, w25
        \\adc wzr, w3, w4
        \\adc w9, wzr, w10
        \\adc w20, w0, wzr
        \\adc x29, x27, x25
        \\adc xzr, x3, x4
        \\adc x9, xzr, x10
        \\adc x20, x0, xzr
        \\adcs w29, w27, w25
        \\adcs wzr, w3, w4
        \\adcs w9, wzr, w10
        \\adcs w20, w0, wzr
        \\adcs x29, x27, x25
        \\adcs xzr, x3, x4
        \\adcs x9, xzr, x10
        \\adcs x20, x0, xzr
        \\sbc w29, w27, w25
        \\sbc wzr, w3, w4
        \\ngc w9, w10
        \\sbc w20, w0, wzr
        \\sbc x29, x27, x25
        \\sbc xzr, x3, x4
        \\ngc x9, x10
        \\sbc x20, x0, xzr
        \\sbcs w29, w27, w25
        \\sbcs wzr, w3, w4
        \\ngcs w9, w10
        \\sbcs w20, w0, wzr
        \\sbcs x29, x27, x25
        \\sbcs xzr, x3, x4
        \\ngcs x9, x10
        \\sbcs x20, x0, xzr
        \\ngc w3, w12
        \\ngc wzr, w9
        \\ngc w23, wzr
        \\ngc x29, x30
        \\ngc xzr, x0
        \\ngc x0, xzr
        \\ngcs w3, w12
        \\ngcs wzr, w9
        \\ngcs w23, wzr
        \\ngcs x29, x30
        \\ngcs xzr, x0
        \\ngcs x0, xzr
        \\sbfx x1, x2, #3, #2
        \\asr x3, x4, #63
        \\asr wzr, wzr, #31
        \\sbfx w12, w9, #0, #1
        \\ubfiz x4, x5, #52, #11
        \\ubfx xzr, x4, #0, #1
        \\ubfiz x4, xzr, #1, #6
        \\lsr x5, x6, #12
        \\bfi x4, x5, #52, #11
        \\bfxil xzr, x4, #0, #1
        \\bfc x4, #1, #6
        \\bfxil x5, x6, #12, #52
        \\sxtb w1, w2
        \\sxtb xzr, w3
        \\sxth w9, w10
        \\sxth x0, w1
        \\sxtw x3, w30
        \\uxtb w1, w2
        \\uxth w9, w10
        \\ubfx x3, x30, #0, #32
        \\asr w3, w2, #0
        \\asr w9, w10, #31
        \\asr x20, x21, #63
        \\asr w1, wzr, #3
        \\lsr w3, w2, #0
        \\lsr w9, w10, #31
        \\lsr x20, x21, #63
        \\lsr wzr, wzr, #3
        \\lsr w3, w2, #0
        \\lsl w9, w10, #31
        \\lsl x20, x21, #63
        \\lsl w1, wzr, #3
        \\sbfx w9, w10, #0, #1
        \\sbfiz x2, x3, #63, #1
        \\asr x19, x20, #0
        \\sbfiz x9, x10, #5, #59
        \\asr w9, w10, #0
        \\sbfiz w11, w12, #31, #1
        \\sbfiz w13, w14, #29, #3
        \\sbfiz xzr, xzr, #10, #11
        \\sbfx w9, w10, #0, #1
        \\asr x2, x3, #63
        \\asr x19, x20, #0
        \\asr x9, x10, #5
        \\asr w9, w10, #0
        \\asr w11, w12, #31
        \\asr w13, w14, #29
        \\sbfx xzr, xzr, #10, #11
        \\bfxil w9, w10, #0, #1
        \\bfi x2, x3, #63, #1
        \\bfxil x19, x20, #0, #64
        \\bfi x9, x10, #5, #59
        \\bfxil w9, w10, #0, #32
        \\bfi w11, w12, #31, #1
        \\bfi w13, w14, #29, #3
        \\bfc xzr, #10, #11
        \\bfxil w9, w10, #0, #1
        \\bfxil x2, x3, #63, #1
        \\bfxil x19, x20, #0, #64
        \\bfxil x9, x10, #5, #59
        \\bfxil w9, w10, #0, #32
        \\bfxil w11, w12, #31, #1
        \\bfxil w13, w14, #29, #3
        \\bfxil xzr, xzr, #10, #11
        \\ubfx w9, w10, #0, #1
        \\lsl x2, x3, #63
        \\lsr x19, x20, #0
        \\lsl x9, x10, #5
        \\lsr w9, w10, #0
        \\lsl w11, w12, #31
        \\lsl w13, w14, #29
        \\ubfiz xzr, xzr, #10, #11
        \\ubfx w9, w10, #0, #1
        \\lsr x2, x3, #63
        \\lsr x19, x20, #0
        \\lsr x9, x10, #5
        \\lsr w9, w10, #0
        \\lsr w11, w12, #31
        \\lsr w13, w14, #29
        \\ubfx xzr, xzr, #10, #11
        \\cbz w5, #4
        \\cbz x5, #0
        \\cbnz x2, #-4
        \\cbnz x26, #1048572
        \\cbz wzr, #0
        \\cbnz xzr, #0
        \\b.ne #4
        \\b.ge #1048572
        \\b.ge #-4
        \\ccmp w1, #31, #0, eq
        \\ccmp w3, #0, #15, hs
        \\ccmp wzr, #15, #13, hs
        \\ccmp x9, #31, #0, le
        \\ccmp x3, #0, #15, gt
        \\ccmp xzr, #5, #7, ne
        \\ccmn w1, #31, #0, eq
        \\ccmn w3, #0, #15, hs
        \\ccmn wzr, #15, #13, hs
        \\ccmn x9, #31, #0, le
        \\ccmn x3, #0, #15, gt
        \\ccmn xzr, #5, #7, ne
        \\ccmp w1, wzr, #0, eq
        \\ccmp w3, w0, #15, hs
        \\ccmp wzr, w15, #13, hs
        \\ccmp x9, xzr, #0, le
        \\ccmp x3, x0, #15, gt
        \\ccmp xzr, x5, #7, ne
        \\ccmn w1, wzr, #0, eq
        \\ccmn w3, w0, #15, hs
        \\ccmn wzr, w15, #13, hs
        \\ccmn x9, xzr, #0, le
        \\ccmn x3, x0, #15, gt
        \\ccmn xzr, x5, #7, ne
        \\csel w1, w0, w19, ne
        \\csel wzr, w5, w9, eq
        \\csel w9, wzr, w30, gt
        \\csel w1, w28, wzr, mi
        \\csel x19, x23, x29, lt
        \\csel xzr, x3, x4, ge
        \\csel x5, xzr, x6, hs
        \\csel x7, x8, xzr, lo
        \\csinc w1, w0, w19, ne
        \\csinc wzr, w5, w9, eq
        \\csinc w9, wzr, w30, gt
        \\csinc w1, w28, wzr, mi
        \\csinc x19, x23, x29, lt
        \\csinc xzr, x3, x4, ge
        \\csinc x5, xzr, x6, hs
        \\csinc x7, x8, xzr, lo
        \\csinv w1, w0, w19, ne
        \\csinv wzr, w5, w9, eq
        \\csinv w9, wzr, w30, gt
        \\csinv w1, w28, wzr, mi
        \\csinv x19, x23, x29, lt
        \\csinv xzr, x3, x4, ge
        \\csinv x5, xzr, x6, hs
        \\csinv x7, x8, xzr, lo
        \\csneg w1, w0, w19, ne
        \\csneg wzr, w5, w9, eq
        \\csneg w9, wzr, w30, gt
        \\csneg w1, w28, wzr, mi
        \\csneg x19, x23, x29, lt
        \\csneg xzr, x3, x4, ge
        \\csneg x5, xzr, x6, hs
        \\csneg x7, x8, xzr, lo
        \\cset w3, eq
        \\cset x9, pl
        \\csetm w20, ne
        \\csetm x30, ge
        \\csinc w2, wzr, wzr, al
        \\csinv x3, xzr, xzr, nv
        \\cinc w3, w5, gt
        \\cinc wzr, w4, le
        \\cset w9, lt
        \\cinc x3, x5, gt
        \\cinc xzr, x4, le
        \\cset x9, lt
        \\csinc w5, w6, w6, nv
        \\csinc x1, x2, x2, al
        \\cinv w3, w5, gt
        \\cinv wzr, w4, le
        \\csetm w9, lt
        \\cinv x3, x5, gt
        \\cinv xzr, x4, le
        \\csetm x9, lt
        \\csinv x1, x0, x0, al
        \\csinv w9, w8, w8, nv
        \\cneg w3, w5, gt
        \\cneg wzr, w4, le
        \\cneg w9, wzr, lt
        \\cneg x3, x5, gt
        \\cneg xzr, x4, le
        \\cneg x9, xzr, lt
        \\csneg x4, x8, x8, al
        \\csinv w9, w8, w8, nv
        \\rbit w0, w7
        \\rbit x18, x3
        \\rev16 w17, w1
        \\rev16 x5, x2
        \\rev w18, w0
        \\rev32 x20, x1
        \\rev x22, x2
        \\clz w24, w3
        \\clz x26, x4
        \\cls w3, w5
        \\cls x20, x5
        \\udiv w0, w7, w10
        \\udiv x9, x22, x4
        \\sdiv w12, w21, w0
        \\sdiv x13, x2, x1
        \\lsl w11, w12, w13
        \\lsl x14, x15, x16
        \\lsr w17, w18, w19
        \\lsr x20, x21, x22
        \\asr w23, w24, w25
        \\asr x26, x27, x28
        \\ror w0, w1, w2
        \\ror x3, x4, x5
        \\lsl w6, w7, w8
        \\lsl x9, x10, x11
        \\lsr w12, w13, w14
        \\lsr x15, x16, x17
        \\asr w18, w19, w20
        \\asr x21, x22, x23
        \\ror w24, w25, w26
        \\ror x27, x28, x29
        \\smulh x30, x29, x28
        \\smulh xzr, x27, x26
        \\umulh x30, x29, x28
        \\umulh x23, x30, xzr
        \\madd w1, w3, w7, w4
        \\madd wzr, w0, w9, w11
        \\madd w13, wzr, w4, w4
        \\madd w19, w30, wzr, w29
        \\mul w4, w5, w6
        \\madd x1, x3, x7, x4
        \\madd xzr, x0, x9, x11
        \\madd x13, xzr, x4, x4
        \\madd x19, x30, xzr, x29
        \\mul x4, x5, x6
        \\msub w1, w3, w7, w4
        \\msub wzr, w0, w9, w11
        \\msub w13, wzr, w4, w4
        \\msub w19, w30, wzr, w29
        \\mneg w4, w5, w6
        \\msub x1, x3, x7, x4
        \\msub xzr, x0, x9, x11
        \\msub x13, xzr, x4, x4
        \\msub x19, x30, xzr, x29
        \\mneg x4, x5, x6
        \\smaddl x3, w5, w2, x9
        \\smaddl xzr, w10, w11, x12
        \\smaddl x13, wzr, w14, x15
        \\smaddl x16, w17, wzr, x18
        \\smull x19, w20, w21
        \\smsubl x3, w5, w2, x9
        \\smsubl xzr, w10, w11, x12
        \\smsubl x13, wzr, w14, x15
        \\smsubl x16, w17, wzr, x18
        \\smnegl x19, w20, w21
        \\umaddl x3, w5, w2, x9
        \\umaddl xzr, w10, w11, x12
        \\umaddl x13, wzr, w14, x15
        \\umaddl x16, w17, wzr, x18
        \\umull x19, w20, w21
        \\umsubl x3, w5, w2, x9
        \\umsubl xzr, w10, w11, x12
        \\umsubl x13, wzr, w14, x15
        \\umsubl x16, w17, wzr, x18
        \\umnegl x19, w20, w21
        \\smulh x30, x29, x28
        \\smulh xzr, x27, x26
        \\smulh x25, xzr, x24
        \\smulh x23, x22, xzr
        \\umulh x30, x29, x28
        \\umulh xzr, x27, x26
        \\umulh x25, xzr, x24
        \\umulh x23, x22, xzr
        \\mul w3, w4, w5
        \\mul wzr, w6, w7
        \\mul w8, wzr, w9
        \\mul w10, w11, wzr
        \\mul x12, x13, x14
        \\mul xzr, x15, x16
        \\mul x17, xzr, x18
        \\mul x19, x20, xzr
        \\mneg w21, w22, w23
        \\mneg wzr, w24, w25
        \\mneg w26, wzr, w27
        \\mneg w28, w29, wzr
        \\smull x11, w13, w17
        \\umull x11, w13, w17
        \\smnegl x11, w13, w17
        \\umnegl x11, w13, w17
        \\svc #0
        \\svc #65535
        \\hvc #1
        \\smc #12000
        \\brk #12
        \\hlt #123
        \\dcps1 #42
        \\dcps2 #9
        \\dcps3 #1000
        \\dcps1
        \\dcps2
        \\dcps3
        \\extr w3, w5, w7, #0
        \\extr w11, w13, w17, #31
        \\extr x3, x5, x7, #15
        \\extr x11, x13, x17, #63
        \\ror x19, x23, #24
        \\ror x29, xzr, #63
        \\ror w9, w13, #31
        \\fcmp s3, s5
        \\fcmp s31, #0.0
        \\fcmp s31, #0.0
        \\fcmpe s29, s30
        \\fcmpe s15, #0.0
        \\fcmpe s15, #0.0
        \\fcmp d4, d12
        \\fcmp d23, #0.0
        \\fcmp d23, #0.0
        \\fcmpe d26, d22
        \\fcmpe d29, #0.0
        \\fcmpe d29, #0.0
        \\fccmp s1, s31, #0, eq
        \\fccmp s3, s0, #15, hs
        \\fccmp s31, s15, #13, hs
        \\fccmp d9, d31, #0, le
        \\fccmp d3, d0, #15, gt
        \\fccmp d31, d5, #7, ne
        \\fccmpe s1, s31, #0, eq
        \\fccmpe s3, s0, #15, hs
        \\fccmpe s31, s15, #13, hs
        \\fccmpe d9, d31, #0, le
        \\fccmpe d3, d0, #15, gt
        \\fccmpe d31, d5, #7, ne
        \\fcsel s3, s20, s9, pl
        \\fcsel d9, d10, d11, mi
        \\fmov s0, s1
        \\fabs s2, s3
        \\fneg s4, s5
        \\fsqrt s6, s7
        \\fcvt d8, s9
        \\fcvt h10, s11
        \\frintn s12, s13
        \\frintp s14, s15
        \\frintm s16, s17
        \\frintz s18, s19
        \\frinta s20, s21
        \\frintx s22, s23
        \\frinti s24, s25
        \\fmov d0, d1
        \\fabs d2, d3
        \\fneg d4, d5
        \\fsqrt d6, d7
        \\fcvt s8, d9
        \\fcvt h10, d11
        \\frintn d12, d13
        \\frintp d14, d15
        \\frintm d16, d17
        \\frintz d18, d19
        \\frinta d20, d21
        \\frintx d22, d23
        \\frinti d24, d25
        \\fcvt s26, h27
        \\fcvt d28, h29
        \\fmul s20, s19, s17
        \\fdiv s1, s2, s3
        \\fadd s4, s5, s6
        \\fsub s7, s8, s9
        \\fmax s10, s11, s12
        \\fmin s13, s14, s15
        \\fmaxnm s16, s17, s18
        \\fminnm s19, s20, s21
        \\fnmul s22, s23, s24
        \\fmul d20, d19, d17
        \\fdiv d1, d2, d3
        \\fadd d4, d5, d6
        \\fsub d7, d8, d9
        \\fmax d10, d11, d12
        \\fmin d13, d14, d15
        \\fmaxnm d16, d17, d18
        \\fminnm d19, d20, d21
        \\fnmul d22, d23, d24
        \\fmadd s3, s5, s6, s31
        \\fmadd d3, d13, d0, d23
        \\fmsub s3, s5, s6, s31
        \\fmsub d3, d13, d0, d23
        \\fnmadd s3, s5, s6, s31
        \\fnmadd d3, d13, d0, d23
        \\fnmsub s3, s5, s6, s31
        \\fnmsub d3, d13, d0, d23
        \\fcvtzs w3, h5, #1
        \\fcvtzs wzr, h20, #13
        \\fcvtzs w19, h0, #32
        \\fcvtzs x3, h5, #1
        \\fcvtzs x12, h30, #45
        \\fcvtzs x19, h0, #64
        \\fcvtzs w3, s5, #1
        \\fcvtzs wzr, s20, #13
        \\fcvtzs w19, s0, #32
        \\fcvtzs x3, s5, #1
        \\fcvtzs x12, s30, #45
        \\fcvtzs x19, s0, #64
        \\fcvtzs w3, d5, #1
        \\fcvtzs wzr, d20, #13
        \\fcvtzs w19, d0, #32
        \\fcvtzs x3, d5, #1
        \\fcvtzs x12, d30, #45
        \\fcvtzs x19, d0, #64
        \\fcvtzu w3, h5, #1
        \\fcvtzu wzr, h20, #13
        \\fcvtzu w19, h0, #32
        \\fcvtzu x3, h5, #1
        \\fcvtzu x12, h30, #45
        \\fcvtzu x19, h0, #64
        \\fcvtzu w3, s5, #1
        \\fcvtzu wzr, s20, #13
        \\fcvtzu w19, s0, #32
        \\fcvtzu x3, s5, #1
        \\fcvtzu x12, s30, #45
        \\fcvtzu x19, s0, #64
        \\fcvtzu w3, d5, #1
        \\fcvtzu wzr, d20, #13
        \\fcvtzu w19, d0, #32
        \\fcvtzu x3, d5, #1
        \\fcvtzu x12, d30, #45
        \\fcvtzu x19, d0, #64
        \\scvtf h23, w19, #1
        \\scvtf h31, wzr, #20
        \\scvtf h14, w0, #32
        \\scvtf h23, x19, #1
        \\scvtf h31, xzr, #20
        \\scvtf h14, x0, #64
        \\scvtf s23, w19, #1
        \\scvtf s31, wzr, #20
        \\scvtf s14, w0, #32
        \\scvtf s23, x19, #1
        \\scvtf s31, xzr, #20
        \\scvtf s14, x0, #64
        \\scvtf d23, w19, #1
        \\scvtf d31, wzr, #20
        \\scvtf d14, w0, #32
        \\scvtf d23, x19, #1
        \\scvtf d31, xzr, #20
        \\scvtf d14, x0, #64
        \\ucvtf h23, w19, #1
        \\ucvtf h31, wzr, #20
        \\ucvtf h14, w0, #32
        \\ucvtf h23, x19, #1
        \\ucvtf h31, xzr, #20
        \\ucvtf h14, x0, #64
        \\ucvtf s23, w19, #1
        \\ucvtf s31, wzr, #20
        \\ucvtf s14, w0, #32
        \\ucvtf s23, x19, #1
        \\ucvtf s31, xzr, #20
        \\ucvtf s14, x0, #64
        \\ucvtf d23, w19, #1
        \\ucvtf d31, wzr, #20
        \\ucvtf d14, w0, #32
        \\ucvtf d23, x19, #1
        \\ucvtf d31, xzr, #20
        \\ucvtf d14, x0, #64
        \\fcvtns w3, h31
        \\fcvtns xzr, h12
        \\fcvtnu wzr, h12
        \\fcvtnu x0, h0
        \\fcvtps wzr, h9
        \\fcvtps x12, h20
        \\fcvtpu w30, h23
        \\fcvtpu x29, h3
        \\fcvtms w2, h3
        \\fcvtms x4, h5
        \\fcvtmu w6, h7
        \\fcvtmu x8, h9
        \\fcvtzs w10, h11
        \\fcvtzs x12, h13
        \\fcvtzu w14, h15
        \\fcvtzu x15, h16
        \\scvtf h17, w18
        \\scvtf h19, x20
        \\ucvtf h21, w22
        \\scvtf h23, x24
        \\fcvtas w25, h26
        \\fcvtas x27, h28
        \\fcvtau w29, h30
        \\fcvtau xzr, h0
        \\fcvtns w3, s31
        \\fcvtns xzr, s12
        \\fcvtnu wzr, s12
        \\fcvtnu x0, s0
        \\fcvtps wzr, s9
        \\fcvtps x12, s20
        \\fcvtpu w30, s23
        \\fcvtpu x29, s3
        \\fcvtms w2, s3
        \\fcvtms x4, s5
        \\fcvtmu w6, s7
        \\fcvtmu x8, s9
        \\fcvtzs w10, s11
        \\fcvtzs x12, s13
        \\fcvtzu w14, s15
        \\fcvtzu x15, s16
        \\scvtf s17, w18
        \\scvtf s19, x20
        \\ucvtf s21, w22
        \\scvtf s23, x24
        \\fcvtas w25, s26
        \\fcvtas x27, s28
        \\fcvtau w29, s30
        \\fcvtau xzr, s0
        \\fcvtns w3, d31
        \\fcvtns xzr, d12
        \\fcvtnu wzr, d12
        \\fcvtnu x0, d0
        \\fcvtps wzr, d9
        \\fcvtps x12, d20
        \\fcvtpu w30, d23
        \\fcvtpu x29, d3
        \\fcvtms w2, d3
        \\fcvtms x4, d5
        \\fcvtmu w6, d7
        \\fcvtmu x8, d9
        \\fcvtzs w10, d11
        \\fcvtzs x12, d13
        \\fcvtzu w14, d15
        \\fcvtzu x15, d16
        \\scvtf d17, w18
        \\scvtf d19, x20
        \\ucvtf d21, w22
        \\ucvtf d23, x24
        \\fcvtas w25, d26
        \\fcvtas x27, d28
        \\fcvtau w29, d30
        \\fcvtau xzr, d0
        \\fmov w3, s9
        \\fmov s9, w3
        \\fmov x20, d31
        \\fmov d1, x15
        \\fmov x3, v12.d[1]
        \\fmov v1.d[1], x19
        \\fmov s2, #0.12500000
        \\fmov s3, #1.00000000
        \\fmov d30, #16.00000000
        \\fmov s4, #1.06250000
        \\fmov d10, #1.93750000
        \\fmov s12, #-1.00000000
        \\fmov d16, #8.50000000
        // \\ldr w3, #0
        // \\ldr x29, #4
        // \\ldrsw xzr, #-4
        // \\ldr s0, #8
        // \\ldr d0, #1048572
        // \\ldr q0, #-1048576
        // \\prfm pldl1strm, #0
        // \\prfm #22, #0
        // \\stxrb w18, w8, [sp]
        // \\stxrh w24, w15, [x16]
        // \\stxr w5, w6, [x17]
        // \\stxr w1, x10, [x21]
        // \\stxr w1, x10, [x21]
        // \\ldxrb w30, [x0]
        // \\ldxrh w17, [x4]
        // \\ldxr w22, [sp]
        // \\ldxr x11, [x29]
        // \\ldxr x11, [x29]
        // \\ldxr x11, [x29]
        // \\stxp w12, w11, w10, [sp]
        // \\stxp wzr, x27, x9, [x12]
        // \\ldxp w0, wzr, [sp]
        // \\ldxp x17, x0, [x18]
        // \\ldxp x17, x0, [x18]
        // \\stlxrb w12, w22, [x0]
        // \\stlxrh w10, w1, [x1]
        // \\stlxr w9, w2, [x2]
        // \\stlxr w9, x3, [sp]
        // \\ldaxrb w8, [x4]
        // \\ldaxrh w7, [x5]
        // \\ldaxr w6, [sp]
        // \\ldaxr x5, [x6]
        // \\ldaxr x5, [x6]
        // \\ldaxr x5, [x6]
        // \\stlxp w4, w5, w6, [sp]
        // \\stlxp wzr, x6, x7, [x1]
        // \\ldaxp w5, w18, [sp]
        // \\ldaxp x6, x19, [x22]
        // \\ldaxp x6, x19, [x22]
        // \\stlrb w24, [sp]
        // \\stlrh w25, [x30]
        // \\stlr w26, [x29]
        // \\stlr x27, [x28]
        // \\stlr x27, [x28]
        // \\stlr x27, [x28]
        // \\ldarb w23, [sp]
        // \\ldarh w22, [x30]
        // \\ldar wzr, [x29]
        // \\ldar x21, [x28]
        // \\ldar x21, [x28]
        // \\ldar x21, [x28]
        // \\sturb w9, [sp]
        // \\sturh wzr, [x12, #255]
        // \\stur w16, [x0, #-256]
        // \\stur x28, [x14, #1]
        // \\ldurb w1, [x20, #255]
        // \\ldurh w20, [x1, #255]
        // \\ldur w12, [sp, #255]
        // \\ldur xzr, [x12, #255]
        // \\ldursb x9, [x7, #-256]
        // \\ldursh x17, [x19, #-256]
        // \\ldursw x20, [x15, #-256]
        // \\prfum pldl2keep, [sp, #-256]
        // \\ldursb w19, [x1, #-256]
        // \\ldursh w15, [x21, #-256]
        // \\stur b0, [sp, #1]
        // \\stur h12, [x12, #-1]
        // \\stur s15, [x0, #255]
        // \\stur d31, [x5, #25]
        // \\stur q9, [x5]
        // \\ldur b3, [sp]
        // \\ldur h5, [x4, #-256]
        // \\ldur s7, [x12, #-1]
        // \\ldur d11, [x19, #4]
        // \\ldur q13, [x1, #2]
        // \\ldr wzr, [sp], #4
        // \\strb w9, [x2], #255
        // \\strb w10, [x3], #1
        // \\strb w10, [x3], #-256
        // \\strh w9, [x2], #255
        // \\strh w9, [x2], #1
        // \\strh w10, [x3], #-256
        // \\str w19, [sp], #255
        // \\str w20, [x30], #1
        // \\str w21, [x12], #-256
        // \\str xzr, [x9], #255
        // \\str x2, [x3], #1
        // \\str x19, [x12], #-256
        // \\ldrb w9, [x2], #255
        // \\ldrb w10, [x3], #1
        // \\ldrb w10, [x3], #-256
        // \\ldrh w9, [x2], #255
        // \\ldrh w9, [x2], #1
        // \\ldrh w10, [x3], #-256
        // \\ldr w19, [sp], #255
        // \\ldr w20, [x30], #1
        // \\ldr w21, [x12], #-256
        // \\ldr xzr, [x9], #255
        // \\ldr x2, [x3], #1
        // \\ldr x19, [x12], #-256
        // \\ldrsb xzr, [x9], #255
        // \\ldrsb x2, [x3], #1
        // \\ldrsb x19, [x12], #-256
        // \\ldrsh xzr, [x9], #255
        // \\ldrsh x2, [x3], #1
        // \\ldrsh x19, [x12], #-256
        // \\ldrsw xzr, [x9], #255
        // \\ldrsw x2, [x3], #1
        // \\ldrsw x19, [x12], #-256
        // \\ldrsb wzr, [x9], #255
        // \\ldrsb w2, [x3], #1
        // \\ldrsb w19, [x12], #-256
        // \\ldrsh wzr, [x9], #255
        // \\ldrsh w2, [x3], #1
        // \\ldrsh w19, [x12], #-256
        // \\str b0, [x0], #255
        // \\str b3, [x3], #1
        // \\str b5, [sp], #-256
        // \\str h10, [x10], #255
        // \\str h13, [x23], #1
        // \\str h15, [sp], #-256
        // \\str s20, [x20], #255
        // \\str s23, [x23], #1
        // \\str s25, [x0], #-256
        // \\str d20, [x20], #255
        // \\str d23, [x23], #1
        // \\str d25, [x0], #-256
        // \\ldr b0, [x0], #255
        // \\ldr b3, [x3], #1
        // \\ldr b5, [sp], #-256
        // \\ldr h10, [x10], #255
        // \\ldr h13, [x23], #1
        // \\ldr h15, [sp], #-256
        // \\ldr s20, [x20], #255
        // \\ldr s23, [x23], #1
        // \\ldr s25, [x0], #-256
        // \\ldr d20, [x20], #255
        // \\ldr d23, [x23], #1
        // \\ldr d25, [x0], #-256
        // \\ldr q20, [x1], #255
        // \\ldr q23, [x9], #1
        // \\ldr q25, [x20], #-256
        // \\str q10, [x1], #255
        // \\str q22, [sp], #1
        // \\str q21, [x20], #-256
        // \\ldr xzr, [sp, #0]!
        // \\ldr x3, [x4, #0]!
        // \\strb w9, [x2, #255]!
        // \\strb w10, [x3, #1]!
        // \\strb w10, [x3, #-256]!
        // \\strh w9, [x2, #255]!
        // \\strh w9, [x2, #1]!
        // \\strh w10, [x3, #-256]!
        // \\str w19, [sp, #255]!
        // \\str w20, [x30, #1]!
        // \\str w21, [x12, #-256]!
        // \\str xzr, [x9, #255]!
        // \\str x2, [x3, #1]!
        // \\str x19, [x12, #-256]!
        // \\ldrb w9, [x2, #255]!
        // \\ldrb w10, [x3, #1]!
        // \\ldrb w10, [x3, #-256]!
        // \\ldrh w9, [x2, #255]!
        // \\ldrh w9, [x2, #1]!
        // \\ldrh w10, [x3, #-256]!
        // \\ldr w19, [sp, #255]!
        // \\ldr w20, [x30, #1]!
        // \\ldr w21, [x12, #-256]!
        // \\ldr xzr, [x9, #255]!
        // \\ldr x2, [x3, #1]!
        // \\ldr x19, [x12, #-256]!
        // \\ldrsb xzr, [x9, #255]!
        // \\ldrsb x2, [x3, #1]!
        // \\ldrsb x19, [x12, #-256]!
        // \\ldrsh xzr, [x9, #255]!
        // \\ldrsh x2, [x3, #1]!
        // \\ldrsh x19, [x12, #-256]!
        // \\ldrsw xzr, [x9, #255]!
        // \\ldrsw x2, [x3, #1]!
        // \\ldrsw x19, [x12, #-256]!
        // \\ldrsb wzr, [x9, #255]!
        // \\ldrsb w2, [x3, #1]!
        // \\ldrsb w19, [x12, #-256]!
        // \\ldrsh wzr, [x9, #255]!
        // \\ldrsh w2, [x3, #1]!
        // \\ldrsh w19, [x12, #-256]!
        // \\str b0, [x0, #255]!
        // \\str b3, [x3, #1]!
        // \\str b5, [sp, #-256]!
        // \\str h10, [x10, #255]!
        // \\str h13, [x23, #1]!
        // \\str h15, [sp, #-256]!
        // \\str s20, [x20, #255]!
        // \\str s23, [x23, #1]!
        // \\str s25, [x0, #-256]!
        // \\str d20, [x20, #255]!
        // \\str d23, [x23, #1]!
        // \\str d25, [x0, #-256]!
        // \\ldr b0, [x0, #255]!
        // \\ldr b3, [x3, #1]!
        // \\ldr b5, [sp, #-256]!
        // \\ldr h10, [x10, #255]!
        // \\ldr h13, [x23, #1]!
        // \\ldr h15, [sp, #-256]!
        // \\ldr s20, [x20, #255]!
        // \\ldr s23, [x23, #1]!
        // \\ldr s25, [x0, #-256]!
        // \\ldr d20, [x20, #255]!
        // \\ldr d23, [x23, #1]!
        // \\ldr d25, [x0, #-256]!
        // \\ldr q20, [x1, #255]!
        // \\ldr q23, [x9, #1]!
        // \\ldr q25, [x20, #-256]!
        // \\str q10, [x1, #255]!
        // \\str q22, [sp, #1]!
        // \\str q21, [x20, #-256]!
        // \\sttrb w9, [sp]
        // \\sttrh wzr, [x12, #255]
        // \\sttr w16, [x0, #-256]
        // \\sttr x28, [x14, #1]
        // \\ldtrb w1, [x20, #255]
        // \\ldtrh w20, [x1, #255]
        // \\ldtr w12, [sp, #255]
        // \\ldtr xzr, [x12, #255]
        // \\ldtrsb x9, [x7, #-256]
        // \\ldtrsh x17, [x19, #-256]
        // \\ldtrsw x20, [x15, #-256]
        // \\ldtrsb w19, [x1, #-256]
        // \\ldtrsh w15, [x21, #-256]
        // \\ldr x0, [x0]
        // \\ldr x4, [x29]
        // \\ldr x30, [x12, #32760]
        // \\ldr x20, [sp, #8]
        // \\ldr xzr, [sp]
        // \\ldr w2, [sp]
        // \\ldr w17, [sp, #16380]
        // \\ldr w13, [x2, #4]
        // \\ldrsw x2, [x5, #4]
        // \\ldrsw x23, [sp, #16380]
        // \\ldrh w2, [x4]
        // \\ldrsh w23, [x6, #8190]
        // \\ldrsh wzr, [sp, #2]
        // \\ldrsh x29, [x2, #2]
        // \\ldrb w26, [x3, #121]
        // \\ldrb w12, [x2]
        // \\ldrsb w27, [sp, #4095]
        // \\ldrsb xzr, [x15]
        // \\str x30, [sp]
        // \\str w20, [x4, #16380]
        // \\strh w20, [x10, #14]
        // \\strh w17, [sp, #8190]
        // \\strb w23, [x3, #4095]
        // \\strb wzr, [x2]
        // \\ldr b31, [sp, #4095]
        // \\ldr h20, [x2, #8190]
        // \\ldr s10, [x19, #16380]
        // \\ldr d3, [x10, #32760]
        // \\str q12, [sp, #65520]
        // \\prfm pldl1keep, [sp, #8]
        // \\prfm pldl1strm, [x3{{(, #0)?}}]
        // \\prfm pldl2keep, [x5, #16]
        // \\prfm pldl2strm, [x2{{(, #0)?}}]
        // \\prfm pldl3keep, [x5{{(, #0)?}}]
        // \\prfm pldl3strm, [x6{{(, #0)?}}]
        // \\prfm plil1keep, [sp, #8]
        // \\prfm plil1strm, [x3{{(, #0)?}}]
        // \\prfm plil2keep, [x5, #16]
        // \\prfm plil2strm, [x2{{(, #0)?}}]
        // \\prfm plil3keep, [x5{{(, #0)?}}]
        // \\prfm plil3strm, [x6{{(, #0)?}}]
        // \\prfm pstl1keep, [sp, #8]
        // \\prfm pstl1strm, [x3{{(, #0)?}}]
        // \\prfm pstl2keep, [x5, #16]
        // \\prfm pstl2strm, [x2{{(, #0)?}}]
        // \\prfm pstl3keep, [x5{{(, #0)?}}]
        // \\prfm pstl3strm, [x6{{(, #0)?}}]
        // \\ldrb w3, [sp, x5]
        // \\ldrb w9, [x27, x6]
        // \\ldrsb w10, [x30, x7]
        // \\ldrb w11, [x29, x3, sxtx]
        // \\strb w12, [x28, xzr, sxtx]
        // \\ldrb w14, [x26, w6, uxtw]
        // \\ldrsb w15, [x25, w7, uxtw]
        // \\ldrb w17, [x23, w9, sxtw]
        // \\ldrsb x18, [x22, w10, sxtw]
        // \\ldrsh w3, [sp, x5]
        // \\ldrsh w9, [x27, x6]
        // \\ldrh w10, [x30, x7, lsl #1]
        // \\strh w11, [x29, x3, sxtx]
        // \\ldrh w12, [x28, xzr, sxtx]
        // \\ldrsh x13, [x27, x5, sxtx #1]
        // \\ldrh w14, [x26, w6, uxtw]
        // \\ldrh w15, [x25, w7, uxtw]
        // \\ldrsh w16, [x24, w8, uxtw #1]
        // \\ldrh w17, [x23, w9, sxtw]
        // \\ldrh w18, [x22, w10, sxtw]
        // \\strh w19, [x21, wzr, sxtw #1]
        // \\ldr w3, [sp, x5]
        // \\ldr s9, [x27, x6]
        // \\ldr w10, [x30, x7, lsl #2]
        // \\ldr w11, [x29, x3, sxtx]
        // \\str s12, [x28, xzr, sxtx]
        // \\str w13, [x27, x5, sxtx #2]
        // \\str w14, [x26, w6, uxtw]
        // \\ldr w15, [x25, w7, uxtw]
        // \\ldr w16, [x24, w8, uxtw #2]
        // \\ldrsw x17, [x23, w9, sxtw]
        // \\ldr w18, [x22, w10, sxtw]
        // \\ldrsw x19, [x21, wzr, sxtw #2]
        // \\ldr x3, [sp, x5]
        // \\str x9, [x27, x6]
        // \\ldr d10, [x30, x7, lsl #3]
        // \\str x11, [x29, x3, sxtx]
        // \\ldr x12, [x28, xzr, sxtx]
        // \\ldr x13, [x27, x5, sxtx #3]
        // \\prfm pldl1keep, [x26, w6, uxtw]
        // \\ldr x15, [x25, w7, uxtw]
        // \\ldr x16, [x24, w8, uxtw #3]
        // \\ldr x17, [x23, w9, sxtw]
        // \\ldr x18, [x22, w10, sxtw]
        // \\str d19, [x21, wzr, sxtw #3]
        // \\ldr q3, [sp, x5]
        // \\ldr q9, [x27, x6]
        // \\ldr q10, [x30, x7, lsl #4]
        // \\str q11, [x29, x3, sxtx]
        // \\str q12, [x28, xzr, sxtx]
        // \\str q13, [x27, x5, sxtx #4]
        // \\ldr q14, [x26, w6, uxtw]
        // \\ldr q15, [x25, w7, uxtw]
        // \\ldr q16, [x24, w8, uxtw #4]
        // \\ldr q17, [x23, w9, sxtw]
        // \\str q18, [x22, w10, sxtw]
        // \\ldr q19, [x21, wzr, sxtw #4]
        // \\ldp w3, w5, [sp]
        // \\stp wzr, w9, [sp, #252]
        // \\ldp w2, wzr, [sp, #-256]
        // \\ldp w9, w10, [sp, #4]
        // \\ldpsw x9, x10, [sp, #4]
        // \\ldpsw x9, x10, [x2, #-256]
        // \\ldpsw x20, x30, [sp, #252]
        // \\ldp x21, x29, [x2, #504]
        // \\ldp x22, x23, [x3, #-512]
        // \\ldp x24, x25, [x4, #8]
        // \\ldp s29, s28, [sp, #252]
        // \\stp s27, s26, [sp, #-256]
        // \\ldp s1, s2, [x3, #44]
        // \\stp d3, d5, [x9, #504]
        // \\stp d7, d11, [x10, #-512]
        // \\ldp d2, d3, [x30, #-8]
        // \\stp q3, q5, [sp]
        // \\stp q17, q19, [sp, #1008]
        // \\ldp q23, q29, [x1, #-1024]
        // \\ldp w3, w5, [sp], #0
        // \\stp wzr, w9, [sp], #252
        // \\ldp w2, wzr, [sp], #-256
        // \\ldp w9, w10, [sp], #4
        // \\ldpsw x9, x10, [sp], #4
        // \\ldpsw x9, x10, [x2], #-256
        // \\ldpsw x20, x30, [sp], #252
        // \\ldp x21, x29, [x2], #504
        // \\ldp x22, x23, [x3], #-512
        // \\ldp x24, x25, [x4], #8
        // \\ldp s29, s28, [sp], #252
        // \\stp s27, s26, [sp], #-256
        // \\ldp s1, s2, [x3], #44
        // \\stp d3, d5, [x9], #504
        // \\stp d7, d11, [x10], #-512
        // \\ldp d2, d3, [x30], #-8
        // \\stp q3, q5, [sp], #0
        // \\stp q17, q19, [sp], #1008
        // \\ldp q23, q29, [x1], #-1024
        // \\ldp w3, w5, [sp, #0]!
        // \\stp wzr, w9, [sp, #252]!
        // \\ldp w2, wzr, [sp, #-256]!
        // \\ldp w9, w10, [sp, #4]!
        // \\ldpsw x9, x10, [sp, #4]!
        // \\ldpsw x9, x10, [x2, #-256]!
        // \\ldpsw x20, x30, [sp, #252]!
        // \\ldp x21, x29, [x2, #504]!
        // \\ldp x22, x23, [x3, #-512]!
        // \\ldp x24, x25, [x4, #8]!
        // \\ldp s29, s28, [sp, #252]!
        // \\stp s27, s26, [sp, #-256]!
        // \\ldp s1, s2, [x3, #44]!
        // \\stp d3, d5, [x9, #504]!
        // \\stp d7, d11, [x10, #-512]!
        // \\ldp d2, d3, [x30, #-8]!
        // \\stp q3, q5, [sp, #0]!
        // \\stp q17, q19, [sp, #1008]!
        // \\ldp q23, q29, [x1, #-1024]!
        // \\ldnp w3, w5, [sp]
        // \\stnp wzr, w9, [sp, #252]
        // \\ldnp w2, wzr, [sp, #-256]
        // \\ldnp w9, w10, [sp, #4]
        // \\ldnp x21, x29, [x2, #504]
        // \\ldnp x22, x23, [x3, #-512]
        // \\ldnp x24, x25, [x4, #8]
        // \\ldnp s29, s28, [sp, #252]
        // \\stnp s27, s26, [sp, #-256]
        // \\ldnp s1, s2, [x3, #44]
        // \\stnp d3, d5, [x9, #504]
        // \\stnp d7, d11, [x10, #-512]
        // \\ldnp d2, d3, [x30, #-8]
        // \\stnp q3, q5, [sp]
        // \\stnp q17, q19, [sp, #1008]
        // \\ldnp q23, q29, [x1, #-1024]
        \\orr w3, w9, #0xffff0000
        \\orr wsp, w10, #0xe00000ff
        \\orr w9, w10, #0x3ff
        \\and w14, w15, #0x80008000
        \\and w12, w13, #0xffc3ffc3
        \\and w11, wzr, #0x30003
        \\eor w3, w6, #0xe0e0e0e0
        \\eor wsp, wzr, #0x3030303
        \\eor w16, w17, #0x81818181
        \\tst w18, #0xcccccccc
        \\ands w19, w20, #0x33333333
        \\ands w21, w22, #0x99999999
        \\tst w3, #0xaaaaaaaa
        \\tst wzr, #0x55555555
        \\eor x3, x5, #0xffffffffc000000
        \\and x9, x10, #0x7fffffffffff
        \\orr x11, x12, #0x8000000000000fff
        \\orr x3, x9, #0xffff0000ffff0000
        \\orr sp, x10, #0xe00000ffe00000ff
        \\orr x9, x10, #0x3ff000003ff
        \\and x14, x15, #0x8000800080008000
        \\and x12, x13, #0xffc3ffc3ffc3ffc3
        \\and x11, xzr, #0x3000300030003
        \\eor x3, x6, #0xe0e0e0e0e0e0e0e0
        \\eor sp, xzr, #0x303030303030303
        \\eor x16, x17, #0x8181818181818181
        \\tst x18, #0xcccccccccccccccc
        \\ands x19, x20, #0x3333333333333333
        \\ands x21, x22, #0x9999999999999999
        \\tst x3, #0xaaaaaaaaaaaaaaaa
        \\tst xzr, #0x5555555555555555
        // \\mov w3, #0xf000f
        // \\mov x10, #0xaaaaaaaaaaaaaaaa
        \\orr w3, wzr, #0xffff
        \\orr x9, xzr, #0xffff00000000
        \\and w12, w23, w21
        \\and w16, w15, w1, lsl #1
        \\and w9, w4, w10, lsl #31
        \\and w3, w30, w11
        \\and x3, x5, x7, lsl #63
        \\and x5, x14, x19, asr #4
        \\and w3, w17, w19, ror #31
        \\and w0, w2, wzr, lsr #17
        \\and w3, w30, w11, asr
        \\and xzr, x4, x26
        \\and w3, wzr, w20, ror
        \\and x7, x20, xzr, asr #63
        \\bic x13, x20, x14, lsl #47
        \\bic w2, w7, w9
        \\orr w2, w7, w0, asr #31
        \\orr x8, x9, x10, lsl #12
        \\orn x3, x5, x7, asr
        \\orn w2, w5, w29
        \\ands w7, wzr, w9, lsl #1
        \\ands x3, x5, x20, ror #63
        \\bics w3, w5, w7
        \\bics x3, xzr, x3, lsl #1
        \\tst w3, w7, lsl #31
        \\tst x2, x20, asr
        \\mov x3, x6
        \\mov x3, xzr
        \\mov wzr, w2
        \\mov w3, w5
        \\movz w1, #65535
        \\movz w2, #0, lsl #16
        \\movn w2, #1234
        \\movz x2, #1234, lsl #32
        \\movk xzr, #4321, lsl #48
        \\movz x2, #0
        \\movk w3, #0
        \\movz x4, #0, lsl #16
        \\movk w5, #0, lsl #16
        \\movz x6, #0, lsl #32
        \\movk x7, #0, lsl #32
        \\movz x8, #0, lsl #48
        \\movk x9, #0, lsl #48
        \\adr x2, #1600
        \\adrp x21, #6553600
        \\adr x0, #262144
        \\nop
        \\hint #127
        \\nop
        \\yield
        \\wfe
        \\wfi
        \\sev
        \\sevl
        \\dgh
        \\clrex
        \\clrex #0
        \\clrex #7
        \\clrex
        \\dsb #12
        \\dsb sy
        \\dsb oshld
        \\dsb oshst
        \\dsb osh
        \\dsb nshld
        \\dsb nshst
        \\dsb nsh
        \\dsb ishld
        \\dsb ishst
        \\dsb ish
        \\dsb ld
        \\dsb st
        \\dsb sy
        \\dmb #0
        \\dmb #12
        \\dmb sy
        \\dmb oshld
        \\dmb oshst
        \\dmb osh
        \\dmb nshld
        \\dmb nshst
        \\dmb nsh
        \\dmb ishld
        \\dmb ishst
        \\dmb ish
        \\dmb ld
        \\dmb st
        \\dmb sy
        \\isb
        \\isb #12
        \\msr SPSel, #0
        \\msr DAIFSet, #15
        \\msr DAIFClr, #12
        \\sys #7, c5, c9, #7, x5
        \\sys #0, c15, c15, #2
        \\sysl x9, #7, c5, c9, #7
        \\sysl x1, #0, c15, c15, #2
        \\ic ialluis
        \\ic iallu
        \\ic ivau, x9
        \\dc zva, x12
        \\dc ivac
        \\dc isw, x2
        \\dc cvac, x9
        \\dc csw, x10
        \\dc cvau, x0
        \\dc civac, x3
        \\dc cisw, x30
        \\msr TEECR32_EL1, x12
        \\msr OSDTRRX_EL1, x12
        \\msr MDCCINT_EL1, x12
        \\msr MDSCR_EL1, x12
        \\msr OSDTRTX_EL1, x12
        \\msr DBGDTR_EL0, x12
        \\msr DBGDTRTX_EL0, x12
        \\msr OSECCR_EL1, x12
        \\msr DBGVCR32_EL2, x12
        \\msr DBGBVR0_EL1, x12
        \\msr DBGBVR1_EL1, x12
        \\msr DBGBVR2_EL1, x12
        \\msr DBGBVR3_EL1, x12
        \\msr DBGBVR4_EL1, x12
        \\msr DBGBVR5_EL1, x12
        \\msr DBGBVR6_EL1, x12
        \\msr DBGBVR7_EL1, x12
        \\msr DBGBVR8_EL1, x12
        \\msr DBGBVR9_EL1, x12
        \\msr DBGBVR10_EL1, x12
        \\msr DBGBVR11_EL1, x12
        \\msr DBGBVR12_EL1, x12
        \\msr DBGBVR13_EL1, x12
        \\msr DBGBVR14_EL1, x12
        \\msr DBGBVR15_EL1, x12
        \\msr DBGBCR0_EL1, x12
        \\msr DBGBCR1_EL1, x12
        \\msr DBGBCR2_EL1, x12
        \\msr DBGBCR3_EL1, x12
        \\msr DBGBCR4_EL1, x12
        \\msr DBGBCR5_EL1, x12
        \\msr DBGBCR6_EL1, x12
        \\msr DBGBCR7_EL1, x12
        \\msr DBGBCR8_EL1, x12
        \\msr DBGBCR9_EL1, x12
        \\msr DBGBCR10_EL1, x12
        \\msr DBGBCR11_EL1, x12
        \\msr DBGBCR12_EL1, x12
        \\msr DBGBCR13_EL1, x12
        \\msr DBGBCR14_EL1, x12
        \\msr DBGBCR15_EL1, x12
        \\msr DBGWVR0_EL1, x12
        \\msr DBGWVR1_EL1, x12
        \\msr DBGWVR2_EL1, x12
        \\msr DBGWVR3_EL1, x12
        \\msr DBGWVR4_EL1, x12
        \\msr DBGWVR5_EL1, x12
        \\msr DBGWVR6_EL1, x12
        \\msr DBGWVR7_EL1, x12
        \\msr DBGWVR8_EL1, x12
        \\msr DBGWVR9_EL1, x12
        \\msr DBGWVR10_EL1, x12
        \\msr DBGWVR11_EL1, x12
        \\msr DBGWVR12_EL1, x12
        \\msr DBGWVR13_EL1, x12
        \\msr DBGWVR14_EL1, x12
        \\msr DBGWVR15_EL1, x12
        \\msr DBGWCR0_EL1, x12
        \\msr DBGWCR1_EL1, x12
        \\msr DBGWCR2_EL1, x12
        \\msr DBGWCR3_EL1, x12
        \\msr DBGWCR4_EL1, x12
        \\msr DBGWCR5_EL1, x12
        \\msr DBGWCR6_EL1, x12
        \\msr DBGWCR7_EL1, x12
        \\msr DBGWCR8_EL1, x12
        \\msr DBGWCR9_EL1, x12
        \\msr DBGWCR10_EL1, x12
        \\msr DBGWCR11_EL1, x12
        \\msr DBGWCR12_EL1, x12
        \\msr DBGWCR13_EL1, x12
        \\msr DBGWCR14_EL1, x12
        \\msr DBGWCR15_EL1, x12
        \\msr TEEHBR32_EL1, x12
        \\msr OSLAR_EL1, x12
        \\msr OSDLR_EL1, x12
        \\msr DBGPRCR_EL1, x12
        \\msr DBGCLAIMSET_EL1, x12
        \\msr DBGCLAIMCLR_EL1, x12
        \\msr CSSELR_EL1, x12
        \\msr VPIDR_EL2, x12
        \\msr VMPIDR_EL2, x12
        \\msr SCTLR_EL1, x12
        \\msr SCTLR_EL2, x12
        \\msr SCTLR_EL3, x12
        \\msr ACTLR_EL1, x12
        \\msr ACTLR_EL2, x12
        \\msr ACTLR_EL3, x12
        \\msr CPACR_EL1, x12
        \\msr HCR_EL2, x12
        \\msr SCR_EL3, x12
        \\msr MDCR_EL2, x12
        \\msr SDER32_EL3, x12
        \\msr CPTR_EL2, x12
        \\msr CPTR_EL3, x12
        \\msr HSTR_EL2, x12
        \\msr HACR_EL2, x12
        \\msr MDCR_EL3, x12
        \\msr TTBR0_EL1, x12
        \\msr TTBR0_EL2, x12
        \\msr TTBR0_EL3, x12
        \\msr TTBR1_EL1, x12
        \\msr TCR_EL1, x12
        \\msr TCR_EL2, x12
        \\msr TCR_EL3, x12
        \\msr VTTBR_EL2, x12
        \\msr VTCR_EL2, x12
        \\msr DACR32_EL2, x12
        \\msr SPSR_EL1, x12
        \\msr SPSR_EL2, x12
        \\msr SPSR_EL3, x12
        \\msr ELR_EL1, x12
        \\msr ELR_EL2, x12
        \\msr ELR_EL3, x12
        \\msr SP_EL0, x12
        \\msr SP_EL1, x12
        \\msr SP_EL2, x12
        \\msr SPSel, x12
        \\msr NZCV, x12
        \\msr DAIF, x12
        \\msr CurrentEL, x12
        \\msr SPSR_irq, x12
        \\msr SPSR_abt, x12
        \\msr SPSR_und, x12
        \\msr SPSR_fiq, x12
        \\msr FPCR, x12
        \\msr FPSR, x12
        \\msr DSPSR_EL0, x12
        \\msr DLR_EL0, x12
        \\msr IFSR32_EL2, x12
        \\msr AFSR0_EL1, x12
        \\msr AFSR0_EL2, x12
        \\msr AFSR0_EL3, x12
        \\msr AFSR1_EL1, x12
        \\msr AFSR1_EL2, x12
        \\msr AFSR1_EL3, x12
        \\msr ESR_EL1, x12
        \\msr ESR_EL2, x12
        \\msr ESR_EL3, x12
        \\msr FPEXC32_EL2, x12
        \\msr FAR_EL1, x12
        \\msr FAR_EL2, x12
        \\msr FAR_EL3, x12
        \\msr HPFAR_EL2, x12
        \\msr PAR_EL1, x12
        \\msr PMCR_EL0, x12
        \\msr PMCNTENSET_EL0, x12
        \\msr PMCNTENCLR_EL0, x12
        \\msr PMOVSCLR_EL0, x12
        \\msr PMSELR_EL0, x12
        \\msr PMCCNTR_EL0, x12
        \\msr PMXEVTYPER_EL0, x12
        \\msr PMXEVCNTR_EL0, x12
        \\msr PMUSERENR_EL0, x12
        \\msr PMINTENSET_EL1, x12
        \\msr PMINTENCLR_EL1, x12
        \\msr PMOVSSET_EL0, x12
        \\msr MAIR_EL1, x12
        \\msr MAIR_EL2, x12
        \\msr MAIR_EL3, x12
        \\msr AMAIR_EL1, x12
        \\msr AMAIR_EL2, x12
        \\msr AMAIR_EL3, x12
        \\msr VBAR_EL1, x12
        \\msr VBAR_EL2, x12
        \\msr VBAR_EL3, x12
        \\msr RMR_EL1, x12
        \\msr RMR_EL2, x12
        \\msr RMR_EL3, x12
        \\msr TPIDR_EL0, x12
        \\msr TPIDR_EL2, x12
        \\msr TPIDR_EL3, x12
        \\msr TPIDRRO_EL0, x12
        \\msr TPIDR_EL1, x12
        \\msr CNTFRQ_EL0, x12
        \\msr CNTVOFF_EL2, x12
        \\msr CNTKCTL_EL1, x12
        \\msr CNTHCTL_EL2, x12
        \\msr CNTP_TVAL_EL0, x12
        \\msr CNTHP_TVAL_EL2, x12
        \\msr CNTPS_TVAL_EL1, x12
        \\msr CNTP_CTL_EL0, x12
        \\msr CNTHP_CTL_EL2, x12
        \\msr CNTPS_CTL_EL1, x12
        \\msr CNTP_CVAL_EL0, x12
        \\msr CNTHP_CVAL_EL2, x12
        \\msr CNTPS_CVAL_EL1, x12
        \\msr CNTV_TVAL_EL0, x12
        \\msr CNTV_CTL_EL0, x12
        \\msr CNTV_CVAL_EL0, x12
        \\msr PMEVCNTR0_EL0, x12
        \\msr PMEVCNTR1_EL0, x12
        \\msr PMEVCNTR2_EL0, x12
        \\msr PMEVCNTR3_EL0, x12
        \\msr PMEVCNTR4_EL0, x12
        \\msr PMEVCNTR5_EL0, x12
        \\msr PMEVCNTR6_EL0, x12
        \\msr PMEVCNTR7_EL0, x12
        \\msr PMEVCNTR8_EL0, x12
        \\msr PMEVCNTR9_EL0, x12
        \\msr PMEVCNTR10_EL0, x12
        \\msr PMEVCNTR11_EL0, x12
        \\msr PMEVCNTR12_EL0, x12
        \\msr PMEVCNTR13_EL0, x12
        \\msr PMEVCNTR14_EL0, x12
        \\msr PMEVCNTR15_EL0, x12
        \\msr PMEVCNTR16_EL0, x12
        \\msr PMEVCNTR17_EL0, x12
        \\msr PMEVCNTR18_EL0, x12
        \\msr PMEVCNTR19_EL0, x12
        \\msr PMEVCNTR20_EL0, x12
        \\msr PMEVCNTR21_EL0, x12
        \\msr PMEVCNTR22_EL0, x12
        \\msr PMEVCNTR23_EL0, x12
        \\msr PMEVCNTR24_EL0, x12
        \\msr PMEVCNTR25_EL0, x12
        \\msr PMEVCNTR26_EL0, x12
        \\msr PMEVCNTR27_EL0, x12
        \\msr PMEVCNTR28_EL0, x12
        \\msr PMEVCNTR29_EL0, x12
        \\msr PMEVCNTR30_EL0, x12
        \\msr PMCCFILTR_EL0, x12
        \\msr PMEVTYPER0_EL0, x12
        \\msr PMEVTYPER1_EL0, x12
        \\msr PMEVTYPER2_EL0, x12
        \\msr PMEVTYPER3_EL0, x12
        \\msr PMEVTYPER4_EL0, x12
        \\msr PMEVTYPER5_EL0, x12
        \\msr PMEVTYPER6_EL0, x12
        \\msr PMEVTYPER7_EL0, x12
        \\msr PMEVTYPER8_EL0, x12
        \\msr PMEVTYPER9_EL0, x12
        \\msr PMEVTYPER10_EL0, x12
        \\msr PMEVTYPER11_EL0, x12
        \\msr PMEVTYPER12_EL0, x12
        \\msr PMEVTYPER13_EL0, x12
        \\msr PMEVTYPER14_EL0, x12
        \\msr PMEVTYPER15_EL0, x12
        \\msr PMEVTYPER16_EL0, x12
        \\msr PMEVTYPER17_EL0, x12
        \\msr PMEVTYPER18_EL0, x12
        \\msr PMEVTYPER19_EL0, x12
        \\msr PMEVTYPER20_EL0, x12
        \\msr PMEVTYPER21_EL0, x12
        \\msr PMEVTYPER22_EL0, x12
        \\msr PMEVTYPER23_EL0, x12
        \\msr PMEVTYPER24_EL0, x12
        \\msr PMEVTYPER25_EL0, x12
        \\msr PMEVTYPER26_EL0, x12
        \\msr PMEVTYPER27_EL0, x12
        \\msr PMEVTYPER28_EL0, x12
        \\msr PMEVTYPER29_EL0, x12
        \\msr PMEVTYPER30_EL0, x12
        \\mrs x9, TEECR32_EL1
        \\mrs x9, OSDTRRX_EL1
        \\mrs x9, MDCCSR_EL0
        \\mrs x9, MDCCINT_EL1
        \\mrs x9, MDSCR_EL1
        \\mrs x9, OSDTRTX_EL1
        \\mrs x9, DBGDTR_EL0
        \\mrs x9, DBGDTRRX_EL0
        \\mrs x9, OSECCR_EL1
        \\mrs x9, DBGVCR32_EL2
        \\mrs x9, DBGBVR0_EL1
        \\mrs x9, DBGBVR1_EL1
        \\mrs x9, DBGBVR2_EL1
        \\mrs x9, DBGBVR3_EL1
        \\mrs x9, DBGBVR4_EL1
        \\mrs x9, DBGBVR5_EL1
        \\mrs x9, DBGBVR6_EL1
        \\mrs x9, DBGBVR7_EL1
        \\mrs x9, DBGBVR8_EL1
        \\mrs x9, DBGBVR9_EL1
        \\mrs x9, DBGBVR10_EL1
        \\mrs x9, DBGBVR11_EL1
        \\mrs x9, DBGBVR12_EL1
        \\mrs x9, DBGBVR13_EL1
        \\mrs x9, DBGBVR14_EL1
        \\mrs x9, DBGBVR15_EL1
        \\mrs x9, DBGBCR0_EL1
        \\mrs x9, DBGBCR1_EL1
        \\mrs x9, DBGBCR2_EL1
        \\mrs x9, DBGBCR3_EL1
        \\mrs x9, DBGBCR4_EL1
        \\mrs x9, DBGBCR5_EL1
        \\mrs x9, DBGBCR6_EL1
        \\mrs x9, DBGBCR7_EL1
        \\mrs x9, DBGBCR8_EL1
        \\mrs x9, DBGBCR9_EL1
        \\mrs x9, DBGBCR10_EL1
        \\mrs x9, DBGBCR11_EL1
        \\mrs x9, DBGBCR12_EL1
        \\mrs x9, DBGBCR13_EL1
        \\mrs x9, DBGBCR14_EL1
        \\mrs x9, DBGBCR15_EL1
        \\mrs x9, DBGWVR0_EL1
        \\mrs x9, DBGWVR1_EL1
        \\mrs x9, DBGWVR2_EL1
        \\mrs x9, DBGWVR3_EL1
        \\mrs x9, DBGWVR4_EL1
        \\mrs x9, DBGWVR5_EL1
        \\mrs x9, DBGWVR6_EL1
        \\mrs x9, DBGWVR7_EL1
        \\mrs x9, DBGWVR8_EL1
        \\mrs x9, DBGWVR9_EL1
        \\mrs x9, DBGWVR10_EL1
        \\mrs x9, DBGWVR11_EL1
        \\mrs x9, DBGWVR12_EL1
        \\mrs x9, DBGWVR13_EL1
        \\mrs x9, DBGWVR14_EL1
        \\mrs x9, DBGWVR15_EL1
        \\mrs x9, DBGWCR0_EL1
        \\mrs x9, DBGWCR1_EL1
        \\mrs x9, DBGWCR2_EL1
        \\mrs x9, DBGWCR3_EL1
        \\mrs x9, DBGWCR4_EL1
        \\mrs x9, DBGWCR5_EL1
        \\mrs x9, DBGWCR6_EL1
        \\mrs x9, DBGWCR7_EL1
        \\mrs x9, DBGWCR8_EL1
        \\mrs x9, DBGWCR9_EL1
        \\mrs x9, DBGWCR10_EL1
        \\mrs x9, DBGWCR11_EL1
        \\mrs x9, DBGWCR12_EL1
        \\mrs x9, DBGWCR13_EL1
        \\mrs x9, DBGWCR14_EL1
        \\mrs x9, DBGWCR15_EL1
        \\mrs x9, MDRAR_EL1
        \\mrs x9, TEEHBR32_EL1
        \\mrs x9, OSLSR_EL1
        \\mrs x9, OSDLR_EL1
        \\mrs x9, DBGPRCR_EL1
        \\mrs x9, DBGCLAIMSET_EL1
        \\mrs x9, DBGCLAIMCLR_EL1
        \\mrs x9, DBGAUTHSTATUS_EL1
        \\mrs x9, MIDR_EL1
        \\mrs x9, CCSIDR_EL1
        \\mrs x9, CSSELR_EL1
        \\mrs x9, CCSIDR2_EL1
        \\mrs x9, VPIDR_EL2
        \\mrs x9, CLIDR_EL1
        \\mrs x9, CTR_EL0
        \\mrs x9, MPIDR_EL1
        \\mrs x9, VMPIDR_EL2
        \\mrs x9, REVIDR_EL1
        \\mrs x9, AIDR_EL1
        \\mrs x9, DCZID_EL0
        \\mrs x9, ID_PFR0_EL1
        \\mrs x9, ID_PFR1_EL1
        \\mrs x9, ID_DFR0_EL1
        \\mrs x9, ID_AFR0_EL1
        \\mrs x9, ID_MMFR0_EL1
        \\mrs x9, ID_MMFR1_EL1
        \\mrs x9, ID_MMFR2_EL1
        \\mrs x9, ID_MMFR3_EL1
        \\mrs x9, ID_MMFR4_EL1
        \\mrs x9, ID_MMFR5_EL1
        \\mrs x9, ID_ISAR0_EL1
        \\mrs x9, ID_ISAR1_EL1
        \\mrs x9, ID_ISAR2_EL1
        \\mrs x9, ID_ISAR3_EL1
        \\mrs x9, ID_ISAR4_EL1
        \\mrs x9, ID_ISAR5_EL1
        \\mrs x9, MVFR0_EL1
        \\mrs x9, MVFR1_EL1
        \\mrs x9, MVFR2_EL1
        \\mrs x9, ID_AA64PFR0_EL1
        \\mrs x9, ID_AA64PFR1_EL1
        \\mrs x9, ID_AA64DFR0_EL1
        \\mrs x9, ID_AA64DFR1_EL1
        \\mrs x9, ID_AA64AFR0_EL1
        \\mrs x9, ID_AA64AFR1_EL1
        \\mrs x9, ID_AA64ISAR0_EL1
        \\mrs x9, ID_AA64ISAR1_EL1
        \\mrs x9, ID_AA64ISAR2_EL1
        \\mrs x9, ID_AA64MMFR0_EL1
        \\mrs x9, ID_AA64MMFR1_EL1
        \\mrs x9, SCTLR_EL1
        \\mrs x9, SCTLR_EL2
        \\mrs x9, SCTLR_EL3
        \\mrs x9, ACTLR_EL1
        \\mrs x9, ACTLR_EL2
        \\mrs x9, ACTLR_EL3
        \\mrs x9, CPACR_EL1
        \\mrs x9, HCR_EL2
        \\mrs x9, SCR_EL3
        \\mrs x9, MDCR_EL2
        \\mrs x9, SDER32_EL3
        \\mrs x9, CPTR_EL2
        \\mrs x9, CPTR_EL3
        \\mrs x9, HSTR_EL2
        \\mrs x9, HACR_EL2
        \\mrs x9, MDCR_EL3
        \\mrs x9, TTBR0_EL1
        \\mrs x9, TTBR0_EL2
        \\mrs x9, TTBR0_EL3
        \\mrs x9, TTBR1_EL1
        \\mrs x9, TCR_EL1
        \\mrs x9, TCR_EL2
        \\mrs x9, TCR_EL3
        \\mrs x9, VTTBR_EL2
        \\mrs x9, VTCR_EL2
        \\mrs x9, DACR32_EL2
        \\mrs x9, SPSR_EL1
        \\mrs x9, SPSR_EL2
        \\mrs x9, SPSR_EL3
        \\mrs x9, ELR_EL1
        \\mrs x9, ELR_EL2
        \\mrs x9, ELR_EL3
        \\mrs x9, SP_EL0
        \\mrs x9, SP_EL1
        \\mrs x9, SP_EL2
        \\mrs x9, SPSel
        \\mrs x9, NZCV
        \\mrs x9, DAIF
        \\mrs x9, CurrentEL
        \\mrs x9, SPSR_irq
        \\mrs x9, SPSR_abt
        \\mrs x9, SPSR_und
        \\mrs x9, SPSR_fiq
        \\mrs x9, FPCR
        \\mrs x9, FPSR
        \\mrs x9, DSPSR_EL0
        \\mrs x9, DLR_EL0
        \\mrs x9, IFSR32_EL2
        \\mrs x9, AFSR0_EL1
        \\mrs x9, AFSR0_EL2
        \\mrs x9, AFSR0_EL3
        \\mrs x9, AFSR1_EL1
        \\mrs x9, AFSR1_EL2
        \\mrs x9, AFSR1_EL3
        \\mrs x9, ESR_EL1
        \\mrs x9, ESR_EL2
        \\mrs x9, ESR_EL3
        \\mrs x9, FPEXC32_EL2
        \\mrs x9, FAR_EL1
        \\mrs x9, FAR_EL2
        \\mrs x9, FAR_EL3
        \\mrs x9, HPFAR_EL2
        \\mrs x9, PAR_EL1
        \\mrs x9, PMCR_EL0
        \\mrs x9, PMCNTENSET_EL0
        \\mrs x9, PMCNTENCLR_EL0
        \\mrs x9, PMOVSCLR_EL0
        \\mrs x9, PMSELR_EL0
        \\mrs x9, PMCEID0_EL0
        \\mrs x9, PMCEID1_EL0
        \\mrs x9, PMCCNTR_EL0
        \\mrs x9, PMXEVTYPER_EL0
        \\mrs x9, PMXEVCNTR_EL0
        \\mrs x9, PMUSERENR_EL0
        \\mrs x9, PMINTENSET_EL1
        \\mrs x9, PMINTENCLR_EL1
        \\mrs x9, PMOVSSET_EL0
        \\mrs x9, MAIR_EL1
        \\mrs x9, MAIR_EL2
        \\mrs x9, MAIR_EL3
        \\mrs x9, AMAIR_EL1
        \\mrs x9, AMAIR_EL2
        \\mrs x9, AMAIR_EL3
        \\mrs x9, VBAR_EL1
        \\mrs x9, VBAR_EL2
        \\mrs x9, VBAR_EL3
        \\mrs x9, RVBAR_EL1
        \\mrs x9, RVBAR_EL2
        \\mrs x9, RVBAR_EL3
        \\mrs x9, RMR_EL1
        \\mrs x9, RMR_EL2
        \\mrs x9, RMR_EL3
        \\mrs x9, ISR_EL1
        \\mrs x9, CONTEXTIDR_EL1
        \\mrs x9, TPIDR_EL0
        \\mrs x9, TPIDR_EL2
        \\mrs x9, TPIDR_EL3
        \\mrs x9, TPIDRRO_EL0
        \\mrs x9, TPIDR_EL1
        \\mrs x9, CNTFRQ_EL0
        \\mrs x9, CNTPCT_EL0
        \\mrs x9, CNTVCT_EL0
        \\mrs x9, CNTVOFF_EL2
        \\mrs x9, CNTKCTL_EL1
        \\mrs x9, CNTHCTL_EL2
        \\mrs x9, CNTP_TVAL_EL0
        \\mrs x9, CNTHP_TVAL_EL2
        \\mrs x9, CNTPS_TVAL_EL1
        \\mrs x9, CNTP_CTL_EL0
        \\mrs x9, CNTHP_CTL_EL2
        \\mrs x9, CNTPS_CTL_EL1
        \\mrs x9, CNTP_CVAL_EL0
        \\mrs x9, CNTHP_CVAL_EL2
        \\mrs x9, CNTPS_CVAL_EL1
        \\mrs x9, CNTV_TVAL_EL0
        \\mrs x9, CNTV_CTL_EL0
        \\mrs x9, CNTV_CVAL_EL0
        \\mrs x9, PMEVCNTR0_EL0
        \\mrs x9, PMEVCNTR1_EL0
        \\mrs x9, PMEVCNTR2_EL0
        \\mrs x9, PMEVCNTR3_EL0
        \\mrs x9, PMEVCNTR4_EL0
        \\mrs x9, PMEVCNTR5_EL0
        \\mrs x9, PMEVCNTR6_EL0
        \\mrs x9, PMEVCNTR7_EL0
        \\mrs x9, PMEVCNTR8_EL0
        \\mrs x9, PMEVCNTR9_EL0
        \\mrs x9, PMEVCNTR10_EL0
        \\mrs x9, PMEVCNTR11_EL0
        \\mrs x9, PMEVCNTR12_EL0
        \\mrs x9, PMEVCNTR13_EL0
        \\mrs x9, PMEVCNTR14_EL0
        \\mrs x9, PMEVCNTR15_EL0
        \\mrs x9, PMEVCNTR16_EL0
        \\mrs x9, PMEVCNTR17_EL0
        \\mrs x9, PMEVCNTR18_EL0
        \\mrs x9, PMEVCNTR19_EL0
        \\mrs x9, PMEVCNTR20_EL0
        \\mrs x9, PMEVCNTR21_EL0
        \\mrs x9, PMEVCNTR22_EL0
        \\mrs x9, PMEVCNTR23_EL0
        \\mrs x9, PMEVCNTR24_EL0
        \\mrs x9, PMEVCNTR25_EL0
        \\mrs x9, PMEVCNTR26_EL0
        \\mrs x9, PMEVCNTR27_EL0
        \\mrs x9, PMEVCNTR28_EL0
        \\mrs x9, PMEVCNTR29_EL0
        \\mrs x9, PMEVCNTR30_EL0
        \\mrs x9, PMCCFILTR_EL0
        \\mrs x9, PMEVTYPER0_EL0
        \\mrs x9, PMEVTYPER1_EL0
        \\mrs x9, PMEVTYPER2_EL0
        \\mrs x9, PMEVTYPER3_EL0
        \\mrs x9, PMEVTYPER4_EL0
        \\mrs x9, PMEVTYPER5_EL0
        \\mrs x9, PMEVTYPER6_EL0
        \\mrs x9, PMEVTYPER7_EL0
        \\mrs x9, PMEVTYPER8_EL0
        \\mrs x9, PMEVTYPER9_EL0
        \\mrs x9, PMEVTYPER10_EL0
        \\mrs x9, PMEVTYPER11_EL0
        \\mrs x9, PMEVTYPER12_EL0
        \\mrs x9, PMEVTYPER13_EL0
        \\mrs x9, PMEVTYPER14_EL0
        \\mrs x9, PMEVTYPER15_EL0
        \\mrs x9, PMEVTYPER16_EL0
        \\mrs x9, PMEVTYPER17_EL0
        \\mrs x9, PMEVTYPER18_EL0
        \\mrs x9, PMEVTYPER19_EL0
        \\mrs x9, PMEVTYPER20_EL0
        \\mrs x9, PMEVTYPER21_EL0
        \\mrs x9, PMEVTYPER22_EL0
        \\mrs x9, PMEVTYPER23_EL0
        \\mrs x9, PMEVTYPER24_EL0
        \\mrs x9, PMEVTYPER25_EL0
        \\mrs x9, PMEVTYPER26_EL0
        \\mrs x9, PMEVTYPER27_EL0
        \\mrs x9, PMEVTYPER28_EL0
        \\mrs x9, PMEVTYPER29_EL0
        \\mrs x9, PMEVTYPER30_EL0
        \\mrs x12, S3_7_C15_C1_5
        \\mrs x13, S3_2_C11_C15_7
        // Invalid instruction, see documentation above in hex area
        // \\mrs xzr, S0_0_C4_C0_0
        \\msr S3_0_C15_C0_0, x12
        \\msr S3_7_C11_C13_7, x5
        // Also invalid.
        // \\msr S0_0_C4_C0_0, xzr
        \\tbz x12, #62, #0
        \\tbz x12, #62, #4
        \\tbz x12, #62, #-32768
        \\tbnz x12, #60, #32764
        \\b #4
        \\b #-4
        \\b #134217724
        \\br x20
        \\blr xzr
        \\ret x10
        \\ret
        \\eret
        \\drps
        \\
    );
}

test "basic a64 undefined" {
    if (true) return error.SkipZigTest;
}

test "basic a64 unpredictable" {
    if (true) return error.SkipZigTest;
}

test "brbe" {
    if (true) return error.SkipZigTest;
}

test "ete" {
    if (true) return error.SkipZigTest;
}

test "fullfp16 neg" {
    if (true) return error.SkipZigTest;
}

test "fullfp16 neon neg" {
    if (true) return error.SkipZigTest;
}

test "gicv3 regs" {
    try doTheTest(&.{
        0x08, 0xcc, 0x38, 0xd5,
        0x1a, 0xc8, 0x38, 0xd5,
        0x42, 0xcc, 0x38, 0xd5,
        0x51, 0xc8, 0x38, 0xd5,
        0x7d, 0xcb, 0x38, 0xd5,
        0x24, 0xcb, 0x3c, 0xd5,
        0x78, 0xcb, 0x3c, 0xd5,
        0xa9, 0xcb, 0x3c, 0xd5,
        0x78, 0xcc, 0x38, 0xd5,
        0x6e, 0xc8, 0x38, 0xd5,
        0x13, 0x46, 0x38, 0xd5,
        0x97, 0xcc, 0x38, 0xd5,
        0x94, 0xcc, 0x3e, 0xd5,
        0xbc, 0xcc, 0x38, 0xd5,
        0xb9, 0xc9, 0x3c, 0xd5,
        0xa8, 0xcc, 0x3e, 0xd5,
        0xd6, 0xcc, 0x38, 0xd5,
        0xe5, 0xcc, 0x38, 0xd5,
        0xe7, 0xcc, 0x3e, 0xd5,
        0x84, 0xc8, 0x38, 0xd5,
        0xab, 0xc8, 0x38, 0xd5,
        0xdb, 0xc8, 0x38, 0xd5,
        0xf5, 0xc8, 0x38, 0xd5,
        0x02, 0xc9, 0x38, 0xd5,
        0x35, 0xc9, 0x38, 0xd5,
        0x4a, 0xc9, 0x38, 0xd5,
        0x7b, 0xc9, 0x38, 0xd5,
        0x14, 0xc8, 0x3c, 0xd5,
        0x35, 0xc8, 0x3c, 0xd5,
        0x45, 0xc8, 0x3c, 0xd5,
        0x64, 0xc8, 0x3c, 0xd5,
        0x0f, 0xc9, 0x3c, 0xd5,
        0x2c, 0xc9, 0x3c, 0xd5,
        0x5b, 0xc9, 0x3c, 0xd5,
        0x74, 0xc9, 0x3c, 0xd5,
        0x0a, 0xcb, 0x3c, 0xd5,
        0x5b, 0xcb, 0x3c, 0xd5,
        0xe6, 0xcb, 0x3c, 0xd5,
        0x03, 0xcc, 0x3c, 0xd5,
        0x21, 0xcc, 0x3c, 0xd5,
        0x56, 0xcc, 0x3c, 0xd5,
        0x75, 0xcc, 0x3c, 0xd5,
        0x86, 0xcc, 0x3c, 0xd5,
        0xaa, 0xcc, 0x3c, 0xd5,
        0xcb, 0xcc, 0x3c, 0xd5,
        0xec, 0xcc, 0x3c, 0xd5,
        0x00, 0xcd, 0x3c, 0xd5,
        0x35, 0xcd, 0x3c, 0xd5,
        0x4d, 0xcd, 0x3c, 0xd5,
        0x7a, 0xcd, 0x3c, 0xd5,
        0x81, 0xcd, 0x3c, 0xd5,
        0xa8, 0xcd, 0x3c, 0xd5,
        0xc2, 0xcd, 0x3c, 0xd5,
        0xe8, 0xcd, 0x3c, 0xd5,
        0x3b, 0xcc, 0x18, 0xd5,
        0x25, 0xc8, 0x18, 0xd5,
        0x2d, 0xcb, 0x18, 0xd5,
        0xb5, 0xcb, 0x18, 0xd5,
        0xd9, 0xcb, 0x18, 0xd5,
        0xfc, 0xcb, 0x18, 0xd5,
        0x67, 0xcc, 0x18, 0xd5,
        0x69, 0xc8, 0x18, 0xd5,
        0x1d, 0x46, 0x18, 0xd5,
        0x98, 0xcc, 0x18, 0xd5,
        0x80, 0xcc, 0x1e, 0xd5,
        0xa2, 0xcc, 0x18, 0xd5,
        0xa5, 0xc9, 0x1c, 0xd5,
        0xaa, 0xcc, 0x1e, 0xd5,
        0xd6, 0xcc, 0x18, 0xd5,
        0xeb, 0xcc, 0x18, 0xd5,
        0xe8, 0xcc, 0x1e, 0xd5,
        0x9b, 0xc8, 0x18, 0xd5,
        0xa5, 0xc8, 0x18, 0xd5,
        0xd4, 0xc8, 0x18, 0xd5,
        0xe0, 0xc8, 0x18, 0xd5,
        0x02, 0xc9, 0x18, 0xd5,
        0x3d, 0xc9, 0x18, 0xd5,
        0x57, 0xc9, 0x18, 0xd5,
        0x6b, 0xc9, 0x18, 0xd5,
        0x02, 0xc8, 0x1c, 0xd5,
        0x3b, 0xc8, 0x1c, 0xd5,
        0x47, 0xc8, 0x1c, 0xd5,
        0x61, 0xc8, 0x1c, 0xd5,
        0x07, 0xc9, 0x1c, 0xd5,
        0x2c, 0xc9, 0x1c, 0xd5,
        0x4e, 0xc9, 0x1c, 0xd5,
        0x6d, 0xc9, 0x1c, 0xd5,
        0x01, 0xcb, 0x1c, 0xd5,
        0x4a, 0xcb, 0x1c, 0xd5,
        0xf8, 0xcb, 0x1c, 0xd5,
        0x1a, 0xcc, 0x1c, 0xd5,
        0x29, 0xcc, 0x1c, 0xd5,
        0x52, 0xcc, 0x1c, 0xd5,
        0x7a, 0xcc, 0x1c, 0xd5,
        0x96, 0xcc, 0x1c, 0xd5,
        0xba, 0xcc, 0x1c, 0xd5,
        0xdb, 0xcc, 0x1c, 0xd5,
        0xe8, 0xcc, 0x1c, 0xd5,
        0x11, 0xcd, 0x1c, 0xd5,
        0x33, 0xcd, 0x1c, 0xd5,
        0x51, 0xcd, 0x1c, 0xd5,
        0x65, 0xcd, 0x1c, 0xd5,
        0x9d, 0xcd, 0x1c, 0xd5,
        0xa2, 0xcd, 0x1c, 0xd5,
        0xcd, 0xcd, 0x1c, 0xd5,
        0xfb, 0xcd, 0x1c, 0xd5,
    },
        \\mrs x8, ICC_IAR1_EL1
        \\mrs x26, ICC_IAR0_EL1
        \\mrs x2, ICC_HPPIR1_EL1
        \\mrs x17, ICC_HPPIR0_EL1
        \\mrs x29, ICC_RPR_EL1
        \\mrs x4, ICH_VTR_EL2
        \\mrs x24, ICH_EISR_EL2
        \\mrs x9, ICH_ELRSR_EL2
        \\mrs x24, ICC_BPR1_EL1
        \\mrs x14, ICC_BPR0_EL1
        \\mrs x19, ICC_PMR_EL1
        \\mrs x23, ICC_CTLR_EL1
        \\mrs x20, ICC_CTLR_EL3
        \\mrs x28, ICC_SRE_EL1
        \\mrs x25, ICC_SRE_EL2
        \\mrs x8, ICC_SRE_EL3
        \\mrs x22, ICC_IGRPEN0_EL1
        \\mrs x5, ICC_IGRPEN1_EL1
        \\mrs x7, ICC_IGRPEN1_EL3
        \\mrs x4, ICC_AP0R0_EL1
        \\mrs x11, ICC_AP0R1_EL1
        \\mrs x27, ICC_AP0R2_EL1
        \\mrs x21, ICC_AP0R3_EL1
        \\mrs x2, ICC_AP1R0_EL1
        \\mrs x21, ICC_AP1R1_EL1
        \\mrs x10, ICC_AP1R2_EL1
        \\mrs x27, ICC_AP1R3_EL1
        \\mrs x20, ICH_AP0R0_EL2
        \\mrs x21, ICH_AP0R1_EL2
        \\mrs x5, ICH_AP0R2_EL2
        \\mrs x4, ICH_AP0R3_EL2
        \\mrs x15, ICH_AP1R0_EL2
        \\mrs x12, ICH_AP1R1_EL2
        \\mrs x27, ICH_AP1R2_EL2
        \\mrs x20, ICH_AP1R3_EL2
        \\mrs x10, ICH_HCR_EL2
        \\mrs x27, ICH_MISR_EL2
        \\mrs x6, ICH_VMCR_EL2
        \\mrs x3, ICH_LR0_EL2
        \\mrs x1, ICH_LR1_EL2
        \\mrs x22, ICH_LR2_EL2
        \\mrs x21, ICH_LR3_EL2
        \\mrs x6, ICH_LR4_EL2
        \\mrs x10, ICH_LR5_EL2
        \\mrs x11, ICH_LR6_EL2
        \\mrs x12, ICH_LR7_EL2
        \\mrs x0, ICH_LR8_EL2
        \\mrs x21, ICH_LR9_EL2
        \\mrs x13, ICH_LR10_EL2
        \\mrs x26, ICH_LR11_EL2
        \\mrs x1, ICH_LR12_EL2
        \\mrs x8, ICH_LR13_EL2
        \\mrs x2, ICH_LR14_EL2
        \\mrs x8, ICH_LR15_EL2
        \\msr ICC_EOIR1_EL1, x27
        \\msr ICC_EOIR0_EL1, x5
        \\msr ICC_DIR_EL1, x13
        \\msr ICC_SGI1R_EL1, x21
        \\msr ICC_ASGI1R_EL1, x25
        \\msr ICC_SGI0R_EL1, x28
        \\msr ICC_BPR1_EL1, x7
        \\msr ICC_BPR0_EL1, x9
        \\msr ICC_PMR_EL1, x29
        \\msr ICC_CTLR_EL1, x24
        \\msr ICC_CTLR_EL3, x0
        \\msr ICC_SRE_EL1, x2
        \\msr ICC_SRE_EL2, x5
        \\msr ICC_SRE_EL3, x10
        \\msr ICC_IGRPEN0_EL1, x22
        \\msr ICC_IGRPEN1_EL1, x11
        \\msr ICC_IGRPEN1_EL3, x8
        \\msr ICC_AP0R0_EL1, x27
        \\msr ICC_AP0R1_EL1, x5
        \\msr ICC_AP0R2_EL1, x20
        \\msr ICC_AP0R3_EL1, x0
        \\msr ICC_AP1R0_EL1, x2
        \\msr ICC_AP1R1_EL1, x29
        \\msr ICC_AP1R2_EL1, x23
        \\msr ICC_AP1R3_EL1, x11
        \\msr ICH_AP0R0_EL2, x2
        \\msr ICH_AP0R1_EL2, x27
        \\msr ICH_AP0R2_EL2, x7
        \\msr ICH_AP0R3_EL2, x1
        \\msr ICH_AP1R0_EL2, x7
        \\msr ICH_AP1R1_EL2, x12
        \\msr ICH_AP1R2_EL2, x14
        \\msr ICH_AP1R3_EL2, x13
        \\msr ICH_HCR_EL2, x1
        \\msr ICH_MISR_EL2, x10
        \\msr ICH_VMCR_EL2, x24
        \\msr ICH_LR0_EL2, x26
        \\msr ICH_LR1_EL2, x9
        \\msr ICH_LR2_EL2, x18
        \\msr ICH_LR3_EL2, x26
        \\msr ICH_LR4_EL2, x22
        \\msr ICH_LR5_EL2, x26
        \\msr ICH_LR6_EL2, x27
        \\msr ICH_LR7_EL2, x8
        \\msr ICH_LR8_EL2, x17
        \\msr ICH_LR9_EL2, x19
        \\msr ICH_LR10_EL2, x17
        \\msr ICH_LR11_EL2, x5
        \\msr ICH_LR12_EL2, x29
        \\msr ICH_LR13_EL2, x2
        \\msr ICH_LR14_EL2, x13
        \\msr ICH_LR15_EL2, x27
        \\
    );
}

test "ldp offset predictable" {
    if (true) return error.SkipZigTest;
}

test "ldp postind.predictable" {
    if (true) return error.SkipZigTest;
}

test "ldp preind.predictable" {
    if (true) return error.SkipZigTest;
}

test "lit.local.cfg" {
    if (true) return error.SkipZigTest;
}

test "neon instructions" {
    if (true) return error.SkipZigTest;
}

test "ras extension" {
    if (true) return error.SkipZigTest;
}

test "speculation barriers" {
    if (true) return error.SkipZigTest;
}

test "tme" {
    if (true) return error.SkipZigTest;
}

test "trace regs" {
    if (true) return error.SkipZigTest;
}

test "trbe" {
    if (true) return error.SkipZigTest;
}

test "udf" {
    if (true) return error.SkipZigTest;
}

test "ignored fields" {
    if (true) return error.SkipZigTest;
}

fn doTheTest(bytes: []const u8, expected: []const u8) !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    var disassembler = Disassembler.init(bytes);

    var text = std.ArrayList(u8).init(gpa.allocator());
    defer text.deinit();

    while (try disassembler.next()) |inst| {
        try inst.fmtPrint(text.writer());
        try text.append('\n');
    }

    try std.testing.expectEqualStrings(expected, text.items);
}

test "static analysis" {
    std.testing.refAllDeclsRecursive(@This());
}
